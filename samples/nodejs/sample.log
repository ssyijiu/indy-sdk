=============================================
=== Steward Setup ===

@Steward -> Create Wallet
@Steward -> Create DID
{ stewardDid: 'Th7MpTaRZVRYnPiabds81Y',
  stewardVerKey: 'FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4' }

=============================================
=== Daniel Setup ===

@Daniel -> Create Wallet
@Daniel -> Create Master Scecret
{ danielMasterSecretId: '616625ec-be3e-4410-8208-ae79ffd6a975' }

=============================================
=== Steward-Park Onboarding & Park GetVerinym ===

@Park -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Park"
{ fromToDid: 'UD9cKu1PbC6DU1kdRj8wrz',
  fromToVerKey: 'Fq9PDgn6VJKwhuZ7t2kERd1kv7KjPGnj3xu98MPUy9L2' }
@Steward -> Send Nym to Ledger for "Steward Park" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: 'A8AXLV4sRQKJgwhQhTtdKtr7uUSSUhKS2qwxArpcJjHK',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
@Steward -> Send connection request to Park with "Steward Park" DID and nonce
{ connectionRequest: { did: 'UD9cKu1PbC6DU1kdRj8wrz', nonce: 123456 } }
@Steward -> Sending request ......
@Park -> ...... request received
@Park -> Create DID "Park Steward"
{ toFromDid: 'QTxmC7wsUcg1vvfUw8rQr5',
  toFromVerKey: 'Dnmg3kRFTdU6tEQS2vJSJ1qZhanQVXSpJgcbJujZ2DMr' }
@Park -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: 'Fq9PDgn6VJKwhuZ7t2kERd1kv7KjPGnj3xu98MPUy9L2' }
@Park -> Anoncrypt connection response for "Steward" with "Park Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"QTxmC7wsUcg1vvfUw8rQr5","verkey":"Dnmg3kRFTdU6tEQS2vJSJ1qZhanQVXSpJgcbJujZ2DMr","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 86 aa 2b 9a a2 d5 a1 29 fe 20 f7 ca 78 93 81 a2 ab 6a ea 60 d7 ef 67 3a 6b 94 d1 b6 5a 52 a5 33 fc 22 00 dc c8 01 02 0b 06 de 11 c1 f3 ed 76 67 e3 65 ... > }
@Park -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Park"
{ decryptedConnectionResponse: 
   { did: 'QTxmC7wsUcg1vvfUw8rQr5',
     verkey: 'Dnmg3kRFTdU6tEQS2vJSJ1qZhanQVXSpJgcbJujZ2DMr',
     nonce: 123456 } }
@Steward -> Authenticates "Park" by comparision of none
@Steward -> Send Nym to Ledger for "Park Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'C4hscrEkHckQBbcwGuSfnsFk66VJtmoLf7fn2RQYfibE',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ stewardParkDid: 'UD9cKu1PbC6DU1kdRj8wrz',
  stewardParkVerKey: 'Fq9PDgn6VJKwhuZ7t2kERd1kv7KjPGnj3xu98MPUy9L2',
  parkStewardDid: 'QTxmC7wsUcg1vvfUw8rQr5',
  parkStewardVerKey: 'Dnmg3kRFTdU6tEQS2vJSJ1qZhanQVXSpJgcbJujZ2DMr' }

*** getVerinym ***

@Park -> Create DID
{ toDid: '4BLrdHASAynTY6xDyfX9DT',
  toVerKey: '2jURdkgcU66PerJ7todBUgM7y81YVQHCm2ngzQy5veSU' }
@Park -> Authcrypt "Park" DID info for "Steward"
{ didInfoJson: '{"did":"4BLrdHASAynTY6xDyfX9DT","verkey":"2jURdkgcU66PerJ7todBUgM7y81YVQHCm2ngzQy5veSU"}',
  authcryptedDidInfo: <Buffer 55 19 13 df 38 6d 88 fd 60 8b 9c 2c 25 98 61 47 4b cb a1 73 18 d0 d5 ac da 73 cc ea 7a ac c5 74 a8 f7 24 02 1c 84 da 72 2d 97 0d 05 e8 ac 2d 08 4a 93 ... > }
@Park -> Sending authcrypted "Park" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Park" DID info from "Park"
{ senderVerKey: 'Dnmg3kRFTdU6tEQS2vJSJ1qZhanQVXSpJgcbJujZ2DMr',
  authdecryptedDidInfoRaw: <Buffer 7b 22 64 69 64 22 3a 22 34 42 4c 72 64 48 41 53 41 79 6e 54 59 36 78 44 79 66 58 39 44 54 22 2c 22 76 65 72 6b 65 79 22 3a 22 32 6a 55 52 64 6b 67 63 ... >,
  authdecryptedDidInfo: 
   { did: '4BLrdHASAynTY6xDyfX9DT',
     verkey: '2jURdkgcU66PerJ7todBUgM7y81YVQHCm2ngzQy5veSU' } }
@Steward -> Authenticates "Park" by comparison of Verkeys
{ retrievedVerKey: 'Dnmg3kRFTdU6tEQS2vJSJ1qZhanQVXSpJgcbJujZ2DMr' }
@Steward -> Send Nym to Ledger for "Park" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '6vSFZqzEVUtTAejFun68FCGyPskmuPixFfvC1DiB3EuD',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ parkDid: '4BLrdHASAynTY6xDyfX9DT' }

=============================================
=== Steward-Company Onboarding & Company GetVerinym ===

@Company -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Company"
{ fromToDid: 'DZWdkVEN9PjovY1tCFTMzv',
  fromToVerKey: '7r4ff6iZadiPsGL9G8H2o9z35kk4KDdsStzsfzaM9sGs' }
@Steward -> Send Nym to Ledger for "Steward Company" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: '6DG1kQdkGkcPdG3ehsaxbib4yCyFNRHBMwuzhFXy4j3W',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
@Steward -> Send connection request to Company with "Steward Company" DID and nonce
{ connectionRequest: { did: 'DZWdkVEN9PjovY1tCFTMzv', nonce: 123456 } }
@Steward -> Sending request ......
@Company -> ...... request received
@Company -> Create DID "Company Steward"
{ toFromDid: '7hJAe7LwGLFRM5KpVuep2V',
  toFromVerKey: '4edoTmubC6hRmk4BUNEaJQhXDyeH1qmA6GKRF2zEDqU6' }
@Company -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: '7r4ff6iZadiPsGL9G8H2o9z35kk4KDdsStzsfzaM9sGs' }
@Company -> Anoncrypt connection response for "Steward" with "Company Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"7hJAe7LwGLFRM5KpVuep2V","verkey":"4edoTmubC6hRmk4BUNEaJQhXDyeH1qmA6GKRF2zEDqU6","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 5f 07 98 df 48 60 26 9f 75 66 14 ad 7c aa d6 8e dd 08 47 b4 28 04 7d c7 b7 b2 ac ab cd 79 de 5f 6f 1b 60 41 f7 46 91 83 c9 de 16 51 10 f8 49 74 be 13 ... > }
@Company -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Company"
{ decryptedConnectionResponse: 
   { did: '7hJAe7LwGLFRM5KpVuep2V',
     verkey: '4edoTmubC6hRmk4BUNEaJQhXDyeH1qmA6GKRF2zEDqU6',
     nonce: 123456 } }
@Steward -> Authenticates "Company" by comparision of none
@Steward -> Send Nym to Ledger for "Company Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '3UpCmYsqRKsFb5y13ryJaHxkpqtjjq5fpitDuWHzsCQm',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ stewardCompanyDid: 'DZWdkVEN9PjovY1tCFTMzv',
  stewardCompanyVerKey: '7r4ff6iZadiPsGL9G8H2o9z35kk4KDdsStzsfzaM9sGs',
  companyStewardDid: '7hJAe7LwGLFRM5KpVuep2V',
  companyStewardVerkey: '4edoTmubC6hRmk4BUNEaJQhXDyeH1qmA6GKRF2zEDqU6' }

*** getVerinym ***

@Company -> Create DID
{ toDid: 'HY1SC2aVUg9m3ArQZMhW5W',
  toVerKey: 'A1h7oWioeAseQ4JcyudJCfQNDc7wUokNtm8FtzfWP2GE' }
@Company -> Authcrypt "Company" DID info for "Steward"
{ didInfoJson: '{"did":"HY1SC2aVUg9m3ArQZMhW5W","verkey":"A1h7oWioeAseQ4JcyudJCfQNDc7wUokNtm8FtzfWP2GE"}',
  authcryptedDidInfo: <Buffer 3a 16 d6 25 04 a7 88 a7 e2 1b c5 f1 fa 77 27 2d d3 7e c9 74 d8 45 1e ac 6a fc 18 f7 d3 f5 5d 64 8b ec 07 93 96 cc c6 29 09 c6 d3 61 ed 24 2f c9 9e a6 ... > }
@Company -> Sending authcrypted "Company" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Company" DID info from "Company"
{ senderVerKey: '4edoTmubC6hRmk4BUNEaJQhXDyeH1qmA6GKRF2zEDqU6',
  authdecryptedDidInfoRaw: <Buffer 7b 22 64 69 64 22 3a 22 48 59 31 53 43 32 61 56 55 67 39 6d 33 41 72 51 5a 4d 68 57 35 57 22 2c 22 76 65 72 6b 65 79 22 3a 22 41 31 68 37 6f 57 69 6f ... >,
  authdecryptedDidInfo: 
   { did: 'HY1SC2aVUg9m3ArQZMhW5W',
     verkey: 'A1h7oWioeAseQ4JcyudJCfQNDc7wUokNtm8FtzfWP2GE' } }
@Steward -> Authenticates "Company" by comparison of Verkeys
{ retrievedVerKey: '4edoTmubC6hRmk4BUNEaJQhXDyeH1qmA6GKRF2zEDqU6' }
@Steward -> Send Nym to Ledger for "Company" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'CoYTvw8YofgzKv2utPPxUvLitaXp3y9cmp4dasJVeqaV',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ companyDid: 'HY1SC2aVUg9m3ArQZMhW5W' }

=============================================
=== Credential Schemas Setup ===

@Steward -> Create "Job-Certificate" Schema
{ jobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  jobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'salary', 'first_name', 'status', 'experience', 'last_name' ],
     seqNo: null } }
@Steward -> Send "Job-Certificate" Schema to Ledger
{ requestResult: 
   { reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Job-Certificate and version 0.1\',)',
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reqId: 1541732702166924000,
     op: 'REJECT' } }
@Steward -> Create "Park-Certificate" Schema
{ parkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  parkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'last_name', 'first_name', 'level' ],
     seqNo: null } }
@Steward -> Send "Park-Certificate" Schema to Ledger
{ requestResult: 
   { reqId: 1541732703126462000,
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Park-Certificate and version 0.1\',)',
     op: 'REJECT' } }

=============================================
=== Company Credential Definition Setup ===

@Company -> Get "Job-Certificate" Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { seqNo: 60,
        reqId: 1541732704135705000,
        data: [Object],
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        type: '107',
        identifier: 'HY1SC2aVUg9m3ArQZMhW5W',
        txnTime: 1541591103,
        state_proof: [Object] } } }
{ theJobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  theJobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'status', 'experience', 'salary', 'first_name', 'last_name' ],
     seqNo: 60 } }
@Company -> Create and store "Company Job-Certificate" Credential Definition
{ companyJobCertificateCredDefId: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
  companyJobCertificateCredDefJson: 
   { ver: '1.0',
     id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Company -> Send "Company Job-Certificate" Credential Definition to Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'EfrmEXk442NRNdzTXsV4MW2cSoTpCANN4YCeNb8hnQB7',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }

=============================================
=== Park Credential Definition Setup ===

@Park -> Get "Park-Certificate" Schema from Ledger
{ requestResult: 
   { result: 
      { seqNo: 85,
        type: '107',
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        reqId: 1541732725400382000,
        identifier: '4BLrdHASAynTY6xDyfX9DT',
        txnTime: 1541592700,
        state_proof: [Object],
        data: [Object] },
     op: 'REPLY' } }
{ theParkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  theParkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'level', 'status', 'first_name', 'last_name' ],
     seqNo: 85 } }
@Park -> Create and store "Park Park-Certificate" Credential Definition
{ parkParkCertificateCredDefId: '4BLrdHASAynTY6xDyfX9DT:3:CL:85:TAG1',
  parkParkCertificateCredDefJson: 
   { ver: '1.0',
     id: '4BLrdHASAynTY6xDyfX9DT:3:CL:85:TAG1',
     schemaId: '85',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Park -> Send "Park Park-Certificate" Credential Definition to Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'A4zAN4CK187Y2fbyYmfo9aeqYKZyK8Y9XBvuxRP7DRxV',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }

=============================================
=== Company-Daniel Onboarding ===


*** onboarding ***

@Company -> Create DID "Company Daniel"
{ fromToDid: '9qoQTrreR9X7CWHx91VHRv',
  fromToVerKey: '5pVd3PUjpoGxrLg6h6aQuir7gmAnRXdsS5DUPndthxhT' }
@Company -> Send Nym to Ledger for "Company Daniel" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: 'JCf9RTcRueBeVu4pxRgZstEpQ1a7t52CD7NZm9HXw28A',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
@Company -> Send connection request to Daniel with "Company Daniel" DID and nonce
{ connectionRequest: { did: '9qoQTrreR9X7CWHx91VHRv', nonce: 123456 } }
@Company -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Company"
{ toFromDid: 'MepdeWTbrzhwkqHhv8HTxt',
  toFromVerKey: 'CFrVTnbigawCQKsax2gDNF7ZuLc9QjurV7ExLhdQjWAE' }
@Daniel -> Get VerKey for Did from "Company"'s connection request
{ fromToVerKey2: '5pVd3PUjpoGxrLg6h6aQuir7gmAnRXdsS5DUPndthxhT' }
@Daniel -> Anoncrypt connection response for "Company" with "Daniel Company" DID, verkey and nonce
{ connectionResponse: '{"did":"MepdeWTbrzhwkqHhv8HTxt","verkey":"CFrVTnbigawCQKsax2gDNF7ZuLc9QjurV7ExLhdQjWAE","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 7c a9 c1 c0 1f de 53 71 f3 53 bc 2b de e8 0d bb 02 ae ea 5a 97 f0 41 d7 55 a7 6d 99 86 1a 42 21 35 1d 57 eb ee 5e 35 29 6c c4 55 89 af 8e f6 36 b6 28 ... > }
@Daniel -> Sending anoncrypted connection response to "Company" ......
@Company -> ...... response received
@Company -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'MepdeWTbrzhwkqHhv8HTxt',
     verkey: 'CFrVTnbigawCQKsax2gDNF7ZuLc9QjurV7ExLhdQjWAE',
     nonce: 123456 } }
@Company -> Authenticates "Daniel" by comparision of none
@Company -> Send Nym to Ledger for "Daniel Company" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'A7EKHCiEAvGPr9Z4xhH8dhUxhqi97159fs8EjUBaYxb8',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ companyDanielDid: '9qoQTrreR9X7CWHx91VHRv',
  companyDanielVerKey: '5pVd3PUjpoGxrLg6h6aQuir7gmAnRXdsS5DUPndthxhT',
  danielCompanyDid: 'MepdeWTbrzhwkqHhv8HTxt',
  danielCompanyVerkey: 'CFrVTnbigawCQKsax2gDNF7ZuLc9QjurV7ExLhdQjWAE',
  companyDanielConnectionResponse: 
   { did: 'MepdeWTbrzhwkqHhv8HTxt',
     verkey: 'CFrVTnbigawCQKsax2gDNF7ZuLc9QjurV7ExLhdQjWAE',
     nonce: 123456 } }

=============================================
=== Company Sending Job-Certificate Credential Offer ===

@Company -> Create "Job-Certificate" Credential Offer for Daniel
{ jobCertificateCredOfferJson: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '10726913276854942706694075267109221211610650592545525854549748526520449207066',
        xz_cap: '49247862632732661213068013726378570692147129224111095277523035489645683374252847093530260605641865223085943980453662355367336334648057022036296934071765031372205563266198763071339062916009905596730337002596495136353208778210577426132687276310870010522110031591012830928755766604706992497210656187007773751660667220049848813137098491561994154409900943973713119201396997947533156269262214065703250864097269584171074551005115544640332749693345454039231788061961303723742114477328314477768704481478845320013455592704578932178151966186971456870788294279450713887738598401401368553559952676904915345066968470711213614464722045700042325757743785019150373703855572627618491268365508766117494050602863',
        xr_cap: [Array] },
     nonce: '333678284727306474179669' } }
@Company -> Authcrypt "Job-Certificate" Credential Offer for Daniel
{ authcryptedJobCertificateCredOffer: <Buffer d1 53 78 bd fa 97 34 50 ff 31 72 84 2c be 21 51 cb f3 ab 73 97 d3 97 2a 0c 0d 6e 16 78 0e be 38 8b e0 5b b5 ee 8a 1d 85 b0 88 29 6e 14 db 83 92 08 c9 ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential Offer to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential Offer received
@Daniel -> Authdecrypt "Job-Certificate" Credential Offer from Company
{ companyDanielVerKey2: '5pVd3PUjpoGxrLg6h6aQuir7gmAnRXdsS5DUPndthxhT',
  authdecryptedJobCertificateCredOfferJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1","key_correctness_proof":{"c":"10726913276854942706694075267109221211610650592545525854549748526520449207066","xz_cap":"49247862632732661213068013726378570692147129224111095277523035489645683374252847093530260605641865223085943980453662355367336334648057022036296934071765031372205563266198763071339062916009905596730337002596495136353208778210577426132687276310870010522110031591012830928755766604706992497210656187007773751660667220049848813137098491561994154409900943973713119201396997947533156269262214065703250864097269584171074551005115544640332749693345454039231788061961303723742114477328314477768704481478845320013455592704578932178151966186971456870788294279450713887738598401401368553559952676904915345066968470711213614464722045700042325757743785019150373703855572627618491268365508766117494050602863","xr_cap":[["master_secret","206996834367174733504028480409810619141544426449552116627050988304875282776828107915710691543497444124201904443241796674448452422003053991796951463545842292848749187536593887936348096323554045165574310106133641193101775308256138010594336123222689915010971984355503608103546512362414508334393433633806616586271663248259254999413433099494171523437164633775028958597606571472449713750885918007628911484844956021475017614989731160810717858810135003651166256755696028489043930421946750364842697239123652464723904165546030571631729787703569493807403790740840923386980085597743808828610250828243831600264794399174134492771890707074581378735879912518232830222238158481689450568495414190534035680217993"],["experience","111340238063242185211655507750805535028369359287054247226520351569770256868558733929905658519436479727080997685955553065724571562913467499263980473654871959852493029433999949463073901721727364078972110250482413646448134461729963641440463854027957113105317479810211084578569454083149647422164095092455413596414145386381421670760959200877369175020617896372479107392272662181223584401146556716162718875423593197764110588397264434402722585556355410427187941175357454499840473065488201849125189995707228824729444150200598829422608432764444592777074286187531051279300850535817248971017368836121261279569817555968834627776629078016163427740260835769237193256530199924034798337658410205451360262487939"],["last_name","193821392359833262813693135340322967930871275291411945632157049123778437317574536787947765670483571655338154960367074462061812191313708070645899641068446679128233581547863929127643220536675576652527734896360706760680221612568004276476832597149487214090610629092718636499447604392129279935160549501439243495725033960425306079217224448952246778389296920771087105322589877822705844314717516100453601640380847878997678492653921922750062398009163758387848365639855060321348452116101054272667448289969167241018935074765713813426106420588574811387469826471778657493435041176383626232157477496079578318385448010752345093031952768630518625848231152128946544580812243718045923263519158136086467731301075"],["salary","129954589323669621436670684817371197022170787417055799771168852604561101549936712632375896984877227029680772827730334475535131797915156043835211359996586625258258345551710187709233859415252204403230422280547432082902377528627166232845196975025830313067817922600066922846790301107569431473665440042575804286956856637484425013015321809902895192757401804258507655934868775231125910553864058353780540203686105792261385806036933233185333253344035428219902149762472739832934817886168164991552306632988091802836832758448936459303096195922934248160759192489373836200816372861633921381064864916189252552210172626691367006857884635144717824058413220858115282617865631237538375254568057486336084221573181"],["first_name","167588304979286999911498747723656278173955642826685764775710609981384444752672342589932841102345202345898342846754337239147168736903484647080342975581462014593387748016411979316066461020320507468356726716126412020307757928739438314966361966700540321422554476872941027673575914149509114390869746200773004134339080163344401348835649257580438138870942164258558454135731344172129488479399630234334382304582331810573843484755275863966703729335322298272539780107078903586040848947252280994328874705549305211114760984303482401601767612674635788399664445861648395861125174679512358485045229187519317925460963281286638828445832050884658479001909721879528242635272402175399628445605183194021877649416334"],["status","20070369709892185782491946237605374266116955011904616932205773241791721591887746815469140843064885427207165405926927707046950230869910248653980321155248889475260445685658602688796819574804098441601274365025065995933970135529529182816152083253417204838450377412885217562844540551929237736366577494732921820037206382221215547190837351863230863053710286779207036455541388174969506239163704713841224782101252334558139979208597361861159164022094067130787890949243333012834123525228727187053072990531427712128774659387773517124393624149896510255767196795342708146870968955501121659677181631986550443614017471668001422511555340160496548292840952322717819347868942241307031344403891236873524424614357"]]},"nonce":"333678284727306474179669"}',
  authdecryptedJobCertificateCredOffer: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '10726913276854942706694075267109221211610650592545525854549748526520449207066',
        xz_cap: '49247862632732661213068013726378570692147129224111095277523035489645683374252847093530260605641865223085943980453662355367336334648057022036296934071765031372205563266198763071339062916009905596730337002596495136353208778210577426132687276310870010522110031591012830928755766604706992497210656187007773751660667220049848813137098491561994154409900943973713119201396997947533156269262214065703250864097269584171074551005115544640332749693345454039231788061961303723742114477328314477768704481478845320013455592704578932178151966186971456870788294279450713887738598401401368553559952676904915345066968470711213614464722045700042325757743785019150373703855572627618491268365508766117494050602863',
        xr_cap: [Array] },
     nonce: '333678284727306474179669' } }

=============================================
=== Daniel Getting Job-Certificate Credential ===

@Daniel -> Get "Company Job-Certificate" Credential Definition from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { data: [Object],
        identifier: 'MepdeWTbrzhwkqHhv8HTxt',
        ref: 60,
        reqId: 1541732736990325000,
        txnTime: 1541732725,
        type: '108',
        tag: 'TAG1',
        seqNo: 244,
        signature_type: 'CL',
        origin: 'HY1SC2aVUg9m3ArQZMhW5W',
        state_proof: [Object] } } }
{ theCompanyJobCertificateCredDefId: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
  theCompanyJobCertificateCredDef: 
   { ver: '1.0',
     id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Daniel -> Create "Job-Certificate" Credential Request for Company
{ jobCertificateCredRequestJson: 
   { prover_did: 'MepdeWTbrzhwkqHhv8HTxt',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     blinded_ms: 
      { u: '38988311523764331457139536333810062290141096543199018083311177045720359138781255171708144519362773622323152786992085902025359646286647836661079219971935811280011036461476733267861878888512450968729040598695493825587443628478035745694904960521527392392738292521266518204511781664090896007049571063445063660303014062664651493667694002780037079122751274212742487954009052126018986364546766743671762402008766461036941584716995345529581027996533233486985706505608400487537450098030441646218506752549906002052346370877258613901923166705829270547179775342416255565511566525791867105330085098805153522781836058953563117381921',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '54407104911174980108177039429647414535323278412307121472316421393786683405162',
        v_dash_cap: '929121786195657863369737026328929298536838160280279621450377666185415755005404888550100593948281929641607528453630686127990810765815167914711113369104448113103003862281268240721153061635202919363869415778558596886446749844705157396806221946402439386238670609818763148486776920753086893446921078711863325298592074233017388397264686329751860927666422543195729416390640546885853317197365374351458399992190938717872024861337718887354382174916321118438522349785422932950298760777279579675853540939329114104058077182959412816922415300821954910536139210656138593275991398977363678109268968448063184149350416594912623712753726145655659956078784899206237065632629273404286679108309755887105113911611079535095684731862817782922',
        m_caps: [Object],
        r_caps: {} },
     nonce: '917393604591797950729290' },
  jobCertificateCredRequestMetadataJson: 
   { master_secret_blinding_data: 
      { v_prime: '17077214229879383529700677675242316391064982748547539992461872049657531225795330092388190202869678382099669895555288715434793292924644349009989718386977732734846488156745642845156872728834423645634876360701731079540587377650899270321559592447426506093086193325727191788721862684264128676255396507143001806141457805614620306793216180667946824218606280900639464926769967660185388774914947287169400604797233039053759695695352552963561324911846002297595954905537713092161346069075377431029962211223564104585977171881193499251048630297766395894999051170768711361471406814558878977712568884850633927906298682872489617252353897222230980966140618209',
        vr_prime: null },
     nonce: '917393604591797950729290',
     master_secret_name: '616625ec-be3e-4410-8208-ae79ffd6a975' } }
@Daniel -> Authcrypt "Job-Certificate" Credential Request for Company
{ authcryptedJobCertificateCredRequest: <Buffer b3 49 1e 1f cb 3a ff d5 77 96 72 e1 b3 67 dd a9 09 04 e3 99 44 ea 80 c3 7e ad 25 ab 05 82 35 13 98 cb 08 18 94 29 75 27 8d 57 79 ea 2d 46 96 fc ba a0 ... > }
@Daniel -> Sending authcrypted "Job-Certificate" Credential Request to Company ......
@Company -> ...... authcrypted "Job-Certificate" Credential Request received
@Company -> Authdecrypt "Job-Certificate" Credential Request from Daniel
{ danielCompanyVerkey2: 'CFrVTnbigawCQKsax2gDNF7ZuLc9QjurV7ExLhdQjWAE',
  authdecryptedJobCertificateCredRequestJson: '{"prover_did":"MepdeWTbrzhwkqHhv8HTxt","cred_def_id":"HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1","blinded_ms":{"u":"38988311523764331457139536333810062290141096543199018083311177045720359138781255171708144519362773622323152786992085902025359646286647836661079219971935811280011036461476733267861878888512450968729040598695493825587443628478035745694904960521527392392738292521266518204511781664090896007049571063445063660303014062664651493667694002780037079122751274212742487954009052126018986364546766743671762402008766461036941584716995345529581027996533233486985706505608400487537450098030441646218506752549906002052346370877258613901923166705829270547179775342416255565511566525791867105330085098805153522781836058953563117381921","ur":null,"hidden_attributes":["master_secret"],"committed_attributes":{}},"blinded_ms_correctness_proof":{"c":"54407104911174980108177039429647414535323278412307121472316421393786683405162","v_dash_cap":"929121786195657863369737026328929298536838160280279621450377666185415755005404888550100593948281929641607528453630686127990810765815167914711113369104448113103003862281268240721153061635202919363869415778558596886446749844705157396806221946402439386238670609818763148486776920753086893446921078711863325298592074233017388397264686329751860927666422543195729416390640546885853317197365374351458399992190938717872024861337718887354382174916321118438522349785422932950298760777279579675853540939329114104058077182959412816922415300821954910536139210656138593275991398977363678109268968448063184149350416594912623712753726145655659956078784899206237065632629273404286679108309755887105113911611079535095684731862817782922","m_caps":{"master_secret":"27235514238130519812787679174190847403176845767308828089979283007941884045992974976283752094925149581742936926566883133171973174610456080409762564331766762385570568866002149127825"},"r_caps":{}},"nonce":"917393604591797950729290"}',
  authdecryptedJobCertificateCredRequest: 
   { prover_did: 'MepdeWTbrzhwkqHhv8HTxt',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     blinded_ms: 
      { u: '38988311523764331457139536333810062290141096543199018083311177045720359138781255171708144519362773622323152786992085902025359646286647836661079219971935811280011036461476733267861878888512450968729040598695493825587443628478035745694904960521527392392738292521266518204511781664090896007049571063445063660303014062664651493667694002780037079122751274212742487954009052126018986364546766743671762402008766461036941584716995345529581027996533233486985706505608400487537450098030441646218506752549906002052346370877258613901923166705829270547179775342416255565511566525791867105330085098805153522781836058953563117381921',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '54407104911174980108177039429647414535323278412307121472316421393786683405162',
        v_dash_cap: '929121786195657863369737026328929298536838160280279621450377666185415755005404888550100593948281929641607528453630686127990810765815167914711113369104448113103003862281268240721153061635202919363869415778558596886446749844705157396806221946402439386238670609818763148486776920753086893446921078711863325298592074233017388397264686329751860927666422543195729416390640546885853317197365374351458399992190938717872024861337718887354382174916321118438522349785422932950298760777279579675853540939329114104058077182959412816922415300821954910536139210656138593275991398977363678109268968448063184149350416594912623712753726145655659956078784899206237065632629273404286679108309755887105113911611079535095684731862817782922',
        m_caps: [Object],
        r_caps: {} },
     nonce: '917393604591797950729290' } }
@Company -> Create "Job-Certificate" Credential for Daniel
{ jobCertificateCredValues: 
   { first_name: 
      { raw: 'Alice',
        encoded: '245712572474217942457235975012103335' },
     last_name: 
      { raw: 'Garcia',
        encoded: '312643218496194691632153761283356127' },
     salary: { raw: '2400', encoded: '2400' },
     status: { raw: 'Permanent', encoded: '2143135425425143112321314321' },
     experience: { raw: '10', encoded: '10' } } }
{ jobCertificateCredJson: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { last_name: [Object],
        status: [Object],
        experience: [Object],
        salary: [Object],
        first_name: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '9531942361085624455770128579322617394511934416262061208277832644278177077154850961778393464221965948907930414429325385783241521897632342759251865298990563593166753285602092699075830344196013007128542910177623194813339616246098070382328282362697043474007252202679525029350516979084903008994339762327971483729024296396144564604391183814743854542999281655004283269239159022565621625537498793125098890368006386098200574992247212873756017371391404055222416928214769992427524810406744261093196445442372424960682562322612999165457825852560195813436041553266496241958645673633966085279428547580088836033948775101947982447212',
        c: '47008921202798273320015968746107986337039794866360614605060655333633805454283' },
     rev_reg: null,
     witness: null },
  jobCertificateCredRevocId: null,
  jobCertificateCredRevocRegDeltaJson: null }
@Company -> Authcrypt "Job-Certificate" Credential for Daniel
{ authcryptedJobCertificateCredJson: <Buffer 64 fe a7 7f 4c c7 68 73 8b 2a 0e 8b a7 5d 17 cc f4 bf 22 0b 11 7b c9 1e 6f 4d b0 94 5c 61 69 51 03 ef df d0 c3 f8 a4 bf cb 49 1c 4c 5b 4b 6e a0 c0 20 ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential received
@Daniel -> Authdecrypt "Job-Certificate" Credential from Company
{ companyDanielVerKey3: '5pVd3PUjpoGxrLg6h6aQuir7gmAnRXdsS5DUPndthxhT',
  authdecryptedJobCertificateCredJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1","rev_reg_id":null,"values":{"last_name":{"raw":"Garcia","encoded":"312643218496194691632153761283356127"},"status":{"raw":"Permanent","encoded":"2143135425425143112321314321"},"experience":{"raw":"10","encoded":"10"},"salary":{"raw":"2400","encoded":"2400"},"first_name":{"raw":"Alice","encoded":"245712572474217942457235975012103335"}},"signature":{"p_credential":{"m_2":"106038590993763755189842970051932168540058237078563808683892480737424548595967","a":"10426188251585292793945799751649826855681899427883782570156920056015272362964051965470184301007283594698991727532347892204452979283813557018545113632712913234556488842595952040636748931564622111618999469002856003058624810137836310831138176289086207227357599884912030714672332365259489946297858234383902418835153598988916233323619679502581585661940235760686367688334392581025442188539959453112878317274160918687937766782376106240398531638977207579926238672078202896277970691212480138394945704756009704691372895119533118448634713940570780933985168426469015822845561155827306147269562016844779321561202168290229725127991","e":"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742930236554247819803894325593452263925419","v":"7729300173642126797884948860393066033679236178240291199969298179641261854745304551837267421799425417216344671963154373110208963389161328483278652731278580724954268226453454261194428837440104497746777043636430855195308995595827745456141518281965210509873782486752062133974279618951188300583927143139355136329647406666340992753262485545648258428392774336316850074974847744948136589519966675086019741626104456656929721314288839189168697044524147373328534963087302834982792712623520110691792518584439677349432035720415690619620561123105209786179189668632775788890737164195368437561889607074549700764024588279046698264806481891616696288703358659900645687227444290067572590673728832242694603060440279483983197712914465210288811587450091538692947614411104418320595544035581254803318513072578726054542070503160202899772812395110"},"r_credential":null},"signature_correctness_proof":{"se":"9531942361085624455770128579322617394511934416262061208277832644278177077154850961778393464221965948907930414429325385783241521897632342759251865298990563593166753285602092699075830344196013007128542910177623194813339616246098070382328282362697043474007252202679525029350516979084903008994339762327971483729024296396144564604391183814743854542999281655004283269239159022565621625537498793125098890368006386098200574992247212873756017371391404055222416928214769992427524810406744261093196445442372424960682562322612999165457825852560195813436041553266496241958645673633966085279428547580088836033948775101947982447212","c":"47008921202798273320015968746107986337039794866360614605060655333633805454283"},"rev_reg":null,"witness":null}',
  authdecryptedJobCertificateCred: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { last_name: [Object],
        status: [Object],
        experience: [Object],
        salary: [Object],
        first_name: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '9531942361085624455770128579322617394511934416262061208277832644278177077154850961778393464221965948907930414429325385783241521897632342759251865298990563593166753285602092699075830344196013007128542910177623194813339616246098070382328282362697043474007252202679525029350516979084903008994339762327971483729024296396144564604391183814743854542999281655004283269239159022565621625537498793125098890368006386098200574992247212873756017371391404055222416928214769992427524810406744261093196445442372424960682562322612999165457825852560195813436041553266496241958645673633966085279428547580088836033948775101947982447212',
        c: '47008921202798273320015968746107986337039794866360614605060655333633805454283' },
     rev_reg: null,
     witness: null } }
@Daniel -> Store "Job-Certificate" Credential from Company
{ jobCertificateCredId: 'e27024bf-e92d-4b92-9beb-662737de6799' }

=============================================
=== Park-Daniel Onboarding ===


*** onboarding ***

@Park -> Create DID "Park Daniel"
{ fromToDid: 'F8poqorWHtEVGyjaZm1Mga',
  fromToVerKey: '8hqGA9RsQ9HU6nsdCCGqzUooLuA99PBE8CTfPtwuEo1g' }
@Park -> Send Nym to Ledger for "Park Daniel" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '92v6AeVV97F14THFtw53wzJWx6BXhPgQqbXubASieK1k',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
@Park -> Send connection request to Daniel with "Park Daniel" DID and nonce
{ connectionRequest: { did: 'F8poqorWHtEVGyjaZm1Mga', nonce: 123456 } }
@Park -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Park"
{ toFromDid: 'J7wTFcQMvJdcPsryX74M2k',
  toFromVerKey: 'ALBkjwUr28ULNaTfrDRLeFCh3TuZKUEijJvuSn8ZA9Mp' }
@Daniel -> Get VerKey for Did from "Park"'s connection request
{ fromToVerKey2: '8hqGA9RsQ9HU6nsdCCGqzUooLuA99PBE8CTfPtwuEo1g' }
@Daniel -> Anoncrypt connection response for "Park" with "Daniel Park" DID, verkey and nonce
{ connectionResponse: '{"did":"J7wTFcQMvJdcPsryX74M2k","verkey":"ALBkjwUr28ULNaTfrDRLeFCh3TuZKUEijJvuSn8ZA9Mp","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer c1 5d fc 44 f1 d2 8f 63 ec 42 4d 26 77 be 0b 21 f9 5a 3c 49 49 ee 24 6c e2 ec d1 db 1d e7 fb 4f c8 5a 99 0a ac 66 a8 94 ce 47 5b 71 d7 ce 5a e3 3b 6a ... > }
@Daniel -> Sending anoncrypted connection response to "Park" ......
@Park -> ...... response received
@Park -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'J7wTFcQMvJdcPsryX74M2k',
     verkey: 'ALBkjwUr28ULNaTfrDRLeFCh3TuZKUEijJvuSn8ZA9Mp',
     nonce: 123456 } }
@Park -> Authenticates "Daniel" by comparision of none
@Park -> Send Nym to Ledger for "Daniel Park" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'G15JDnqnkLMFeJzg9EQzAnhU6MDD9ydY8jXiH47d6H3V',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ parkDanielDid: 'F8poqorWHtEVGyjaZm1Mga',
  parkDanielVerKey: '8hqGA9RsQ9HU6nsdCCGqzUooLuA99PBE8CTfPtwuEo1g',
  danielParkDid: 'J7wTFcQMvJdcPsryX74M2k',
  danielParkVerKey: 'ALBkjwUr28ULNaTfrDRLeFCh3TuZKUEijJvuSn8ZA9Mp',
  parkDanielConnectionResponse: 
   { did: 'J7wTFcQMvJdcPsryX74M2k',
     verkey: 'ALBkjwUr28ULNaTfrDRLeFCh3TuZKUEijJvuSn8ZA9Mp',
     nonce: 123456 } }

=============================================
=== Job-Certificate Proving ===

@Park -> Create "Park-Application" Proof Request
{ parkApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Park -> Authcrypt "Park-Application" Proof Request for Daniel
{ authcryptedJobApplicationProofRequestJson: <Buffer 5b 7f ff 79 d2 4c e7 bc 37 d5 30 31 c7 19 64 5e 20 78 9d 1a 12 ef 45 a7 56 e2 ac 78 3e a7 cf 3d 11 30 5c e7 a2 df 44 f8 98 d2 c0 6e 36 99 58 1e 45 4b ... > }
@Park -> Sending authcrypted "Job-Application" Proof Request to Daniel ......
@Daniel -> ...... authcrypted "Job-Application" Proof Request received
@Daniel -> Authdecrypt "Job-Application" Proof Request from Park
{ parkDanielVerKey2: '8hqGA9RsQ9HU6nsdCCGqzUooLuA99PBE8CTfPtwuEo1g',
  authdecryptedJobApplicationProofRequestJson: '{"nonce":"1432422343242122312411212","name":"Park-Application","version":"0.1","requested_attributes":{"attr1_referent":{"name":"first_name","restrictions":[{"cred_def_id":"HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1"}]},"attr2_referent":{"name":"last_name","restrictions":[{"cred_def_id":"HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1"}]},"attr3_referent":{"name":"mobile"}},"requested_predicates":{}}',
  authdecryptedJobApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Daniel -> Get Credentials for "Job-Application" Proof Request
{ jobApplicationProofReqSearchHandle: 48 }
{ credentials: [ { cred_info: [Object], interval: null } ] }
{ credForAttr1: 
   { referent: 'e27024bf-e92d-4b92-9beb-662737de6799',
     attrs: 
      { status: 'Permanent',
        last_name: 'Garcia',
        salary: '2400',
        experience: '10',
        first_name: 'Alice' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr2: 
   { referent: 'e27024bf-e92d-4b92-9beb-662737de6799',
     attrs: 
      { status: 'Permanent',
        last_name: 'Garcia',
        salary: '2400',
        experience: '10',
        first_name: 'Alice' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr3: 
   { referent: 'e27024bf-e92d-4b92-9beb-662737de6799',
     attrs: 
      { status: 'Permanent',
        last_name: 'Garcia',
        salary: '2400',
        experience: '10',
        first_name: 'Alice' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
{ credsForJobApplicationProof: 
   { 'e27024bf-e92d-4b92-9beb-662737de6799': 
      { referent: 'e27024bf-e92d-4b92-9beb-662737de6799',
        attrs: [Object],
        schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
        rev_reg_id: null,
        cred_rev_id: null } } }
@Daniel -> Prover Get Entities (Schemas and Credential Definitions) from Ledger

*** proverGetEntitiesFromLedger ***

{ credential: 
   { referent: 'e27024bf-e92d-4b92-9beb-662737de6799',
     attrs: 
      { status: 'Permanent',
        last_name: 'Garcia',
        salary: '2400',
        experience: '10',
        first_name: 'Alice' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
@Daniel -> Get Schema from Ledger
{ requestResult: 
   { result: 
      { seqNo: 60,
        type: '107',
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        reqId: 1541732739011258000,
        identifier: 'J7wTFcQMvJdcPsryX74M2k',
        txnTime: 1541591103,
        state_proof: [Object],
        data: [Object] },
     op: 'REPLY' } }
@Daniel -> Get Credential Definition from Ledger
{ requestResult: 
   { result: 
      { tag: 'TAG1',
        seqNo: 244,
        type: '108',
        origin: 'HY1SC2aVUg9m3ArQZMhW5W',
        reqId: 1541732739459804000,
        signature_type: 'CL',
        identifier: 'J7wTFcQMvJdcPsryX74M2k',
        txnTime: 1541732725,
        state_proof: [Object],
        ref: 60,
        data: [Object] },
     op: 'REPLY' } }
{ proverSchemas: 
   { 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1': 
      { ver: '1.0',
        id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        name: 'Job-Certificate',
        version: '0.1',
        attrNames: [Array],
        seqNo: 60 } },
  proverCredDefs: 
   { 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1': 
      { ver: '1.0',
        id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
        schemaId: '60',
        type: 'CL',
        tag: 'TAG1',
        value: [Object] } },
  proverRevStates: {} }
@Daniel -> Create "Park-Application" Proof
{ parkApplicationRequestedCreds: 
   { self_attested_attributes: { attr3_referent: '18618386178' },
     requested_attributes: { attr1_referent: [Object], attr2_referent: [Object] },
     requested_predicates: {} } }
{ parkApplicationProofJson: 
   { proof: { proofs: [Array], aggregated_proof: [Object] },
     requested_proof: 
      { revealed_attrs: [Object],
        self_attested_attrs: [Object],
        unrevealed_attrs: {},
        predicates: {} },
     identifiers: [ [Object] ] } }
@Daniel -> Authcrypt "Park-Application" Proof for Park
{ authcryptedParkApplicationProofJson: <Buffer 12 f7 df 33 33 3f 5a 2b af f1 9e 56 bc 8b 74 e8 45 8e 91 65 60 f4 a7 99 72 da 83 7b d8 de 36 61 a4 4d 0c 62 31 c1 db 76 bf 45 3e c0 b0 8f b9 56 9a 3b ... > }
@Daniel -> Sending authcrypted "Park-Application" Proof for Park ......
@Park -> ...... authcrypted "Park-Application" Proof received
@Park -> Authdecrypt "Park-Application" Proof from Daniel
{ danielParkVerKey2: 'ALBkjwUr28ULNaTfrDRLeFCh3TuZKUEijJvuSn8ZA9Mp',
  authdecryptedParkApplicationProofJson: '{"proof":{"proofs":[{"primary_proof":{"eq_proof":{"revealed_attrs":{"first_name":"245712572474217942457235975012103335","last_name":"312643218496194691632153761283356127"},"a_prime":"2907209386649103595483386782340816234999308627078655891206260984845398328615953517429531046670751948899685081137193712593830204608344489370416159419605601466171362825687851069803666116463891440782136508867199134466035179461377639633228229420007509319651909812791227015167890809905524105562353765285305669991984095146738534326596786822405362647366102900884279205769257835801967436752955709314892424219559345602543946338115052146946754955692679484268128198060154294719721685520270636500482341110961336858695923069476026573287460816475219831129830976158767419220821322930976663610630635921505904333408975563325948711106","e":"128231481784123788340327542978986462881187274499132881542133594729483090119455792976029512659082108892550694948273160800525456380654465123","v":"910784216437714794422007389855766356891754138990474549754298764926422192188693483129544655477310483347584771242200771247565137927795460524140765647375489811309321523665738631039068795181606795003750515454259943320346309298683183816783200003092833852229098703881766363327336856662812104158336387596077586777904293063474390052110914995725926541904714746231399370194967900477907250576824214654079136937028166165295929045081336283343476907126012204515791088943442867781874213533204788665255420705664682218988333916413012950758972729206079804584114872634821411999475142589642669804286374557949646262496058141130165961868694440556888521819157388337275417793359903872874595915598934810102868276512293116100820219657329872539602073898327231526354108381195637768824408779217862172731354029363731910855025249599147606754535323079466374904672172131224098854447515035508025698205943617438626072301997605550215767451587658460953724127","m":{"experience":"4136569104176400813833187957256992602723201270258113987703684199814133117916575122567774939684722040079241968429753803942813003112995354373061832495197827750152040943605337756656","status":"11405846712724647379651603653118078563933764658081546539018105547215551700448281018657336437980423627771847898794779044323205214178885709612488654968981379032690747622716535391932","salary":"16201080270913164598893010107519664992326671870511303156820240663612101628825645537075448667289253242709196438856967689822969040660452686899987992783166113265886116467263286247350","master_secret":"15991663400571990930897469989923577047710947876738861596615335503580445445987405438641819298118496945242257807771039877230617068717491776155745753373958812893369598390901972817812"},"m2":"2548982588294356352771919446772724498270223172646840591311505225109437532579091146986653294024570491849892558345800903991991942108010605336578396807555572097710459420355416483654"},"ge_proofs":[]},"non_revoc_proof":null}],"aggregated_proof":{"c_hash":"15784002761013267187846620558614931727607677761023031035870316754131226229902","c_list":[[23,7,143,144,252,131,50,58,70,136,185,29,79,93,111,142,4,108,3,60,229,3,211,191,132,61,147,11,186,1,209,239,38,23,173,140,8,0,81,117,39,103,142,163,13,167,227,7,88,78,253,40,210,13,151,65,49,239,241,5,65,97,56,129,33,181,20,58,76,103,64,232,169,149,1,105,143,124,94,208,116,158,180,135,81,125,161,138,8,175,74,172,165,84,159,11,39,97,63,109,55,112,135,174,32,42,235,9,125,198,201,111,53,29,223,58,250,248,37,148,202,149,213,238,75,55,144,103,138,193,6,49,46,225,207,70,119,187,157,134,251,177,94,237,166,104,48,48,131,166,133,50,53,185,35,27,130,53,169,197,123,89,10,45,172,13,239,11,103,36,55,221,175,21,176,62,243,15,239,31,148,30,179,45,173,12,90,97,110,36,177,170,178,135,147,52,24,154,6,187,28,180,77,82,221,151,246,160,223,80,67,107,81,176,249,0,69,161,28,9,249,71,85,63,22,192,79,56,177,50,62,13,17,121,114,23,104,71,191,158,183,142,105,99,225,169,168,98,89,240,137,150,232,146,80,194]]}},"requested_proof":{"revealed_attrs":{"attr2_referent":{"sub_proof_index":0,"raw":"Garcia","encoded":"312643218496194691632153761283356127"},"attr1_referent":{"sub_proof_index":0,"raw":"Alice","encoded":"245712572474217942457235975012103335"}},"self_attested_attrs":{"attr3_referent":"18618386178"},"unrevealed_attrs":{},"predicates":{}},"identifiers":[{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1","rev_reg_id":null,"timestamp":null}]}',
  authdecryptedParkApplicationProof: 
   { proof: { proofs: [Array], aggregated_proof: [Object] },
     requested_proof: 
      { revealed_attrs: [Object],
        self_attested_attrs: [Object],
        unrevealed_attrs: {},
        predicates: {} },
     identifiers: [ [Object] ] },
  'authdecryptedParkApplicationProof.requested_proof': 
   { revealed_attrs: { attr2_referent: [Object], attr1_referent: [Object] },
     self_attested_attrs: { attr3_referent: '18618386178' },
     unrevealed_attrs: {},
     predicates: {} } }
@Park -> Verifier Get Entities (Schemas and Credential Definitions) from Ledger

*** verifierGetEntitiesFromLedger ***

{ credential: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
     rev_reg_id: null,
     timestamp: null } }
@Park -> Get Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541732739939061000,
        type: '107',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541591103,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        seqNo: 60,
        identifier: 'F8poqorWHtEVGyjaZm1Mga' } } }
@Park -> Get Credential Definition from Ldger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541732740425529000,
        type: '108',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541732725,
        origin: 'HY1SC2aVUg9m3ArQZMhW5W',
        signature_type: 'CL',
        seqNo: 244,
        ref: 60,
        tag: 'TAG1',
        identifier: 'F8poqorWHtEVGyjaZm1Mga' } } }
{ verifierSchemas: 
   { 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1': 
      { ver: '1.0',
        id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        name: 'Job-Certificate',
        version: '0.1',
        attrNames: [Array],
        seqNo: 60 } },
  verifierCredDefs: 
   { 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1': 
      { ver: '1.0',
        id: 'HY1SC2aVUg9m3ArQZMhW5W:3:CL:60:TAG1',
        schemaId: '60',
        type: 'CL',
        tag: 'TAG1',
        value: [Object] } },
  verifierRevRegs: {},
  verifierRevRegDefs: {} }
@Park -> Verify "Park-Application" Proof from Daniel

=============================================
=== Cleanup ===

@Steward -> Close and Delete Wallet
@Park -> Close and Delete Wallet
@Company -> Close and Delete Wallet
@Daniel -> Close and Delete Wallet
Close and Delete Pool
=============================================
=== Steward Setup ===

@Steward -> Create Wallet
@Steward -> Create DID
{ stewardDid: 'Th7MpTaRZVRYnPiabds81Y',
  stewardVerKey: 'FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4' }

=============================================
=== Daniel Setup ===

@Daniel -> Create Wallet
@Daniel -> Create Master Scecret
{ danielMasterSecretId: 'fc790cb3-c6b8-4631-bfe0-909adbb21fed' }

=============================================
=== Steward-Park Onboarding & Park GetVerinym ===

@Park -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Park"
{ fromToDid: 'Xs21PeKEwG9ajVrEbf8J9j',
  fromToVerKey: 'HpcyhFz3Py2Ggc76gcodK84gBxEEG4KXLbBvRNACB5Cw' }
@Steward -> Send Nym to Ledger for "Steward Park" DID
{ requestResult: 
   { result: 
      { rootHash: 'B7YRv268iNAvMmYxcJysEXngWXyGKs6iDTjuzhZqcm7N',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }
@Steward -> Send connection request to Park with "Steward Park" DID and nonce
{ connectionRequest: { did: 'Xs21PeKEwG9ajVrEbf8J9j', nonce: 123456 } }
@Steward -> Sending request ......
@Park -> ...... request received
@Park -> Create DID "Park Steward"
{ toFromDid: 'GWTdWEMG7sWAASrSHKuDKU',
  toFromVerKey: '9TEgDiPK4MKzmYo3QuvMKMjTeNwfcMeHvBWtJbss8QN1' }
@Park -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: 'HpcyhFz3Py2Ggc76gcodK84gBxEEG4KXLbBvRNACB5Cw' }
@Park -> Anoncrypt connection response for "Steward" with "Park Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"GWTdWEMG7sWAASrSHKuDKU","verkey":"9TEgDiPK4MKzmYo3QuvMKMjTeNwfcMeHvBWtJbss8QN1","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer b4 6e 09 6e b3 d5 d1 4b 67 d5 06 1a 1a 30 7e 7c 20 e1 64 e2 ab 7a c9 8b 92 ea bd 1a 89 cc 04 00 0c 7b 70 57 e0 66 1a d7 5d 04 22 f5 73 55 54 51 6e da ... > }
@Park -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Park"
{ decryptedConnectionResponse: 
   { did: 'GWTdWEMG7sWAASrSHKuDKU',
     verkey: '9TEgDiPK4MKzmYo3QuvMKMjTeNwfcMeHvBWtJbss8QN1',
     nonce: 123456 } }
@Steward -> Authenticates "Park" by comparision of none
@Steward -> Send Nym to Ledger for "Park Steward" DID
{ requestResult: 
   { result: 
      { rootHash: 'ArJZJkom8fsj2X3GeYvtmiFWF1D9fyfFfNKS4FpoY5YW',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }
{ stewardParkDid: 'Xs21PeKEwG9ajVrEbf8J9j',
  stewardParkVerKey: 'HpcyhFz3Py2Ggc76gcodK84gBxEEG4KXLbBvRNACB5Cw',
  parkStewardDid: 'GWTdWEMG7sWAASrSHKuDKU',
  parkStewardVerKey: '9TEgDiPK4MKzmYo3QuvMKMjTeNwfcMeHvBWtJbss8QN1' }

*** getVerinym ***

@Park -> Create DID
{ toDid: 'TKPTBvBwF4aqdbpdkeT5YV',
  toVerKey: 'FLw76pVzfEKj5kYGsW4V194mL2vYcWr2nW4RGyWvzsR1' }
@Park -> Authcrypt "Park" DID info for "Steward"
{ didInfo: '{"did":"TKPTBvBwF4aqdbpdkeT5YV","verkey":"FLw76pVzfEKj5kYGsW4V194mL2vYcWr2nW4RGyWvzsR1"}',
  authcryptedDidInfoRaw: <Buffer cb 27 7c b7 b2 3b 2c 98 1e 85 5f cd 89 92 8a 69 db 8e 73 38 55 bf 3d 97 63 22 72 36 f5 46 1d 05 3a 67 db d3 17 13 1a 59 93 5e b4 d1 1f fb 53 bf 2d 81 ... > }
@Park -> Sending authcrypted "Park" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Park" DID info from "Park"
{ senderVerKey: '9TEgDiPK4MKzmYo3QuvMKMjTeNwfcMeHvBWtJbss8QN1',
  authdecryptedDidInfoRaw: <Buffer 7b 22 64 69 64 22 3a 22 54 4b 50 54 42 76 42 77 46 34 61 71 64 62 70 64 6b 65 54 35 59 56 22 2c 22 76 65 72 6b 65 79 22 3a 22 46 4c 77 37 36 70 56 7a ... >,
  authdecryptedDidInfo: 
   { did: 'TKPTBvBwF4aqdbpdkeT5YV',
     verkey: 'FLw76pVzfEKj5kYGsW4V194mL2vYcWr2nW4RGyWvzsR1' } }
@Steward -> Authenticates "Park" by comparison of Verkeys
{ retrievedVerKey: '9TEgDiPK4MKzmYo3QuvMKMjTeNwfcMeHvBWtJbss8QN1' }
@Steward -> Send Nym to Ledger for "Park" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: 'VB2BL6HwdXsD5wZaEwkVbq43uDNBTfypiKnvUkuS5fq',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
{ parkDid: 'TKPTBvBwF4aqdbpdkeT5YV' }

=============================================
=== Steward-Company Onboarding & Company GetVerinym ===

@Company -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Company"
{ fromToDid: 'Q9DVfP4ZNgE3NuwTaQq7Z3',
  fromToVerKey: 'DcZ5NU5sYpjXUSgMeeksBg6kMnigCwf7UCUhKq4gtc5b' }
@Steward -> Send Nym to Ledger for "Steward Company" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '5qrgRPRsjnuFZFihi2faQ1qsqkWNdCNUAU4xtZQxnhk',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
@Steward -> Send connection request to Company with "Steward Company" DID and nonce
{ connectionRequest: { did: 'Q9DVfP4ZNgE3NuwTaQq7Z3', nonce: 123456 } }
@Steward -> Sending request ......
@Company -> ...... request received
@Company -> Create DID "Company Steward"
{ toFromDid: 'MDiJYt3gWbsKVaKFbCmib8',
  toFromVerKey: 'C2Ak2LEwTKiRuPL8NteFuK5aPRbbjDCwJ5ADe2YHn4Pr' }
@Company -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: 'DcZ5NU5sYpjXUSgMeeksBg6kMnigCwf7UCUhKq4gtc5b' }
@Company -> Anoncrypt connection response for "Steward" with "Company Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"MDiJYt3gWbsKVaKFbCmib8","verkey":"C2Ak2LEwTKiRuPL8NteFuK5aPRbbjDCwJ5ADe2YHn4Pr","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 14 88 c1 e1 ea 4d 0f 22 f4 ff 46 98 80 a9 01 b1 0b ab 8f 14 a6 cf b1 30 8e 73 78 36 c5 03 df 09 35 24 38 7b 53 1e f8 c9 dc 1e bd c4 77 1b 86 e7 e0 1e ... > }
@Company -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Company"
{ decryptedConnectionResponse: 
   { did: 'MDiJYt3gWbsKVaKFbCmib8',
     verkey: 'C2Ak2LEwTKiRuPL8NteFuK5aPRbbjDCwJ5ADe2YHn4Pr',
     nonce: 123456 } }
@Steward -> Authenticates "Company" by comparision of none
@Steward -> Send Nym to Ledger for "Company Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '2dZpitdsLyNj8aF2TG12qFKkezh2dWULSuPPzH25ZHv6',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ stewardCompanyDid: 'Q9DVfP4ZNgE3NuwTaQq7Z3',
  stewardCompanyVerKey: 'DcZ5NU5sYpjXUSgMeeksBg6kMnigCwf7UCUhKq4gtc5b',
  companyStewardDid: 'MDiJYt3gWbsKVaKFbCmib8',
  companyStewardVerkey: 'C2Ak2LEwTKiRuPL8NteFuK5aPRbbjDCwJ5ADe2YHn4Pr' }

*** getVerinym ***

@Company -> Create DID
{ toDid: 'H2MzbvBPudEi2AsWU9KNav',
  toVerKey: '9jXxsrLgDDPcpJdnf6CVFqm1BrUpNHiyyFsRyVqHZwqz' }
@Company -> Authcrypt "Company" DID info for "Steward"
{ didInfo: '{"did":"H2MzbvBPudEi2AsWU9KNav","verkey":"9jXxsrLgDDPcpJdnf6CVFqm1BrUpNHiyyFsRyVqHZwqz"}',
  authcryptedDidInfoRaw: <Buffer 57 9f 42 86 9e c5 e0 61 68 3f 17 8c 0b e9 72 73 0f 7e 65 de a3 be 27 06 62 44 a6 86 84 f7 4f 09 bb d4 ea 4a 65 64 42 4b 91 5e ed ea 42 44 3a e4 5d c3 ... > }
@Company -> Sending authcrypted "Company" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Company" DID info from "Company"
{ senderVerKey: 'C2Ak2LEwTKiRuPL8NteFuK5aPRbbjDCwJ5ADe2YHn4Pr',
  authdecryptedDidInfoRaw: <Buffer 7b 22 64 69 64 22 3a 22 48 32 4d 7a 62 76 42 50 75 64 45 69 32 41 73 57 55 39 4b 4e 61 76 22 2c 22 76 65 72 6b 65 79 22 3a 22 39 6a 58 78 73 72 4c 67 ... >,
  authdecryptedDidInfo: 
   { did: 'H2MzbvBPudEi2AsWU9KNav',
     verkey: '9jXxsrLgDDPcpJdnf6CVFqm1BrUpNHiyyFsRyVqHZwqz' } }
@Steward -> Authenticates "Company" by comparison of Verkeys
{ retrievedVerKey: 'C2Ak2LEwTKiRuPL8NteFuK5aPRbbjDCwJ5ADe2YHn4Pr' }
@Steward -> Send Nym to Ledger for "Company" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '6Gxm2raDduDj6u1PPsKYDPoUS2p4Utw8RFTdKMRujMj1',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ companyDid: 'H2MzbvBPudEi2AsWU9KNav' }

=============================================
=== Credential Schemas Setup ===

@Steward -> Create "Job-Certificate" Schema
{ jobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  jobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'salary', 'first_name', 'last_name', 'experience', 'status' ],
     seqNo: null } }
@Steward -> Send "Job-Certificate" Schema to Ledger
{ requestResult: 
   { op: 'REJECT',
     reqId: 1541990575971264000,
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Job-Certificate and version 0.1\',)' } }
@Steward -> Create "Park-Certificate" Schema
{ parkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  parkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'level', 'last_name', 'first_name' ],
     seqNo: null } }
@Steward -> Send "Park-Certificate" Schema to Ledger
{ requestResult: 
   { reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Park-Certificate and version 0.1\',)',
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reqId: 1541990576936940000,
     op: 'REJECT' } }

=============================================
=== Company Credential Definition Setup ===

@Company -> Get "Job-Certificate" Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541990577959495000,
        type: '107',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541591103,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        seqNo: 60,
        identifier: 'H2MzbvBPudEi2AsWU9KNav' } } }
{ theJobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  theJobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'last_name', 'salary', 'experience', 'first_name', 'status' ],
     seqNo: 60 } }
@Company -> Create and store "Company Job-Certificate" Credential Definition
{ companyJobCertificateCredDefId: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
  companyJobCertificateCredDef: 
   { ver: '1.0',
     id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Company -> Send "Company Job-Certificate" Credential Definition to Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'EpZQUJhrM3M4ce8igxc4gfcVbt1Q6fk2EsWikveCmXrF',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }

=============================================
=== Park Credential Definition Setup ===

@Park -> Get "Park-Certificate" Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { data: [Object],
        txnTime: 1541592700,
        reqId: 1541990586363320000,
        identifier: 'TKPTBvBwF4aqdbpdkeT5YV',
        type: '107',
        seqNo: 85,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        state_proof: [Object] } } }
{ theParkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  theParkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'level', 'last_name', 'status', 'first_name' ],
     seqNo: 85 } }
@Park -> Create and store "Park Park-Certificate" Credential Definition
{ parkParkCertificateCredDefId: 'TKPTBvBwF4aqdbpdkeT5YV:3:CL:85:TAG1',
  parkParkCertificateCredDef: 
   { ver: '1.0',
     id: 'TKPTBvBwF4aqdbpdkeT5YV:3:CL:85:TAG1',
     schemaId: '85',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Park -> Send "Park Park-Certificate" Credential Definition to Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'FqAmSLK4WaStvJcdPvLu9xfBnHC4cq9zqh3VE2imfLG1',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }

=============================================
=== Company-Daniel Onboarding ===


*** onboarding ***

@Company -> Create DID "Company Daniel"
{ fromToDid: 'RcaRkFywcUB5EuszNsxgFP',
  fromToVerKey: 'ER5W7A7ewwkNCcC1JyESfwMsfGQoJdB1PQnRfWiRaT1M' }
@Company -> Send Nym to Ledger for "Company Daniel" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'EPMiUjQmLzPdggvVmYog2qGeB5aUCjcXYfESd6sBc8km',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
@Company -> Send connection request to Daniel with "Company Daniel" DID and nonce
{ connectionRequest: { did: 'RcaRkFywcUB5EuszNsxgFP', nonce: 123456 } }
@Company -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Company"
{ toFromDid: 'G37i3saZj4v8XKTaFs8Ec4',
  toFromVerKey: '9CLJ7PEnd1GiZqrf2vKa6ARMh2dUM2cehmt2gJniVjSQ' }
@Daniel -> Get VerKey for Did from "Company"'s connection request
{ fromToVerKey2: 'ER5W7A7ewwkNCcC1JyESfwMsfGQoJdB1PQnRfWiRaT1M' }
@Daniel -> Anoncrypt connection response for "Company" with "Daniel Company" DID, verkey and nonce
{ connectionResponse: '{"did":"G37i3saZj4v8XKTaFs8Ec4","verkey":"9CLJ7PEnd1GiZqrf2vKa6ARMh2dUM2cehmt2gJniVjSQ","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 82 54 ad 17 eb 40 ea cc f5 49 58 e3 91 7d 82 fa 25 17 d9 3e 8a e7 16 48 88 60 f8 0b 6d 4a fb 57 a4 0b 0d 2d 6e ef ef 6b 94 84 48 03 f1 5b 8b df 12 ce ... > }
@Daniel -> Sending anoncrypted connection response to "Company" ......
@Company -> ...... response received
@Company -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'G37i3saZj4v8XKTaFs8Ec4',
     verkey: '9CLJ7PEnd1GiZqrf2vKa6ARMh2dUM2cehmt2gJniVjSQ',
     nonce: 123456 } }
@Company -> Authenticates "Daniel" by comparision of none
@Company -> Send Nym to Ledger for "Daniel Company" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '72YgZS38wv8PQzhshQ972yh3KYPZDqEJJ89F7wbmu3Mb',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ companyDanielDid: 'RcaRkFywcUB5EuszNsxgFP',
  companyDanielVerKey: 'ER5W7A7ewwkNCcC1JyESfwMsfGQoJdB1PQnRfWiRaT1M',
  danielCompanyDid: 'G37i3saZj4v8XKTaFs8Ec4',
  danielCompanyVerkey: '9CLJ7PEnd1GiZqrf2vKa6ARMh2dUM2cehmt2gJniVjSQ',
  companyDanielConnectionResponse: 
   { did: 'G37i3saZj4v8XKTaFs8Ec4',
     verkey: '9CLJ7PEnd1GiZqrf2vKa6ARMh2dUM2cehmt2gJniVjSQ',
     nonce: 123456 } }

=============================================
=== Company Sending Job-Certificate Credential Offer ===

@Company -> Create "Job-Certificate" Credential Offer for Daniel
{ jobCertificateCredOffer: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '3864284347446674747172955066825773620145982129136632836361849188604622577217',
        xz_cap: '121906864500864530549419163506120694001062205861095124077314062795022541739581382660638044026721929781801869677923800023263294386476214906674678351126183565260308854659143941611749156775821862279346510760502963132379564648011894935225200278362800713443974988676738202544919158792147203604710991663707181731251272863429202806409659805635778835159376727039734521558487194948111523987396233356239508047375565075699323235224493206857710772666709710622674385272093485677529360222421210580914226774187115322056204229680838295332704752902098702230421065239159202466555717741101594114809051100587014537141018859940543423146278920503349529634839009737989853887196297565443149660281317219662591492883462',
        xr_cap: [Array] },
     nonce: '69057029928879614765311' } }
@Company -> Authcrypt "Job-Certificate" Credential Offer for Daniel
{ authcryptedJobCertificateCredOfferRaw: <Buffer de 48 5e 01 5c aa 6d f1 0a bc a7 14 c0 9f 2e 96 fc 88 83 85 fd bf 09 54 77 77 94 25 28 2e 90 7f 85 66 52 24 1b 37 53 b8 d7 24 90 2f 97 66 13 a7 cc ea ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential Offer to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential Offer received
@Daniel -> Authdecrypt "Job-Certificate" Credential Offer from Company
{ companyDanielVerKey2: 'ER5W7A7ewwkNCcC1JyESfwMsfGQoJdB1PQnRfWiRaT1M',
  authdecryptedJobCertificateCredOfferJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1","key_correctness_proof":{"c":"3864284347446674747172955066825773620145982129136632836361849188604622577217","xz_cap":"121906864500864530549419163506120694001062205861095124077314062795022541739581382660638044026721929781801869677923800023263294386476214906674678351126183565260308854659143941611749156775821862279346510760502963132379564648011894935225200278362800713443974988676738202544919158792147203604710991663707181731251272863429202806409659805635778835159376727039734521558487194948111523987396233356239508047375565075699323235224493206857710772666709710622674385272093485677529360222421210580914226774187115322056204229680838295332704752902098702230421065239159202466555717741101594114809051100587014537141018859940543423146278920503349529634839009737989853887196297565443149660281317219662591492883462","xr_cap":[["status","20567942738318048620829765470630068629479458397702954956539607799791286733023591099705678015023621329688963066681838243852918357610195016656945604885652360611629418948447095877334732551449036947969840246680952948104928192199791721217627257486357466955167118997374817425606385095307946747853244712838474600340852911322796775324538245639072182782551635820665768682590824644821436451975803682885935955158114255616827120783937874326522869622195503778425524084332768871868052420334431940446728108918396455489559221426155262486205895084527778483833359707815272807122607105489585263067299403566848807274034127366808240871370489086838239543952305390956777234527132454695584205952344840476813885681426"],["first_name","35871695939848224764664371850362103984334433950199642243465602575464576516852292922800671303331458746669165346254156621908285913120529957581443175194469467566093804270264105314184157432998402837351824548606740148240364475913085775323438552517376296434619442533200946330379508121801442744642613525135598833382742734118403234033691694990824513548238255692515811672496323341978604088697031490539077944072613971360976170121849879197120124014176771817271395226591780672248935671156120406319991169609794449158158598219004521140527226046926538196733793083562169462468993456000372191619627197785872556567580837446851525910542679500319289829721412725188662872087327048688730032674274040378829966878747"],["last_name","8732646210060660062421105739363308379496862573738817159861789417758777393611140597211685350035835021864465760670131222610875308244542536488886191981143903951943737681623145247891506516167968602464633936910184548622282150981433283048769353558659357182787378706614447446631996962097611390521633840646095133254817306309512190558805278394155770569687683266833006181136913297619610411897416681495770074828546360205890861980687871335220146809574402542515936330147014150123732190540318160861870385187174816138999029142365134719655352301523817661759636308671670291988378828716776163800356572223539147771503171824061195064978798597887895686418384438165019599359605798900554524475235720897336543776073"],["experience","41254701035548709795661286401703159956365876594522000420548101380181153864499007406699978678381993114607174877854129790208423488627904392452043246286191091029183832199635988262108944365543215134429698451454505133789508942273832430812658324406690699782077218335989904500266613823947652155770650395027167699788509717318783012243275255738255981995396925156246000877576572705762944063502909038886926203063740784076492227135132033334940743851541483068555304655520527561147436398018742535424495843614777067871131449429185380491080581694623706448316053710434359590380108719878994189507069728506175028872077358812000876249198937559285571730946144911058097268192631634906659311387521417740937088892441"],["salary","68861893529829047590707865370773386761780510860578832296054188818322379932736232791223435563322203439688873644277051641275434601810086497416232015479253341043691125186530511502661883510140030444087716991327966943879289276728500814855332865594158016286156284258500744573244968458219397785688176269165606868751352941128954832047847695481442004916047441200565183774254460406541563158707632309055872354045162354321330442562338118962037903344363952533761816306872842643947052931671231675349541749203030065739798108619937418458026674012841917112840706294601044085290647562719444110587622222354346509472763308403398122904132265667107987499557877891037482306817594668282546327802549509546774357576082"],["master_secret","83734819402220870905356071934762419176483011245774039204960173501431172750544709984275945901297073926819937183290406763661624854361960794471653244385415445355617315921291613888607902383484252265138445792746900971452207541931917218148179835520180425420544433669118675154613788038441610583701879464907289388399699021730601770961142702020994659091262988203528597754650503913106330125230096141700665014030141027857576310899356443536683700921884829849044995744265517034346814414347563251462261010677494542720327061918295099766908962763927496385990772745353989062317107892358284614719479779835394059464738038842993606989649206110752148821208155859502844211739012732168337545620169832472803178885403"]]},"nonce":"69057029928879614765311"}',
  authdecryptedJobCertificateCredOffer: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '3864284347446674747172955066825773620145982129136632836361849188604622577217',
        xz_cap: '121906864500864530549419163506120694001062205861095124077314062795022541739581382660638044026721929781801869677923800023263294386476214906674678351126183565260308854659143941611749156775821862279346510760502963132379564648011894935225200278362800713443974988676738202544919158792147203604710991663707181731251272863429202806409659805635778835159376727039734521558487194948111523987396233356239508047375565075699323235224493206857710772666709710622674385272093485677529360222421210580914226774187115322056204229680838295332704752902098702230421065239159202466555717741101594114809051100587014537141018859940543423146278920503349529634839009737989853887196297565443149660281317219662591492883462',
        xr_cap: [Array] },
     nonce: '69057029928879614765311' } }

=============================================
=== Daniel Getting Job-Certificate Credential ===

@Daniel -> Get "Company Job-Certificate" Credential Definition from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541990600633913000,
        type: '108',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541990586,
        origin: 'H2MzbvBPudEi2AsWU9KNav',
        signature_type: 'CL',
        seqNo: 280,
        ref: 60,
        tag: 'TAG1',
        identifier: 'G37i3saZj4v8XKTaFs8Ec4' } } }
{ theCompanyJobCertificateCredDefId: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
  theCompanyJobCertificateCredDef: 
   { ver: '1.0',
     id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Daniel -> Create "Job-Certificate" Credential Request for Company
{ jobCertificateCredRequest: 
   { prover_did: 'G37i3saZj4v8XKTaFs8Ec4',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     blinded_ms: 
      { u: '37984210176585357745721312410419936132305196665659555014734020257722507494616349547223762559640376015950350443543833143487425773557434124996941849707652643256892166377055452163000555566582444259967120575781013019153586199835976773218170283092285954004874605168923857447572182378174868013484269731479718804783826913648372786080847353160368172900503675970844264201396409303138932466061471801060592992271040495881835305829067148669728730977733125966149585896397293489390612357460144831031134596393894529054636117969678814320856221044463742915473372747929114563361894810837371911886338448380792766405531623114767308543052',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '23124051766377726806721389846496847103996121975827578421239222590067581406374',
        v_dash_cap: '793718101189367228038818023290156184015042865093482416666754734749597594803424197481081645356620833422206311712488847909679496740948737533572808748379610073894616584072843661863177028777231969317491421680454536265092114746409704505893017957868500330869083621513395566211627314029301901055147404734675659907466262820216019473553806255405587566777270651847055197539936265451332423024380619740822789782262345597411455353718023252601253651901716475566119582149026492756909040280480022570428737157688034167618826354612771489188501151095209434473275483122985987334937841938528718178515111995825599434383448562354839438046306913413834868868328975741634287462196839059246009307118401617469604204428429579280235831461540632158',
        m_caps: [Object],
        r_caps: {} },
     nonce: '847993445951495627416013' },
  jobCertificateCredRequestMetadata: 
   { master_secret_blinding_data: 
      { v_prime: '34324352375972016323113015951351710812137421779765541519472551139186592795520474590538610188925342352013428324081578003134080488479525045785961128226437803998819498544055051577758733645210122539553012591999037952560378049286662368805850934178911950292160907894853941285221675521222371448761024423506126510303893412179597290934480353741143865989667967580393957496998002979014218721146201257639208735302587122215397856794134943077049606100527697895249705469081336999273818788507696712067321911841801139604180235447106547978505503381736478243144727379670222355969995855024587214896147011804082958810267442920532081063308170770706362457874679659',
        vr_prime: null },
     nonce: '847993445951495627416013',
     master_secret_name: 'fc790cb3-c6b8-4631-bfe0-909adbb21fed' } }
@Daniel -> Authcrypt "Job-Certificate" Credential Request for Company
{ authcryptedJobCertificateCredRequestRaw: <Buffer 08 dd 65 3e cf a5 f1 c6 c7 1f ce 61 e8 12 07 8c 51 fb 47 01 58 07 d0 83 c6 fb 34 d1 2d 4a 96 5f 14 97 ed 12 9e 49 a3 5a 3a d5 8b 46 4f 52 68 f9 51 3a ... > }
@Daniel -> Sending authcrypted "Job-Certificate" Credential Request to Company ......
@Company -> ...... authcrypted "Job-Certificate" Credential Request received
@Company -> Authdecrypt "Job-Certificate" Credential Request from Daniel
{ danielCompanyVerkey2: '9CLJ7PEnd1GiZqrf2vKa6ARMh2dUM2cehmt2gJniVjSQ',
  authdecryptedJobCertificateCredRequestJson: '{"prover_did":"G37i3saZj4v8XKTaFs8Ec4","cred_def_id":"H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1","blinded_ms":{"u":"37984210176585357745721312410419936132305196665659555014734020257722507494616349547223762559640376015950350443543833143487425773557434124996941849707652643256892166377055452163000555566582444259967120575781013019153586199835976773218170283092285954004874605168923857447572182378174868013484269731479718804783826913648372786080847353160368172900503675970844264201396409303138932466061471801060592992271040495881835305829067148669728730977733125966149585896397293489390612357460144831031134596393894529054636117969678814320856221044463742915473372747929114563361894810837371911886338448380792766405531623114767308543052","ur":null,"hidden_attributes":["master_secret"],"committed_attributes":{}},"blinded_ms_correctness_proof":{"c":"23124051766377726806721389846496847103996121975827578421239222590067581406374","v_dash_cap":"793718101189367228038818023290156184015042865093482416666754734749597594803424197481081645356620833422206311712488847909679496740948737533572808748379610073894616584072843661863177028777231969317491421680454536265092114746409704505893017957868500330869083621513395566211627314029301901055147404734675659907466262820216019473553806255405587566777270651847055197539936265451332423024380619740822789782262345597411455353718023252601253651901716475566119582149026492756909040280480022570428737157688034167618826354612771489188501151095209434473275483122985987334937841938528718178515111995825599434383448562354839438046306913413834868868328975741634287462196839059246009307118401617469604204428429579280235831461540632158","m_caps":{"master_secret":"16251192363937329809357529617501318346904389057211015266424830799375072515633255635144330317079553263208541594857407395065638919680384269930402602346725283954234916670205596945955"},"r_caps":{}},"nonce":"847993445951495627416013"}',
  authdecryptedJobCertificateCredRequest: 
   { prover_did: 'G37i3saZj4v8XKTaFs8Ec4',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     blinded_ms: 
      { u: '37984210176585357745721312410419936132305196665659555014734020257722507494616349547223762559640376015950350443543833143487425773557434124996941849707652643256892166377055452163000555566582444259967120575781013019153586199835976773218170283092285954004874605168923857447572182378174868013484269731479718804783826913648372786080847353160368172900503675970844264201396409303138932466061471801060592992271040495881835305829067148669728730977733125966149585896397293489390612357460144831031134596393894529054636117969678814320856221044463742915473372747929114563361894810837371911886338448380792766405531623114767308543052',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '23124051766377726806721389846496847103996121975827578421239222590067581406374',
        v_dash_cap: '793718101189367228038818023290156184015042865093482416666754734749597594803424197481081645356620833422206311712488847909679496740948737533572808748379610073894616584072843661863177028777231969317491421680454536265092114746409704505893017957868500330869083621513395566211627314029301901055147404734675659907466262820216019473553806255405587566777270651847055197539936265451332423024380619740822789782262345597411455353718023252601253651901716475566119582149026492756909040280480022570428737157688034167618826354612771489188501151095209434473275483122985987334937841938528718178515111995825599434383448562354839438046306913413834868868328975741634287462196839059246009307118401617469604204428429579280235831461540632158',
        m_caps: [Object],
        r_caps: {} },
     nonce: '847993445951495627416013' } }
@Company -> Create "Job-Certificate" Credential for Daniel
{ jobCertificateCredValues: 
   { first_name: 
      { raw: 'Daniel',
        encoded: '245712572474217942457235975012103335' },
     last_name: { raw: 'Yang', encoded: '312643218496194691632153761283356127' },
     salary: { raw: '2400', encoded: '2400' },
     status: { raw: 'Permanent', encoded: '2143135425425143112321314321' },
     experience: { raw: '10', encoded: '10' } } }
{ jobCertificateCred: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { salary: [Object],
        status: [Object],
        last_name: [Object],
        experience: [Object],
        first_name: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '5445109488236825873627418083964498706832154367975424851045091373420419578197310106087806099854979803670593119567417903352750927976754852084241940124884423238107501133795304157638474671677333495652151113961833948935777607007930502440327700617346262371336834223435493929730272285855645079348403212689454600928727011955777852345431619505941841719780778165947463003076370879524516776159321642561562207138833934375423081920671425779540176397099978728404277793069873814940343201388042282134402046622404079962145610397663121660658181159234568131856047572015553126548983021383793387423625565686839211351217849704260578129237',
        c: '72842296485806106415461187627965950745086789044082793126552635145701924524891' },
     rev_reg: null,
     witness: null },
  jobCertificateCredRevocId: null,
  jobCertificateCredRevocRegDelta: null }
@Company -> Authcrypt "Job-Certificate" Credential for Daniel
{ authcryptedJobCertificateCredRaw: <Buffer 2e 40 22 8c a4 0a e9 87 40 95 db 3d 43 33 62 b1 39 c1 8e 8d ac df c8 77 a9 15 cc 3c e5 17 50 75 b1 f5 97 57 b5 f4 d8 59 9f d2 6a 52 2d af 04 c4 db bf ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential received
@Daniel -> Authdecrypt "Job-Certificate" Credential from Company
{ companyDanielVerKey3: 'ER5W7A7ewwkNCcC1JyESfwMsfGQoJdB1PQnRfWiRaT1M',
  authdecryptedJobCertificateCredJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1","rev_reg_id":null,"values":{"salary":{"raw":"2400","encoded":"2400"},"status":{"raw":"Permanent","encoded":"2143135425425143112321314321"},"last_name":{"raw":"Yang","encoded":"312643218496194691632153761283356127"},"experience":{"raw":"10","encoded":"10"},"first_name":{"raw":"Daniel","encoded":"245712572474217942457235975012103335"}},"signature":{"p_credential":{"m_2":"100317547258964760163250946233177179570446465190018402888265332879981735075506","a":"53767550491758063350249018866948765359564305789153552748852544938130937930320496438143699451224872931935399067265016953820428895083112161083406838049206751293631617404964727658870501900801585078116319589084888814106375467292875433786108117887683820008079998108200945613676268150507675787350624857399544017537388417134296331032252253686369197827902240894955478859478520781261481637955655994310687764362929624853470453602811835303097678364051092549060126531847156129948506033087812434777050424361884481958803355559269063418271642397134066837994497218337873027097348442585316936171354170738235016928443305819824471590644","e":"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742930193032258565023250600357424201615959","v":"6136088872848876870610354162802195371618045985974383664132890705705243611778710943944496755801789094284549613891145620924291401085766245079041271427647389428282845026597234304547489345139472719856070912750955113898442702429695346963785928881000717291777810463393607767018779496572812671746278183277698483350372548360986392750986543287220774717905692666333808212054120288003718579868898126742447426417614605221720450627630522440402056955912837313716549182978433577991826715736620229443347174592460268204420142785225238899885734109516041935001515288477003457411854937350744048991140087650005289287486036984529208541262201462280579748615339137198071138910913295113660101985754374032969971540319151306266412374514938040411697205280854568291874351515712563236778780969241350933264532017143384307062474034273011974891175996272"},"r_credential":null},"signature_correctness_proof":{"se":"5445109488236825873627418083964498706832154367975424851045091373420419578197310106087806099854979803670593119567417903352750927976754852084241940124884423238107501133795304157638474671677333495652151113961833948935777607007930502440327700617346262371336834223435493929730272285855645079348403212689454600928727011955777852345431619505941841719780778165947463003076370879524516776159321642561562207138833934375423081920671425779540176397099978728404277793069873814940343201388042282134402046622404079962145610397663121660658181159234568131856047572015553126548983021383793387423625565686839211351217849704260578129237","c":"72842296485806106415461187627965950745086789044082793126552635145701924524891"},"rev_reg":null,"witness":null}',
  authdecryptedJobCertificateCred: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { salary: [Object],
        status: [Object],
        last_name: [Object],
        experience: [Object],
        first_name: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '5445109488236825873627418083964498706832154367975424851045091373420419578197310106087806099854979803670593119567417903352750927976754852084241940124884423238107501133795304157638474671677333495652151113961833948935777607007930502440327700617346262371336834223435493929730272285855645079348403212689454600928727011955777852345431619505941841719780778165947463003076370879524516776159321642561562207138833934375423081920671425779540176397099978728404277793069873814940343201388042282134402046622404079962145610397663121660658181159234568131856047572015553126548983021383793387423625565686839211351217849704260578129237',
        c: '72842296485806106415461187627965950745086789044082793126552635145701924524891' },
     rev_reg: null,
     witness: null } }
@Daniel -> Store "Job-Certificate" Credential from Company
{ jobCertificateCredId: 'b423c8ab-c94a-4fa5-8e23-814644d55606' }

=============================================
=== Park-Daniel Onboarding ===


*** onboarding ***

@Park -> Create DID "Park Daniel"
{ fromToDid: '4WEyyLsx2bMmyfmRrUM3MJ',
  fromToVerKey: '2umrMme7iMFjgA35xzKhG1MPDJJq1KdFUdHNm3t7ewWR' }
@Park -> Send Nym to Ledger for "Park Daniel" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'HkcxYSogV1td68nFGEGnamVwG7L7yx1pqMi2fzxiRDtz',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
@Park -> Send connection request to Daniel with "Park Daniel" DID and nonce
{ connectionRequest: { did: '4WEyyLsx2bMmyfmRrUM3MJ', nonce: 123456 } }
@Park -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Park"
{ toFromDid: 'LjycHgr8EEHcp1y2SJcmTh',
  toFromVerKey: 'Bm3x2g23kgjSDEvbuqrgoE4F2Zv51rnXEis42Rsi1BS1' }
@Daniel -> Get VerKey for Did from "Park"'s connection request
{ fromToVerKey2: '2umrMme7iMFjgA35xzKhG1MPDJJq1KdFUdHNm3t7ewWR' }
@Daniel -> Anoncrypt connection response for "Park" with "Daniel Park" DID, verkey and nonce
{ connectionResponse: '{"did":"LjycHgr8EEHcp1y2SJcmTh","verkey":"Bm3x2g23kgjSDEvbuqrgoE4F2Zv51rnXEis42Rsi1BS1","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer a0 89 b4 b1 54 34 ef cd 53 d2 4a da f6 f8 be 62 d0 30 3b 28 e5 c4 ea a9 6c 72 a4 cb 11 75 a0 5c 9b 88 d7 3d c5 41 15 5d 3d 2d f3 31 38 7a f3 06 5d bf ... > }
@Daniel -> Sending anoncrypted connection response to "Park" ......
@Park -> ...... response received
@Park -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'LjycHgr8EEHcp1y2SJcmTh',
     verkey: 'Bm3x2g23kgjSDEvbuqrgoE4F2Zv51rnXEis42Rsi1BS1',
     nonce: 123456 } }
@Park -> Authenticates "Daniel" by comparision of none
@Park -> Send Nym to Ledger for "Daniel Park" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'CY9zixcuyFTe5q1AVvZgyCM7MRcxf2EH4av6FbA9iAKk',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ parkDanielDid: '4WEyyLsx2bMmyfmRrUM3MJ',
  parkDanielVerKey: '2umrMme7iMFjgA35xzKhG1MPDJJq1KdFUdHNm3t7ewWR',
  danielParkDid: 'LjycHgr8EEHcp1y2SJcmTh',
  danielParkVerKey: 'Bm3x2g23kgjSDEvbuqrgoE4F2Zv51rnXEis42Rsi1BS1',
  parkDanielConnectionResponse: 
   { did: 'LjycHgr8EEHcp1y2SJcmTh',
     verkey: 'Bm3x2g23kgjSDEvbuqrgoE4F2Zv51rnXEis42Rsi1BS1',
     nonce: 123456 } }

=============================================
=== Job-Certificate Proving ===

@Park -> Create "Park-Application" Proof Request
{ parkApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Park -> Authcrypt "Park-Application" Proof Request for Daniel
{ authcryptedJobApplicationProofRequestRaw: <Buffer 0b 2a 31 6e 96 16 a7 cd c1 17 ec 2d 0d f3 5b d4 3d f0 43 c7 30 47 a0 10 0e 0c c7 9e fc 72 eb 66 f1 cf 46 f8 1e 70 54 d5 3d 11 a7 8b b0 40 67 d9 c8 1c ... > }
@Park -> Sending authcrypted "Job-Application" Proof Request to Daniel ......
@Daniel -> ...... authcrypted "Job-Application" Proof Request received
@Daniel -> Authdecrypt "Job-Application" Proof Request from Park
{ parkDanielVerKey2: '2umrMme7iMFjgA35xzKhG1MPDJJq1KdFUdHNm3t7ewWR',
  authdecryptedJobApplicationProofRequestJson: '{"nonce":"1432422343242122312411212","name":"Park-Application","version":"0.1","requested_attributes":{"attr1_referent":{"name":"first_name","restrictions":[{"cred_def_id":"H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1"}]},"attr2_referent":{"name":"last_name","restrictions":[{"cred_def_id":"H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1"}]},"attr3_referent":{"name":"mobile"}},"requested_predicates":{}}',
  authdecryptedJobApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Daniel -> Get Credentials for "Job-Application" Proof Request
{ jobApplicationProofReqSearchHandle: 48 }
{ credentials: [ { cred_info: [Object], interval: null } ] }
{ credForAttr1: 
   { referent: 'b423c8ab-c94a-4fa5-8e23-814644d55606',
     attrs: 
      { salary: '2400',
        experience: '10',
        first_name: 'Daniel',
        last_name: 'Yang',
        status: 'Permanent' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr2: 
   { referent: 'b423c8ab-c94a-4fa5-8e23-814644d55606',
     attrs: 
      { salary: '2400',
        experience: '10',
        first_name: 'Daniel',
        last_name: 'Yang',
        status: 'Permanent' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr3: 
   { referent: 'b423c8ab-c94a-4fa5-8e23-814644d55606',
     attrs: 
      { salary: '2400',
        experience: '10',
        first_name: 'Daniel',
        last_name: 'Yang',
        status: 'Permanent' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
{ credsForJobApplicationProof: 
   { 'b423c8ab-c94a-4fa5-8e23-814644d55606': 
      { referent: 'b423c8ab-c94a-4fa5-8e23-814644d55606',
        attrs: [Object],
        schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
        rev_reg_id: null,
        cred_rev_id: null } } }
@Daniel -> Prover Get Entities (Schemas and Credential Definitions) from Ledger

*** proverGetEntitiesFromLedger ***

{ credential: 
   { referent: 'b423c8ab-c94a-4fa5-8e23-814644d55606',
     attrs: 
      { salary: '2400',
        experience: '10',
        first_name: 'Daniel',
        last_name: 'Yang',
        status: 'Permanent' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
@Daniel -> Get Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { data: [Object],
        txnTime: 1541591103,
        reqId: 1541990602640952000,
        identifier: 'LjycHgr8EEHcp1y2SJcmTh',
        type: '107',
        seqNo: 60,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        state_proof: [Object] } } }
@Daniel -> Get Credential Definition from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { data: [Object],
        identifier: 'LjycHgr8EEHcp1y2SJcmTh',
        ref: 60,
        reqId: 1541990603077440000,
        txnTime: 1541990586,
        type: '108',
        tag: 'TAG1',
        seqNo: 280,
        signature_type: 'CL',
        origin: 'H2MzbvBPudEi2AsWU9KNav',
        state_proof: [Object] } } }
{ proverSchemas: 
   { 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1': 
      { ver: '1.0',
        id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        name: 'Job-Certificate',
        version: '0.1',
        attrNames: [Array],
        seqNo: 60 } },
  proverCredDefs: 
   { 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1': 
      { ver: '1.0',
        id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
        schemaId: '60',
        type: 'CL',
        tag: 'TAG1',
        value: [Object] } },
  proverRevStates: {} }
@Daniel -> Create "Park-Application" Proof
{ parkApplicationRequestedCreds: 
   { self_attested_attributes: { attr3_referent: '18618386178' },
     requested_attributes: { attr1_referent: [Object], attr2_referent: [Object] },
     requested_predicates: {} } }
{ parkApplicationProof: 
   { proof: { proofs: [Array], aggregated_proof: [Object] },
     requested_proof: 
      { revealed_attrs: [Object],
        self_attested_attrs: [Object],
        unrevealed_attrs: {},
        predicates: {} },
     identifiers: [ [Object] ] } }
@Daniel -> Authcrypt "Park-Application" Proof for Park
{ authcryptedParkApplicationProofRaw: <Buffer cf 1f 18 48 2c f4 03 4c 46 44 d0 56 d7 9d 06 ec 9d 8c c6 eb 4e 45 ec 0e 18 09 e4 5b 4c 7b 01 6e 25 c0 1b 1e 67 7b 8e 9b e3 07 3d 54 d9 e4 97 d9 59 35 ... > }
@Daniel -> Sending authcrypted "Park-Application" Proof for Park ......
@Park -> ...... authcrypted "Park-Application" Proof received
@Park -> Authdecrypt "Park-Application" Proof from Daniel
{ danielParkVerKey2: 'Bm3x2g23kgjSDEvbuqrgoE4F2Zv51rnXEis42Rsi1BS1',
  authdecryptedParkApplicationProofJson: '{"proof":{"proofs":[{"primary_proof":{"eq_proof":{"revealed_attrs":{"first_name":"245712572474217942457235975012103335","last_name":"312643218496194691632153761283356127"},"a_prime":"4253989956428832757781796587630107983302135365306191429046043555199175421587340395162114653672382792604956910906382074019165539926484189671225557149327894080717879101618958066981494837818964224982829387037326099915479795311216024790322612237941773511808361920559020602729569406054138615723538256089410502493583394188956670869795977316277441307835320912329984798072045296645995027466300057668163046080242960974935980765861173655119767511259685761536892164143137354016223265038473510854747131831684129125226960087035228671971348463910674648301680215663535787382067594642921186552835692400832448741564411356590485342443","e":"36707506124582070339900034336896298946819451354612257786157590857753054861177988546371961551217926197656982208550633522685934401113875879","v":"719919147869468983509391888890825877377354246773846453110135174587781831726792973749457011720784837239853907901542338563135129414433241673604586772739911509474469931170085121901244097405486004358948642450775640732635009150716641855146380793553103369293695756668977941006988309105490968985239153357924543293713468633793251700136357262422491457523555251302862870561667381903910170103911168090138757019455474982074777881453656791821369391434464832769724056803414530292458936363293781012051531689807252802204416751827818680638627182528290395136495154226467165595884162134319380124902752553210002214715639378371027534699471206445169028366748328974891932935123776934709499602918205760547402544771541237867251987641315835752212283782266506409241045168091267226686292646482876702311113553822435896606456180856600165101741256611333373518641012788745573624193370867344437663293707436188913613256195669644920141651099884456406866066","m":{"status":"12802645471678534653191220794601528511944993673528743247542541164016458896674594849810088239923381797949513792951528293923576844656244711214816324052030558753753144916705651292371","salary":"4472761899355961967438134725449949175551299359931027287688239550970077024164223794933890842475046439438638107033082044926604129122360137385089557479224566739826483396968639655488","experience":"7111482420807767221437887447879332868053303895929413404881885056672512650257613146566410649360685161812206091720375423277272069343141276919400244921281853211238324566117527799975","master_secret":"1392250425145205724646909880905420791829686592490588466707993229872077257683567137946036397635257407319505456442441092604641146440206849588813020134276621236405002623292847791841"},"m2":"7026835316539879748764455292202180072381779797641429073305332818366497064378459586555724657295078819290647012285616291734114441243750110803318381085753534203155072712190836666026"},"ge_proofs":[]},"non_revoc_proof":null}],"aggregated_proof":{"c_hash":"65186157292259322937397579457779125828145411155126148438451908654479410582721","c_list":[[33,178,182,32,136,17,76,35,106,191,63,167,33,86,24,70,201,152,119,154,74,125,101,17,205,95,132,40,25,235,191,190,96,42,146,40,92,47,4,20,161,245,25,245,215,55,133,79,143,109,218,228,67,247,53,191,168,39,171,220,162,124,139,128,21,106,109,111,39,78,73,177,255,85,153,142,32,13,149,63,45,151,153,184,145,75,222,58,162,171,144,163,180,22,149,109,128,36,85,33,69,33,155,198,191,212,245,101,26,252,66,101,153,59,86,25,130,108,172,32,239,241,225,181,64,166,251,116,46,26,219,178,169,29,180,217,112,174,35,166,42,253,72,147,242,63,169,218,22,169,168,128,247,84,201,152,123,61,73,66,207,202,223,254,188,210,63,60,149,22,91,26,64,20,133,107,149,237,189,212,118,203,38,116,195,225,56,25,168,177,73,167,2,112,143,10,164,248,153,77,161,14,95,3,190,56,247,136,12,113,161,103,100,27,48,217,215,204,233,213,172,117,251,51,197,149,2,142,184,103,28,191,114,42,50,32,3,190,248,222,85,49,5,10,155,158,43,45,208,142,200,53,169,85,8,235]]}},"requested_proof":{"revealed_attrs":{"attr1_referent":{"sub_proof_index":0,"raw":"Daniel","encoded":"245712572474217942457235975012103335"},"attr2_referent":{"sub_proof_index":0,"raw":"Yang","encoded":"312643218496194691632153761283356127"}},"self_attested_attrs":{"attr3_referent":"18618386178"},"unrevealed_attrs":{},"predicates":{}},"identifiers":[{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1","rev_reg_id":null,"timestamp":null}]}',
  authdecryptedParkApplicationProof: 
   { proof: { proofs: [Array], aggregated_proof: [Object] },
     requested_proof: 
      { revealed_attrs: [Object],
        self_attested_attrs: [Object],
        unrevealed_attrs: {},
        predicates: {} },
     identifiers: [ [Object] ] },
  'authdecryptedParkApplicationProof.requested_proof.revealed_attrs': 
   { attr1_referent: 
      { sub_proof_index: 0,
        raw: 'Daniel',
        encoded: '245712572474217942457235975012103335' },
     attr2_referent: 
      { sub_proof_index: 0,
        raw: 'Yang',
        encoded: '312643218496194691632153761283356127' } },
  'authdecryptedParkApplicationProof.requested_proof.self_attested_attrs': { attr3_referent: '18618386178' } }
@Park -> Verifier Get Entities (Schemas and Credential Definitions) from Ledger

*** verifierGetEntitiesFromLedger ***

{ credential: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
     rev_reg_id: null,
     timestamp: null } }
@Park -> Get Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { data: [Object],
        txnTime: 1541591103,
        reqId: 1541990603601252000,
        identifier: '4WEyyLsx2bMmyfmRrUM3MJ',
        type: '107',
        seqNo: 60,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        state_proof: [Object] } } }
@Park -> Get Credential Definition from Ldger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { data: [Object],
        identifier: '4WEyyLsx2bMmyfmRrUM3MJ',
        ref: 60,
        reqId: 1541990604120505000,
        txnTime: 1541990586,
        type: '108',
        tag: 'TAG1',
        seqNo: 280,
        signature_type: 'CL',
        origin: 'H2MzbvBPudEi2AsWU9KNav',
        state_proof: [Object] } } }
{ verifierSchemas: 
   { 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1': 
      { ver: '1.0',
        id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        name: 'Job-Certificate',
        version: '0.1',
        attrNames: [Array],
        seqNo: 60 } },
  verifierCredDefs: 
   { 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1': 
      { ver: '1.0',
        id: 'H2MzbvBPudEi2AsWU9KNav:3:CL:60:TAG1',
        schemaId: '60',
        type: 'CL',
        tag: 'TAG1',
        value: [Object] } },
  verifierRevRegs: {},
  verifierRevRegDefs: {} }
@Park -> Verify "Park-Application" Proof from Daniel

=============================================
=== Cleanup ===

@Steward -> Close and Delete Wallet
@Park -> Close and Delete Wallet
@Company -> Close and Delete Wallet
@Daniel -> Close and Delete Wallet
Close and Delete Pool
=============================================
=== Steward Setup ===

@Steward -> Create Wallet
@Steward -> Create DID
{ stewardDid: 'Th7MpTaRZVRYnPiabds81Y',
  stewardVerKey: 'FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4' }

=============================================
=== Daniel Setup ===

@Daniel -> Create Wallet
@Daniel -> Create Master Scecret
{ danielMasterSecretId: '1e72b87a-682a-403f-870a-c75fca6976d6' }

=============================================
=== Steward-Park Onboarding & Park GetVerinym ===

@Park -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Park"
{ fromToDid: '3XYe9MyUbUJ9zEoMeU4TVk',
  fromToVerKey: '2NsbPbmtiEUKorrzTaxcTPsJugw4v2NYf7y8JMjTnR8h' }
@Steward -> Send Nym to Ledger for "Steward Park" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'GdQKRM6T39d8hnnTERrvFMbQXLokgWMm1rhDMmRFmL1z',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
@Steward -> Send connection request to Park with "Steward Park" DID and nonce
{ connectionRequest: { did: '3XYe9MyUbUJ9zEoMeU4TVk', nonce: 123456 } }
@Steward -> Sending request ......
@Park -> ...... request received
@Park -> Create DID "Park Steward"
{ toFromDid: 'K8CCjreFzvdUD6ypssU5uc',
  toFromVerKey: 'AswHgXnaVBQYPdEsfEYg4UNMyjcGn2FbSDwbzR9246zX' }
@Park -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: '2NsbPbmtiEUKorrzTaxcTPsJugw4v2NYf7y8JMjTnR8h' }
@Park -> Anoncrypt connection response for "Steward" with "Park Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"K8CCjreFzvdUD6ypssU5uc","verkey":"AswHgXnaVBQYPdEsfEYg4UNMyjcGn2FbSDwbzR9246zX","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer bf ca fe 8c 27 8f 54 dd 9e 37 59 85 ef 30 0f b3 36 f1 9f 95 45 d4 0e bf 7a 4d 12 aa 79 3d a4 7a 52 97 af 9f 19 b9 ea 5b a1 cd 07 2e 9b 79 66 bc 4d eb ... > }
@Park -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Park"
{ decryptedConnectionResponse: 
   { did: 'K8CCjreFzvdUD6ypssU5uc',
     verkey: 'AswHgXnaVBQYPdEsfEYg4UNMyjcGn2FbSDwbzR9246zX',
     nonce: 123456 } }
@Steward -> Authenticates "Park" by comparision of none
@Steward -> Send Nym to Ledger for "Park Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '8vgmjQBcsV7r638iHowMuBfg2H2DsfmaQnPfKjkSPSjr',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ stewardParkDid: '3XYe9MyUbUJ9zEoMeU4TVk',
  stewardParkVerKey: '2NsbPbmtiEUKorrzTaxcTPsJugw4v2NYf7y8JMjTnR8h',
  parkStewardDid: 'K8CCjreFzvdUD6ypssU5uc',
  parkStewardVerKey: 'AswHgXnaVBQYPdEsfEYg4UNMyjcGn2FbSDwbzR9246zX' }

*** getVerinym ***

@Park -> Create DID
{ toDid: 'QNQu35tvB9ADmiVaFDWMPb',
  toVerKey: 'DjkFGYSqmVsBhuGj2BXkGBSNk56o6wNeGwbjHcYwvTNw' }
@Park -> Authcrypt "Park" DID info for "Steward"
{ didInfo: '{"did":"QNQu35tvB9ADmiVaFDWMPb","verkey":"DjkFGYSqmVsBhuGj2BXkGBSNk56o6wNeGwbjHcYwvTNw"}',
  authcryptedDidInfoRaw: <Buffer 67 e3 4f 69 3a dd bf f8 3f 14 9e 62 1c a1 50 a3 cf 14 8c 12 99 29 68 28 7b f6 f1 71 25 78 8c 03 6f be b7 49 2e 04 e9 b8 c2 e9 7f ee 6f 41 5e 14 b7 6e ... > }
@Park -> Sending authcrypted "Park" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Park" DID info from "Park"
{ senderVerKey: 'AswHgXnaVBQYPdEsfEYg4UNMyjcGn2FbSDwbzR9246zX',
  authdecryptedDidInfoRaw: <Buffer 7b 22 64 69 64 22 3a 22 51 4e 51 75 33 35 74 76 42 39 41 44 6d 69 56 61 46 44 57 4d 50 62 22 2c 22 76 65 72 6b 65 79 22 3a 22 44 6a 6b 46 47 59 53 71 ... >,
  authdecryptedDidInfo: 
   { did: 'QNQu35tvB9ADmiVaFDWMPb',
     verkey: 'DjkFGYSqmVsBhuGj2BXkGBSNk56o6wNeGwbjHcYwvTNw' } }
@Steward -> Authenticates "Park" by comparison of Verkeys
{ retrievedVerKey: 'AswHgXnaVBQYPdEsfEYg4UNMyjcGn2FbSDwbzR9246zX' }
@Steward -> Send Nym to Ledger for "Park" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'DdKgLG6UQN6r4jDk9QVEqLdLwQkj2yfT1Ph7scGrVqLe',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ parkDid: 'QNQu35tvB9ADmiVaFDWMPb' }

=============================================
=== Steward-Company Onboarding & Company GetVerinym ===

@Company -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Company"
{ fromToDid: 'MHqnyVzwdvcoFtMVJQuzdM',
  fromToVerKey: 'C4RGn2usZR3oFv7P5EPU5VNmXtTpifva1G27eVQwgUrJ' }
@Steward -> Send Nym to Ledger for "Steward Company" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '8wyroY9Jzu8BGzV7ViEq27VZoX2bdRMtZ4syNwTVtmJE',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
@Steward -> Send connection request to Company with "Steward Company" DID and nonce
{ connectionRequest: { did: 'MHqnyVzwdvcoFtMVJQuzdM', nonce: 123456 } }
@Steward -> Sending request ......
@Company -> ...... request received
@Company -> Create DID "Company Steward"
{ toFromDid: 'UYxV7Sp1xQG1j3VW3V1S1w',
  toFromVerKey: 'G1wZScXkE16D8j9J1USyoWXg1oak3J5HZK387RTCCzDy' }
@Company -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: 'C4RGn2usZR3oFv7P5EPU5VNmXtTpifva1G27eVQwgUrJ' }
@Company -> Anoncrypt connection response for "Steward" with "Company Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"UYxV7Sp1xQG1j3VW3V1S1w","verkey":"G1wZScXkE16D8j9J1USyoWXg1oak3J5HZK387RTCCzDy","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer ba a8 14 19 cd d5 76 6d 05 d1 58 2c 69 54 6b 84 4b f5 ff b2 8f e2 2f bd 75 5d 4f ce 46 e7 a0 6d 8d 75 be c9 53 d1 87 3f 50 43 9c 4f 62 67 bc 88 b3 b3 ... > }
@Company -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Company"
{ decryptedConnectionResponse: 
   { did: 'UYxV7Sp1xQG1j3VW3V1S1w',
     verkey: 'G1wZScXkE16D8j9J1USyoWXg1oak3J5HZK387RTCCzDy',
     nonce: 123456 } }
@Steward -> Authenticates "Company" by comparision of none
@Steward -> Send Nym to Ledger for "Company Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '4g8G86JiR6G1qvaz99hmXNV3WV7N4FbE5TRCNyHnf2Tv',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ stewardCompanyDid: 'MHqnyVzwdvcoFtMVJQuzdM',
  stewardCompanyVerKey: 'C4RGn2usZR3oFv7P5EPU5VNmXtTpifva1G27eVQwgUrJ',
  companyStewardDid: 'UYxV7Sp1xQG1j3VW3V1S1w',
  companyStewardVerkey: 'G1wZScXkE16D8j9J1USyoWXg1oak3J5HZK387RTCCzDy' }

*** getVerinym ***

@Company -> Create DID
{ toDid: 'RB9CRvryn4VFJS1smyhQLL',
  toVerKey: 'EBDTC4RrzHFATFuo43gQpMGhVNy7oVPPmU8ESDpjavA7' }
@Company -> Authcrypt "Company" DID info for "Steward"
{ didInfo: '{"did":"RB9CRvryn4VFJS1smyhQLL","verkey":"EBDTC4RrzHFATFuo43gQpMGhVNy7oVPPmU8ESDpjavA7"}',
  authcryptedDidInfoRaw: <Buffer 2a 92 be e5 d6 04 ee 35 d4 57 fc f8 c6 07 63 c7 66 cd 17 c4 fd d0 ba 9a 44 5d 0c 79 c1 cf fb 2b 76 d4 4c ce 02 97 fe 58 e9 46 09 eb 44 cb 95 42 d6 f1 ... > }
@Company -> Sending authcrypted "Company" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Company" DID info from "Company"
{ senderVerKey: 'G1wZScXkE16D8j9J1USyoWXg1oak3J5HZK387RTCCzDy',
  authdecryptedDidInfoRaw: <Buffer 7b 22 64 69 64 22 3a 22 52 42 39 43 52 76 72 79 6e 34 56 46 4a 53 31 73 6d 79 68 51 4c 4c 22 2c 22 76 65 72 6b 65 79 22 3a 22 45 42 44 54 43 34 52 72 ... >,
  authdecryptedDidInfo: 
   { did: 'RB9CRvryn4VFJS1smyhQLL',
     verkey: 'EBDTC4RrzHFATFuo43gQpMGhVNy7oVPPmU8ESDpjavA7' } }
@Steward -> Authenticates "Company" by comparison of Verkeys
{ retrievedVerKey: 'G1wZScXkE16D8j9J1USyoWXg1oak3J5HZK387RTCCzDy' }
@Steward -> Send Nym to Ledger for "Company" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'MbeBj6FoyHQEJrb7cNi4dWnX6XeXzBFwuk3zWJWbXC2',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ companyDid: 'RB9CRvryn4VFJS1smyhQLL' }

=============================================
=== Credential Schemas Setup ===

@Steward -> Create "Job-Certificate" Schema
{ jobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  jobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'last_name', 'first_name', 'status', 'salary', 'experience' ],
     seqNo: null } }
@Steward -> Send "Job-Certificate" Schema to Ledger
{ requestResult: 
   { reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Job-Certificate and version 0.1\',)',
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reqId: 1541735742034558000,
     op: 'REJECT' } }
@Steward -> Create "Park-Certificate" Schema
{ parkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  parkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'first_name', 'last_name', 'level' ],
     seqNo: null } }
@Steward -> Send "Park-Certificate" Schema to Ledger
{ requestResult: 
   { reqId: 1541735742922667000,
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Park-Certificate and version 0.1\',)',
     op: 'REJECT' } }

=============================================
=== Company Credential Definition Setup ===

@Company -> Get "Job-Certificate" Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { data: [Object],
        txnTime: 1541591103,
        reqId: 1541735743928328000,
        identifier: 'RB9CRvryn4VFJS1smyhQLL',
        type: '107',
        seqNo: 60,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        state_proof: [Object] } } }
{ theJobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  theJobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'status', 'last_name', 'experience', 'first_name', 'salary' ],
     seqNo: 60 } }
@Company -> Create and store "Company Job-Certificate" Credential Definition
{ companyJobCertificateCredDefId: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
  companyJobCertificateCredDef: 
   { ver: '1.0',
     id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Company -> Send "Company Job-Certificate" Credential Definition to Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '3JZkBRmH2gPNjXrmxVphgGkNvD65QMPoXHbrr3d9ZmdB',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }

=============================================
=== Park Credential Definition Setup ===

@Park -> Get "Park-Certificate" Schema from Ledger
{ requestResult: 
   { result: 
      { seqNo: 85,
        type: '107',
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        reqId: 1541735764637185000,
        identifier: 'QNQu35tvB9ADmiVaFDWMPb',
        txnTime: 1541592700,
        state_proof: [Object],
        data: [Object] },
     op: 'REPLY' } }
{ theParkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  theParkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'status', 'last_name', 'level', 'first_name' ],
     seqNo: 85 } }
@Park -> Create and store "Park Park-Certificate" Credential Definition
{ parkParkCertificateCredDefId: 'QNQu35tvB9ADmiVaFDWMPb:3:CL:85:TAG1',
  parkParkCertificateCredDef: 
   { ver: '1.0',
     id: 'QNQu35tvB9ADmiVaFDWMPb:3:CL:85:TAG1',
     schemaId: '85',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Park -> Send "Park Park-Certificate" Credential Definition to Ledger
{ requestResult: 
   { result: 
      { rootHash: 'F1KdD2zd34L3NCbdxuU1Zp2eBd6GHeTQfaBtApzNi53o',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }

=============================================
=== Company-Daniel Onboarding ===


*** onboarding ***

@Company -> Create DID "Company Daniel"
{ fromToDid: '12G3AzpXZzBwMiB11oNm5o',
  fromToVerKey: '1gorm3kChQA2HEGXC1fJcagAbiwfB5fP8EtydB7vxe7' }
@Company -> Send Nym to Ledger for "Company Daniel" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'FEtrFvHR5WTzQJUvQFfVrawv2v6nPqu4KCJn5VNQz22i',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
@Company -> Send connection request to Daniel with "Company Daniel" DID and nonce
{ connectionRequest: { did: '12G3AzpXZzBwMiB11oNm5o', nonce: 123456 } }
@Company -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Company"
{ toFromDid: 'ErKqUsrebZ4g9FVBVbkiBN',
  toFromVerKey: '8YqgPstWWUEw9UJ5sZYybPR69wvfJaUH1XTQcJsbWpBW' }
@Daniel -> Get VerKey for Did from "Company"'s connection request
{ fromToVerKey2: '1gorm3kChQA2HEGXC1fJcagAbiwfB5fP8EtydB7vxe7' }
@Daniel -> Anoncrypt connection response for "Company" with "Daniel Company" DID, verkey and nonce
{ connectionResponse: '{"did":"ErKqUsrebZ4g9FVBVbkiBN","verkey":"8YqgPstWWUEw9UJ5sZYybPR69wvfJaUH1XTQcJsbWpBW","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer b5 67 08 e1 30 5b a2 ab 77 74 21 73 d6 cd b2 49 5e 88 52 ab 60 73 ad c7 16 79 aa 81 00 97 01 1d 18 f5 96 3d 61 7f 2e 00 70 f4 a4 4e 73 87 f1 10 a7 5d ... > }
@Daniel -> Sending anoncrypted connection response to "Company" ......
@Company -> ...... response received
@Company -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'ErKqUsrebZ4g9FVBVbkiBN',
     verkey: '8YqgPstWWUEw9UJ5sZYybPR69wvfJaUH1XTQcJsbWpBW',
     nonce: 123456 } }
@Company -> Authenticates "Daniel" by comparision of none
@Company -> Send Nym to Ledger for "Daniel Company" DID
{ requestResult: 
   { result: 
      { rootHash: 'DgHdQZUcU3uvkNimFLVBjpHCu7E3YrqemAEDZTATVtA5',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }
{ companyDanielDid: '12G3AzpXZzBwMiB11oNm5o',
  companyDanielVerKey: '1gorm3kChQA2HEGXC1fJcagAbiwfB5fP8EtydB7vxe7',
  danielCompanyDid: 'ErKqUsrebZ4g9FVBVbkiBN',
  danielCompanyVerkey: '8YqgPstWWUEw9UJ5sZYybPR69wvfJaUH1XTQcJsbWpBW',
  companyDanielConnectionResponse: 
   { did: 'ErKqUsrebZ4g9FVBVbkiBN',
     verkey: '8YqgPstWWUEw9UJ5sZYybPR69wvfJaUH1XTQcJsbWpBW',
     nonce: 123456 } }

=============================================
=== Company Sending Job-Certificate Credential Offer ===

@Company -> Create "Job-Certificate" Credential Offer for Daniel
{ jobCertificateCredOffer: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '29891829491064709089211826800633614713143941215398684575862486860024819374318',
        xz_cap: '372179865426998434404143741094692605441622200738170622519161325339094040568490186235684634090008729421094136969977863749478943435883534814377685665425877583964457078603342487807398014632951443235021767930817340697617235017120153477838933778992429954431557396443815093944053372841263254369631517343940915504677617127880150753618870323599228699873139727085229444084054523917946574306923145374819843779462602640004515927421006811435352920959745574413267435930826768493657851558663219403691498396513975162996354482855254336021987618101860000091749585539144168404340140109443160785000397257840512190165545632056169071830434768603992629429370157987097466731377411555120717733511151123704526279012455',
        xr_cap: [Array] },
     nonce: '405143194428269060026002' } }
@Company -> Authcrypt "Job-Certificate" Credential Offer for Daniel
{ authcryptedJobCertificateCredOfferRaw: <Buffer 8a 74 57 70 02 fa b2 70 21 7a 69 4c 0f fd e9 35 34 53 63 a5 67 7a 06 77 2c 56 17 fc c2 47 30 0b bc 4e eb c8 54 b3 ea 5f 32 9c 7f 7c 9a 3d c3 5e 78 67 ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential Offer to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential Offer received
@Daniel -> Authdecrypt "Job-Certificate" Credential Offer from Company
{ companyDanielVerKey2: '1gorm3kChQA2HEGXC1fJcagAbiwfB5fP8EtydB7vxe7',
  authdecryptedJobCertificateCredOfferJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1","key_correctness_proof":{"c":"29891829491064709089211826800633614713143941215398684575862486860024819374318","xz_cap":"372179865426998434404143741094692605441622200738170622519161325339094040568490186235684634090008729421094136969977863749478943435883534814377685665425877583964457078603342487807398014632951443235021767930817340697617235017120153477838933778992429954431557396443815093944053372841263254369631517343940915504677617127880150753618870323599228699873139727085229444084054523917946574306923145374819843779462602640004515927421006811435352920959745574413267435930826768493657851558663219403691498396513975162996354482855254336021987618101860000091749585539144168404340140109443160785000397257840512190165545632056169071830434768603992629429370157987097466731377411555120717733511151123704526279012455","xr_cap":[["first_name","133471553194800667087421019035394889099712972244050144319769884092319851759841909555709260533882570801960841627315430146277519321565882057090393395723749132530704047577454453177039685936101385544892061671729838020411453840644861725054568874628468119788258880993209637822606196581941107801167843220945983150178112542338736828596635281905860444148075433812236579001644160566318077587268864786265213541903648285265072722511194542867600385726207498267589360877628619911387096002036326401702160255642481931520215375036591154320371170213129746669284667800961820184935829760685454126128756507650642193839871584743399508653133326707043407231458317506599734023228043201050565775446278156491978710077495"],["master_secret","423236717666986142355075998290767351468531814106689189488979599210982719438180167195000817618359194983353482524371244905365349517842696601969633196980232844912653924255770668848782205276506227757955312295624968413292300140495360688831291629528661089493072164086256488716173011694318116393853648305574204212638096667861081598220076000060284602164164791807857518761654340516950940432787108099659543572865685333282001878347742413355209912127110880421816889700120915064454818069583672766483574384710480523245903165572425773446157759127662726500067713863432690788652500127898162282881645760642558990309178960510943075901564134682301674099388465261814457329111096074802802497168309731477042640540913"],["status","193973106794669354803220870838938721813462567304744121782680165107850473390639089195571563561610065232970340655031881739316057273971511707647975171013571603603868743613305017153398428455642702510961204834524225678116124240860042638338554453140383908103092416007254793915480381012600583048374344174434110795205353258090033238847936451402939185825682610228168616097393861168739066900823024349590427396374889030600857118037943731594651626449485515514943932139976641228364114124515754176839235218092844827286519038646004711484389698872930015216039590414449525846481814122630667865920413564484610523554873185282172874962840996448826486882934414152968619875959913616927764554689634130003906988956082"],["salary","228974863907478780150750254440553840608676495688482404916750629632948574535415865444273877750691062361371442260328815976593984943982076041415149666438719381655520725371264653990459618400730391553732232650990762137316512257295537159363027481010953192309763181011613646234025404036207209204444898650662777565617874413224303984398718782889485160298957967684260246482802007803656862272043380886441873903473551693349508023322199941360688694272637881993444182848447083577736517249917066713493459658420664776149256517935575933438787895959058634511712335168227665132643414346762916131551267041993055793649808447696828607809262202661415033004749377818383969360274618112445822687709886693291311038673908"],["experience","473994859032346624833410180634303812897275458600263807674479965576915233268247767907731220557443205177314588693704715610237779779745631949757096217156860655970848934662226823967320274070556968258364915534875483052957978768723986058679496846007553290488237355247213228135381334045356674390943426397067989239806730055783199169304414167925827531763256388248030376924637243345116393176215546571621893818504054528657399219123010320917417786373500101073513802846815897825054754233334930021099144624336022123988788732772168449910196616424770937314674751516160861136583706948757942245128635189595354014264738358301955003539302066392474843455684950529078457077787674484201417991359081812379097042267598"],["last_name","573716524954990130546583409941177202718684906488079112081591346154343967162660381660284396612758693740395568326810161370019594938861098467724832821029783891231602928568939510178098540208414133240659029742504550622568073908788614818706999214634863650202459587753899383207933618648169592659778288184122843887473666752384908294426527534060658455982050981635157681439135469756658248908121799681918699395834136481425456845576651395834604247913199484678676148255209977568362990312728627705311673616602393319949321064960409217739018212556619697342873573219733389128151738736589166589389654063370259379691501989890503975462002301739826696184065797950707721388117806341097655611776193802620821042490249"]]},"nonce":"405143194428269060026002"}',
  authdecryptedJobCertificateCredOffer: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '29891829491064709089211826800633614713143941215398684575862486860024819374318',
        xz_cap: '372179865426998434404143741094692605441622200738170622519161325339094040568490186235684634090008729421094136969977863749478943435883534814377685665425877583964457078603342487807398014632951443235021767930817340697617235017120153477838933778992429954431557396443815093944053372841263254369631517343940915504677617127880150753618870323599228699873139727085229444084054523917946574306923145374819843779462602640004515927421006811435352920959745574413267435930826768493657851558663219403691498396513975162996354482855254336021987618101860000091749585539144168404340140109443160785000397257840512190165545632056169071830434768603992629429370157987097466731377411555120717733511151123704526279012455',
        xr_cap: [Array] },
     nonce: '405143194428269060026002' } }

=============================================
=== Daniel Getting Job-Certificate Credential ===

@Daniel -> Get "Company Job-Certificate" Credential Definition from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541735775464912000,
        type: '108',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541735764,
        origin: 'RB9CRvryn4VFJS1smyhQLL',
        signature_type: 'CL',
        seqNo: 268,
        ref: 60,
        tag: 'TAG1',
        identifier: 'ErKqUsrebZ4g9FVBVbkiBN' } } }
{ theCompanyJobCertificateCredDefId: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
  theCompanyJobCertificateCredDef: 
   { ver: '1.0',
     id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Daniel -> Create "Job-Certificate" Credential Request for Company
{ jobCertificateCredRequest: 
   { prover_did: 'ErKqUsrebZ4g9FVBVbkiBN',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     blinded_ms: 
      { u: '64865680992792165559610384137416726332595328362453468962038757660083340285470005897460209887291757682446037967409248240286003218250903384014238690685517200237983748928431080753472021257532595208222220870013263878918458248875586676451506298330881098163354824208290260547870495440322915323293238468192531217032183791121462228842105547379787635542638668674484166047875194562617273197049754841718348025092647781519146888483196593509722203672389427932458508244906692321636838897333670485896402469946441712654099342556855187042168834358278206508714874762089743316734685555513773480103695396607641523806395415584751516551023',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '18256012988778769918172650452462768467833861843607734013390595360482012077116',
        v_dash_cap: '32173057419251326107328856844699553199599622426921094231519286325764305687218291481175304691475600262089782630213752255430751843535371920164037154853918353049559154294103127380450194808246990692424750156954462194879499449018732581370857770165998892942363943006001829081870913237648059944184299621490387250274483522607059920660481926300666657433214542805988841880448476130246544941871032242085050136922962947934515089961711102087117184364576400147116305925782580314918820146356020566695744753814314950146342718684418789476567458721041483764046262061276057526156316303384562175810677358950537959175880371825366399499597520491339285297081979228632128863361144154788497720488545486647089143767843491802949882203540434773',
        m_caps: [Object],
        r_caps: {} },
     nonce: '891367213155740502905961' },
  jobCertificateCredRequestMetadata: 
   { master_secret_blinding_data: 
      { v_prime: '1762326606528314722305965333471138464705562279093940046804553404353705082273867171074132488039565572952737885997682454488330781866474833928305224591210053304677457575420637032727714493457792734771935769265659563175571590682436568407400829533951679196652171015018237641914555734696056293799869838819387452537704994693004713451390735188747720660677208825023713172632882417478971870593060639121190587857802011774764493379309886198956271882587824395762414015173260276968226909579266256430324136994678322359051571968285959093480366704319968608125975654307385470040455006648986911053386598428150584449688311117060625027061606204873099603178853802',
        vr_prime: null },
     nonce: '891367213155740502905961',
     master_secret_name: '1e72b87a-682a-403f-870a-c75fca6976d6' } }
@Daniel -> Authcrypt "Job-Certificate" Credential Request for Company
{ authcryptedJobCertificateCredRequestRaw: <Buffer 8b df da b8 19 53 d1 20 54 8f 99 92 fb d9 10 43 99 88 f0 a3 8c 36 58 61 19 f3 e6 b8 47 04 e8 1f 50 9d ee 2c 13 6f 97 a7 66 d6 91 17 18 d1 f5 3f 83 0c ... > }
@Daniel -> Sending authcrypted "Job-Certificate" Credential Request to Company ......
@Company -> ...... authcrypted "Job-Certificate" Credential Request received
@Company -> Authdecrypt "Job-Certificate" Credential Request from Daniel
{ danielCompanyVerkey2: '8YqgPstWWUEw9UJ5sZYybPR69wvfJaUH1XTQcJsbWpBW',
  authdecryptedJobCertificateCredRequestJson: '{"prover_did":"ErKqUsrebZ4g9FVBVbkiBN","cred_def_id":"RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1","blinded_ms":{"u":"64865680992792165559610384137416726332595328362453468962038757660083340285470005897460209887291757682446037967409248240286003218250903384014238690685517200237983748928431080753472021257532595208222220870013263878918458248875586676451506298330881098163354824208290260547870495440322915323293238468192531217032183791121462228842105547379787635542638668674484166047875194562617273197049754841718348025092647781519146888483196593509722203672389427932458508244906692321636838897333670485896402469946441712654099342556855187042168834358278206508714874762089743316734685555513773480103695396607641523806395415584751516551023","ur":null,"hidden_attributes":["master_secret"],"committed_attributes":{}},"blinded_ms_correctness_proof":{"c":"18256012988778769918172650452462768467833861843607734013390595360482012077116","v_dash_cap":"32173057419251326107328856844699553199599622426921094231519286325764305687218291481175304691475600262089782630213752255430751843535371920164037154853918353049559154294103127380450194808246990692424750156954462194879499449018732581370857770165998892942363943006001829081870913237648059944184299621490387250274483522607059920660481926300666657433214542805988841880448476130246544941871032242085050136922962947934515089961711102087117184364576400147116305925782580314918820146356020566695744753814314950146342718684418789476567458721041483764046262061276057526156316303384562175810677358950537959175880371825366399499597520491339285297081979228632128863361144154788497720488545486647089143767843491802949882203540434773","m_caps":{"master_secret":"1876032999375212873398239794172579876889826861177106126810596767763561222123147063731671352401303006313764426817111232655910620774027701394688144960647063230838935746899313358191"},"r_caps":{}},"nonce":"891367213155740502905961"}',
  authdecryptedJobCertificateCredRequest: 
   { prover_did: 'ErKqUsrebZ4g9FVBVbkiBN',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     blinded_ms: 
      { u: '64865680992792165559610384137416726332595328362453468962038757660083340285470005897460209887291757682446037967409248240286003218250903384014238690685517200237983748928431080753472021257532595208222220870013263878918458248875586676451506298330881098163354824208290260547870495440322915323293238468192531217032183791121462228842105547379787635542638668674484166047875194562617273197049754841718348025092647781519146888483196593509722203672389427932458508244906692321636838897333670485896402469946441712654099342556855187042168834358278206508714874762089743316734685555513773480103695396607641523806395415584751516551023',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '18256012988778769918172650452462768467833861843607734013390595360482012077116',
        v_dash_cap: '32173057419251326107328856844699553199599622426921094231519286325764305687218291481175304691475600262089782630213752255430751843535371920164037154853918353049559154294103127380450194808246990692424750156954462194879499449018732581370857770165998892942363943006001829081870913237648059944184299621490387250274483522607059920660481926300666657433214542805988841880448476130246544941871032242085050136922962947934515089961711102087117184364576400147116305925782580314918820146356020566695744753814314950146342718684418789476567458721041483764046262061276057526156316303384562175810677358950537959175880371825366399499597520491339285297081979228632128863361144154788497720488545486647089143767843491802949882203540434773',
        m_caps: [Object],
        r_caps: {} },
     nonce: '891367213155740502905961' } }
@Company -> Create "Job-Certificate" Credential for Daniel
{ jobCertificateCredValues: 
   { first_name: 
      { raw: 'Daniel',
        encoded: '245712572474217942457235975012103335' },
     last_name: { raw: 'Yang', encoded: '312643218496194691632153761283356127' },
     salary: { raw: '2400', encoded: '2400' },
     status: { raw: 'Permanent', encoded: '2143135425425143112321314321' },
     experience: { raw: '10', encoded: '10' } } }
{ jobCertificateCred: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { salary: [Object],
        experience: [Object],
        status: [Object],
        last_name: [Object],
        first_name: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '3402341570297743832129034422219686019877634106305175258474982748372568107632329554488627932751747531934747043917740283636689726596974221085198153683208557913171092230133536572389872735718262146010910785060135841257054980092759621620323172660293178954782982532787241619499552442388881612569267296249687272451869936094651521149287452991471707207884739997589745589488176697182015533410871150565180567546421108639006273215704202227848163236394759627189634918959304720640808172582945130789420089931272001784273087122477979581476322525436308021805671627149426344395418006781750752795935852643489677091802168070978180407470',
        c: '54404335357568262953351047791149687621782466333175763536852168846334012716039' },
     rev_reg: null,
     witness: null },
  jobCertificateCredRevocId: null,
  jobCertificateCredRevocRegDelta: null }
@Company -> Authcrypt "Job-Certificate" Credential for Daniel
{ authcryptedJobCertificateCredRaw: <Buffer 47 01 e4 ed 9c ea 12 06 5c 43 1a 45 15 84 ae b1 bb 31 27 15 38 3d 3a 7c 93 8f 70 08 c1 1c f8 5f 2c 3a 39 e6 10 23 0d 33 77 68 95 a4 f7 e5 76 70 af fe ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential received
@Daniel -> Authdecrypt "Job-Certificate" Credential from Company
{ companyDanielVerKey3: '1gorm3kChQA2HEGXC1fJcagAbiwfB5fP8EtydB7vxe7',
  authdecryptedJobCertificateCredJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1","rev_reg_id":null,"values":{"salary":{"raw":"2400","encoded":"2400"},"experience":{"raw":"10","encoded":"10"},"status":{"raw":"Permanent","encoded":"2143135425425143112321314321"},"last_name":{"raw":"Yang","encoded":"312643218496194691632153761283356127"},"first_name":{"raw":"Daniel","encoded":"245712572474217942457235975012103335"}},"signature":{"p_credential":{"m_2":"46478230354476790247361897624959371625653647360968318985481010114232693678790","a":"28581922486302145332526873158756268595968188159626944548002111876156796205351803588196255440327372214312876249171760312668685408075928610614229396204838805921218534333821547828493356585203764444090524979094824607692575075334227496602516841815054865074814662297053014127046834900378744783790755186448683916220740559944002292006574610131742579925966276666781604068530028731807192984188697331472313061410890364440657040247723001129595168717750570385286140960604779399568257215319528472275979816541752274924795925269093486024988037802608542611453645433345466919498847558460482402177821519750547669678805485616760543797285","e":"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742930065798985845257490174262694675292191","v":"9504762999291575443010636998320082509478633226538262596001306259806787836413867826318222824268608873555059716639211035164821098615619075876884753024694754153621778485644974846699327531287230637902279959443266895644983506634439142714332313435752797159520026934890090999827409036053782635179766150544149875300929211381097659251994731926308090437352274724861136146049296301963096125257575713021425996872525353733359668291887965616217882067534076906299330786796861639124567734315419501780789252404295255646024592387813585696087599451664330453611315364535675238926716186149128903529798001189126247643834757749496748524050359549305417022756814338545087640918848742075745092522859403941951432554223465428065223252073411083749662445439725685970415499355192103640686908314146496830769721543972338307743215933149128309340489384671"},"r_credential":null},"signature_correctness_proof":{"se":"3402341570297743832129034422219686019877634106305175258474982748372568107632329554488627932751747531934747043917740283636689726596974221085198153683208557913171092230133536572389872735718262146010910785060135841257054980092759621620323172660293178954782982532787241619499552442388881612569267296249687272451869936094651521149287452991471707207884739997589745589488176697182015533410871150565180567546421108639006273215704202227848163236394759627189634918959304720640808172582945130789420089931272001784273087122477979581476322525436308021805671627149426344395418006781750752795935852643489677091802168070978180407470","c":"54404335357568262953351047791149687621782466333175763536852168846334012716039"},"rev_reg":null,"witness":null}',
  authdecryptedJobCertificateCred: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { salary: [Object],
        experience: [Object],
        status: [Object],
        last_name: [Object],
        first_name: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '3402341570297743832129034422219686019877634106305175258474982748372568107632329554488627932751747531934747043917740283636689726596974221085198153683208557913171092230133536572389872735718262146010910785060135841257054980092759621620323172660293178954782982532787241619499552442388881612569267296249687272451869936094651521149287452991471707207884739997589745589488176697182015533410871150565180567546421108639006273215704202227848163236394759627189634918959304720640808172582945130789420089931272001784273087122477979581476322525436308021805671627149426344395418006781750752795935852643489677091802168070978180407470',
        c: '54404335357568262953351047791149687621782466333175763536852168846334012716039' },
     rev_reg: null,
     witness: null } }
@Daniel -> Store "Job-Certificate" Credential from Company
{ jobCertificateCredId: 'b00a6c0f-e29a-46c6-8863-1b9a6f8c5468' }

=============================================
=== Park-Daniel Onboarding ===


*** onboarding ***

@Park -> Create DID "Park Daniel"
{ fromToDid: '3GnRQmVduFEd6mYAgW8f7S',
  fromToVerKey: '2EpvbtLKUGsfdXabsCx1TBUmrFmNiCcxVwwk69h89UuH' }
@Park -> Send Nym to Ledger for "Park Daniel" DID
{ requestResult: 
   { result: 
      { rootHash: '9kF1UVxpAj3nEBityHmt4ZCJMEJkAWEgNNG4WVXjCRbW',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }
@Park -> Send connection request to Daniel with "Park Daniel" DID and nonce
{ connectionRequest: { did: '3GnRQmVduFEd6mYAgW8f7S', nonce: 123456 } }
@Park -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Park"
{ toFromDid: 'RgCDRhXmjm2oXPoMvgFyuw',
  toFromVerKey: 'ET3quWYhNa8tCP4YgHsu7Tz35Td2PqqQ1w3kVKV1knBz' }
@Daniel -> Get VerKey for Did from "Park"'s connection request
{ fromToVerKey2: '2EpvbtLKUGsfdXabsCx1TBUmrFmNiCcxVwwk69h89UuH' }
@Daniel -> Anoncrypt connection response for "Park" with "Daniel Park" DID, verkey and nonce
{ connectionResponse: '{"did":"RgCDRhXmjm2oXPoMvgFyuw","verkey":"ET3quWYhNa8tCP4YgHsu7Tz35Td2PqqQ1w3kVKV1knBz","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 12 52 99 8d de 72 38 ae ee 0e 94 82 54 e7 a0 41 6a 40 d0 47 9e ea 59 3f a7 57 4f a8 4e 6c 8d 44 db db 07 84 2d 1d f8 8a 1b 53 2f a3 ae 73 26 a3 d0 6f ... > }
@Daniel -> Sending anoncrypted connection response to "Park" ......
@Park -> ...... response received
@Park -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'RgCDRhXmjm2oXPoMvgFyuw',
     verkey: 'ET3quWYhNa8tCP4YgHsu7Tz35Td2PqqQ1w3kVKV1knBz',
     nonce: 123456 } }
@Park -> Authenticates "Daniel" by comparision of none
@Park -> Send Nym to Ledger for "Daniel Park" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'FwHLZVzTLvw3EMn6iRCwm5VMbyiF9woGHN3MoLgWyTzS',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ parkDanielDid: '3GnRQmVduFEd6mYAgW8f7S',
  parkDanielVerKey: '2EpvbtLKUGsfdXabsCx1TBUmrFmNiCcxVwwk69h89UuH',
  danielParkDid: 'RgCDRhXmjm2oXPoMvgFyuw',
  danielParkVerKey: 'ET3quWYhNa8tCP4YgHsu7Tz35Td2PqqQ1w3kVKV1knBz',
  parkDanielConnectionResponse: 
   { did: 'RgCDRhXmjm2oXPoMvgFyuw',
     verkey: 'ET3quWYhNa8tCP4YgHsu7Tz35Td2PqqQ1w3kVKV1knBz',
     nonce: 123456 } }

=============================================
=== Job-Certificate Proving ===

@Park -> Create "Park-Application" Proof Request
{ parkApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Park -> Authcrypt "Park-Application" Proof Request for Daniel
{ authcryptedJobApplicationProofRequestRaw: <Buffer 23 fd b0 0d 25 bc 8e 65 ac ad 00 72 68 25 79 4b 16 ba fd f8 de ad d3 e8 f1 6f 4b 8c 10 e2 59 22 03 6f 84 c0 ea 63 d3 69 3e 62 4b a0 98 ff 49 18 db 25 ... > }
@Park -> Sending authcrypted "Job-Application" Proof Request to Daniel ......
@Daniel -> ...... authcrypted "Job-Application" Proof Request received
@Daniel -> Authdecrypt "Job-Application" Proof Request from Park
{ parkDanielVerKey2: '2EpvbtLKUGsfdXabsCx1TBUmrFmNiCcxVwwk69h89UuH',
  authdecryptedJobApplicationProofRequestJson: '{"nonce":"1432422343242122312411212","name":"Park-Application","version":"0.1","requested_attributes":{"attr1_referent":{"name":"first_name","restrictions":[{"cred_def_id":"RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1"}]},"attr2_referent":{"name":"last_name","restrictions":[{"cred_def_id":"RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1"}]},"attr3_referent":{"name":"mobile"}},"requested_predicates":{}}',
  authdecryptedJobApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Daniel -> Get Credentials for "Job-Application" Proof Request
{ jobApplicationProofReqSearchHandle: 48 }
{ credentials: [ { cred_info: [Object], interval: null } ] }
{ credForAttr1: 
   { referent: 'b00a6c0f-e29a-46c6-8863-1b9a6f8c5468',
     attrs: 
      { salary: '2400',
        status: 'Permanent',
        experience: '10',
        last_name: 'Yang',
        first_name: 'Daniel' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr2: 
   { referent: 'b00a6c0f-e29a-46c6-8863-1b9a6f8c5468',
     attrs: 
      { salary: '2400',
        status: 'Permanent',
        experience: '10',
        last_name: 'Yang',
        first_name: 'Daniel' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr3: 
   { referent: 'b00a6c0f-e29a-46c6-8863-1b9a6f8c5468',
     attrs: 
      { salary: '2400',
        status: 'Permanent',
        experience: '10',
        last_name: 'Yang',
        first_name: 'Daniel' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
{ credsForJobApplicationProof: 
   { 'b00a6c0f-e29a-46c6-8863-1b9a6f8c5468': 
      { referent: 'b00a6c0f-e29a-46c6-8863-1b9a6f8c5468',
        attrs: [Object],
        schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
        rev_reg_id: null,
        cred_rev_id: null } } }
@Daniel -> Prover Get Entities (Schemas and Credential Definitions) from Ledger

*** proverGetEntitiesFromLedger ***

{ credential: 
   { referent: 'b00a6c0f-e29a-46c6-8863-1b9a6f8c5468',
     attrs: 
      { salary: '2400',
        status: 'Permanent',
        experience: '10',
        last_name: 'Yang',
        first_name: 'Daniel' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
@Daniel -> Get Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541735777493817000,
        type: '107',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541591103,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        seqNo: 60,
        identifier: 'RgCDRhXmjm2oXPoMvgFyuw' } } }
@Daniel -> Get Credential Definition from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541735777930937000,
        type: '108',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541735764,
        origin: 'RB9CRvryn4VFJS1smyhQLL',
        signature_type: 'CL',
        seqNo: 268,
        ref: 60,
        tag: 'TAG1',
        identifier: 'RgCDRhXmjm2oXPoMvgFyuw' } } }
{ proverSchemas: 
   { 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1': 
      { ver: '1.0',
        id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        name: 'Job-Certificate',
        version: '0.1',
        attrNames: [Array],
        seqNo: 60 } },
  proverCredDefs: 
   { 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1': 
      { ver: '1.0',
        id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
        schemaId: '60',
        type: 'CL',
        tag: 'TAG1',
        value: [Object] } },
  proverRevStates: {} }
@Daniel -> Create "Park-Application" Proof
{ parkApplicationRequestedCreds: 
   { self_attested_attributes: { attr3_referent: '18618386178' },
     requested_attributes: { attr1_referent: [Object], attr2_referent: [Object] },
     requested_predicates: {} } }
{ parkApplicationProof: 
   { proof: { proofs: [Array], aggregated_proof: [Object] },
     requested_proof: 
      { revealed_attrs: [Object],
        self_attested_attrs: [Object],
        unrevealed_attrs: {},
        predicates: {} },
     identifiers: [ [Object] ] } }
@Daniel -> Authcrypt "Park-Application" Proof for Park
{ authcryptedParkApplicationProofRaw: <Buffer 5b 49 dd 6b d4 45 0c 25 44 b5 53 65 d7 37 b1 54 fb 57 bd d3 f2 1f 28 a2 04 94 24 dd 15 5e 38 0f cb 9a c6 e1 59 17 94 0e ff 60 1b 7c 3b 1d d2 8a 16 25 ... > }
@Daniel -> Sending authcrypted "Park-Application" Proof for Park ......
@Park -> ...... authcrypted "Park-Application" Proof received
@Park -> Authdecrypt "Park-Application" Proof from Daniel
{ danielParkVerKey2: 'ET3quWYhNa8tCP4YgHsu7Tz35Td2PqqQ1w3kVKV1knBz',
  authdecryptedParkApplicationProofJson: '{"proof":{"proofs":[{"primary_proof":{"eq_proof":{"revealed_attrs":{"first_name":"245712572474217942457235975012103335","last_name":"312643218496194691632153761283356127"},"a_prime":"5437543364541762786127523775423513500836531075263595535357503272004521841679381488403919738800785618849973968068147431501807745655050106748566717017772191398207071054712032655738883892671981274482631074896029029109232347589085138446405762045340627699355534181737940035372941506356759822460210349284230076137292526548953259564229414776697205650746086285347901933289895809641528675352610648181119444681552227385714490340942250231604929461105187299336983856535027005588105688303127731369932470035531651411321453449179560016125832401530674642464989672695629980747866473894289800884889983088219322430145333243534300298115","e":"54106652884835243676019313141223814582356006360704146159454206692422666479332894870329517179394303202889487176462466225543093540955561435","v":"395283402500371350159745576734560992159427666563177277614929242738567364862512605626603606721445239422931585071196758078430031746671572128919734126028747737109194297546876435669889352747105676385830432345263175088143386181386676928430817168905075199518229617021802588663245012499572284918717178881253588618508234342381429459221008941329841484277536198896012789485706579314008514214882162600093313428061177541610098707905086332410549531322697342431491503245213476614288702532374477545001276041694271770566893087511936447501449594004503528346573812948119373760404886089712480058561083203535269680871170236617630033595788226083224256416798308378494279370660206130419333941464767029666052603123555393067088586988714560554882787216992941377268795668787719707031980981435062712607659354173935653356023116528292178163520567032563266383114339048648861816501497561435010771735209454382391206701999735825241586459383492527524748346","m":{"master_secret":"6820317227159675202011756378118701290149282641478058507936098447951818837672522557240391346003359793831318181647181622315844255783285309160805782921978715658236868017105522880767","status":"3643419713209741634998388933293216021604539391865411264847382392452974885871843761541122253310393228584747298018974989899769146219783559953082314578778573530598201275957519303669","salary":"14565420499416934936815204045298252854581672519340405702363091543143496701870056648741920406058556306364093875686499211406596929133772363085709695291774954878142181903691834927483","experience":"4972711065332761390533050040141526544029652837804402252752208836939254964995873748390769348577917581341617970320975843157640156970433814478037335638993717262445355030742505737262"},"m2":"11235588553856991666652518386895485835389959506929922533880632773787980708588262581042266330210086256304102954127292335055248257552698020460622995639328246576274908176590074043943"},"ge_proofs":[]},"non_revoc_proof":null}],"aggregated_proof":{"c_hash":"73164772946723065518329018741351763270000247717013654007540784416843650646375","c_list":[[43,18,218,26,116,176,163,15,31,105,165,168,51,35,228,233,106,46,232,187,252,137,139,109,218,187,8,106,203,83,107,147,64,60,128,95,7,119,172,13,35,36,32,78,1,59,9,143,208,225,41,139,76,227,8,99,137,240,199,49,120,151,67,30,34,216,235,156,163,248,207,110,206,60,68,117,153,218,228,145,250,140,39,233,91,84,33,46,184,57,19,122,98,74,217,141,101,118,13,110,2,174,188,140,111,20,4,250,47,193,177,234,121,40,104,77,104,213,60,244,239,149,140,220,104,151,164,149,165,9,78,219,89,177,18,205,23,98,66,111,87,164,175,172,148,56,5,161,19,73,253,130,52,108,66,157,85,240,255,64,239,158,93,237,30,190,4,67,217,3,251,58,227,198,62,34,104,219,223,53,180,137,140,8,69,42,50,97,119,157,195,104,28,3,208,152,135,86,127,127,172,180,142,58,158,254,3,95,191,127,198,215,21,166,18,58,17,54,10,255,195,0,163,207,134,13,209,42,87,102,30,4,163,114,12,153,153,121,108,71,31,73,75,72,185,63,124,218,1,122,76,211,80,14,59,131]]}},"requested_proof":{"revealed_attrs":{"attr1_referent":{"sub_proof_index":0,"raw":"Daniel","encoded":"245712572474217942457235975012103335"},"attr2_referent":{"sub_proof_index":0,"raw":"Yang","encoded":"312643218496194691632153761283356127"}},"self_attested_attrs":{"attr3_referent":"18618386178"},"unrevealed_attrs":{},"predicates":{}},"identifiers":[{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1","rev_reg_id":null,"timestamp":null}]}',
  authdecryptedParkApplicationProof: 
   { proof: { proofs: [Array], aggregated_proof: [Object] },
     requested_proof: 
      { revealed_attrs: [Object],
        self_attested_attrs: [Object],
        unrevealed_attrs: {},
        predicates: {} },
     identifiers: [ [Object] ] },
  'authdecryptedParkApplicationProof.requested_proof.revealed_attrs': 
   { attr1_referent: 
      { sub_proof_index: 0,
        raw: 'Daniel',
        encoded: '245712572474217942457235975012103335' },
     attr2_referent: 
      { sub_proof_index: 0,
        raw: 'Yang',
        encoded: '312643218496194691632153761283356127' } },
  'authdecryptedParkApplicationProof.requested_proof.self_attested_attrs': { attr3_referent: '18618386178' } }
@Park -> Verifier Get Entities (Schemas and Credential Definitions) from Ledger

*** verifierGetEntitiesFromLedger ***

{ credential: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
     rev_reg_id: null,
     timestamp: null } }
@Park -> Get Schema from Ledger
{ requestResult: 
   { result: 
      { seqNo: 60,
        type: '107',
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        reqId: 1541735778414569000,
        identifier: '3GnRQmVduFEd6mYAgW8f7S',
        txnTime: 1541591103,
        state_proof: [Object],
        data: [Object] },
     op: 'REPLY' } }
@Park -> Get Credential Definition from Ldger
{ requestResult: 
   { result: 
      { tag: 'TAG1',
        seqNo: 268,
        type: '108',
        origin: 'RB9CRvryn4VFJS1smyhQLL',
        reqId: 1541735778880346000,
        signature_type: 'CL',
        identifier: '3GnRQmVduFEd6mYAgW8f7S',
        txnTime: 1541735764,
        state_proof: [Object],
        ref: 60,
        data: [Object] },
     op: 'REPLY' } }
{ verifierSchemas: 
   { 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1': 
      { ver: '1.0',
        id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        name: 'Job-Certificate',
        version: '0.1',
        attrNames: [Array],
        seqNo: 60 } },
  verifierCredDefs: 
   { 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1': 
      { ver: '1.0',
        id: 'RB9CRvryn4VFJS1smyhQLL:3:CL:60:TAG1',
        schemaId: '60',
        type: 'CL',
        tag: 'TAG1',
        value: [Object] } },
  verifierRevRegs: {},
  verifierRevRegDefs: {} }
@Park -> Verify "Park-Application" Proof from Daniel

=============================================
=== Cleanup ===

@Steward -> Close and Delete Wallet
@Park -> Close and Delete Wallet
@Company -> Close and Delete Wallet
@Daniel -> Close and Delete Wallet
Close and Delete Pool
=============================================
=== Steward Setup ===

@Steward -> Create Wallet
@Steward -> Create DID
{ stewardDid: 'Th7MpTaRZVRYnPiabds81Y',
  stewardVerKey: 'FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4' }

=============================================
=== Daniel Setup ===

@Daniel -> Create Wallet
@Daniel -> Create Master Scecret
{ danielMasterSecretId: 'caa5586f-a872-467a-8438-bb1aa9f99f08' }

=============================================
=== Steward-Park Onboarding & Park GetVerinym ===

@Park -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Park"
{ fromToDid: 'V9GTTypfsZGkmFXD5VEZPC',
  fromToVerKey: 'GLeANKTN2UNCT33oZdLmkKetbW52eadPKtzqHY4UAXXr' }
@Steward -> Send Nym to Ledger for "Steward Park" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: '8pnWkVBd2RC9GRpRuCKZnZJwkMudYJFmft4VnqMeroey',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
@Steward -> Send connection request to Park with "Steward Park" DID and nonce
{ connectionRequest: { did: 'V9GTTypfsZGkmFXD5VEZPC', nonce: 123456 } }
@Steward -> Sending request ......
@Park -> ...... request received
@Park -> Create DID "Park Steward"
{ toFromDid: 'HjDrTdCu93QdKpUZd13zUK',
  toFromVerKey: 'A7ocp2GkyWzVWr2mvJzcxr4jZYf8LVGp5td58rzahMKH' }
@Park -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: 'GLeANKTN2UNCT33oZdLmkKetbW52eadPKtzqHY4UAXXr' }
@Park -> Anoncrypt connection response for "Steward" with "Park Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"HjDrTdCu93QdKpUZd13zUK","verkey":"A7ocp2GkyWzVWr2mvJzcxr4jZYf8LVGp5td58rzahMKH","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 4f 01 bb c9 e5 9c a3 4a 3a e5 d2 6d e1 88 2d 02 f0 6e ba a5 6a 26 9e ea 23 a0 00 36 2d c5 35 75 24 fe cf e9 f2 c2 33 b2 aa 84 42 b9 01 23 68 97 17 ce ... > }
@Park -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Park"
{ decryptedConnectionResponse: 
   { did: 'HjDrTdCu93QdKpUZd13zUK',
     verkey: 'A7ocp2GkyWzVWr2mvJzcxr4jZYf8LVGp5td58rzahMKH',
     nonce: 123456 } }
@Steward -> Authenticates "Park" by comparision of none
@Steward -> Send Nym to Ledger for "Park Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: 'AqgE99nPXahpLgr445Pxry8iPJ7HFSVHzpY1BiZMNAhY',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
{ stewardParkDid: 'V9GTTypfsZGkmFXD5VEZPC',
  stewardParkVerKey: 'GLeANKTN2UNCT33oZdLmkKetbW52eadPKtzqHY4UAXXr',
  parkStewardDid: 'HjDrTdCu93QdKpUZd13zUK',
  parkStewardVerKey: 'A7ocp2GkyWzVWr2mvJzcxr4jZYf8LVGp5td58rzahMKH' }

*** getVerinym ***

@Park -> Create DID
{ toDid: '5NaoNukQ5hN9KViig779p9',
  toVerKey: '3PDFYMgpWZdJncDZ1dWpRWu52sq8k6r2k3YY5TAZKGZu' }
@Park -> Authcrypt "Park" DID info for "Steward"
{ didInfoJson: '{"did":"5NaoNukQ5hN9KViig779p9","verkey":"3PDFYMgpWZdJncDZ1dWpRWu52sq8k6r2k3YY5TAZKGZu"}',
  authcryptedDidInfo: <Buffer ea a5 d9 d6 d2 63 85 c2 f0 10 f8 47 2d 4c af 45 e7 6f a2 56 e5 9f cc 3b b3 06 35 41 3b 3b 27 43 7f a6 52 af 82 59 26 7f 1e 99 dd 0c 7f 56 4e 32 df 3b ... > }
@Park -> Sending authcrypted "Park" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Park" DID info from "Park"
{ senderVerKey: 'A7ocp2GkyWzVWr2mvJzcxr4jZYf8LVGp5td58rzahMKH',
  authdecryptedDidInfo: <Buffer 7b 22 64 69 64 22 3a 22 35 4e 61 6f 4e 75 6b 51 35 68 4e 39 4b 56 69 69 67 37 37 39 70 39 22 2c 22 76 65 72 6b 65 79 22 3a 22 33 50 44 46 59 4d 67 70 ... >,
  authdecryptedDidInfoJson: 
   { did: '5NaoNukQ5hN9KViig779p9',
     verkey: '3PDFYMgpWZdJncDZ1dWpRWu52sq8k6r2k3YY5TAZKGZu' } }
@Steward -> Authenticates "Park" by comparison of Verkeys
{ retrievedVerKey: 'A7ocp2GkyWzVWr2mvJzcxr4jZYf8LVGp5td58rzahMKH' }
@Steward -> Send Nym to Ledger for "Park" DID with TRUST_ANCHOR Role
{ requestResult: 
   { result: 
      { rootHash: '6XnmigvbkD6T3N8m1U7TWdoTnjan9SV9cJX8Fv2U1P5n',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }
{ parkDid: '5NaoNukQ5hN9KViig779p9' }

=============================================
=== Steward-Company Onboarding & Company GetVerinym ===

@Company -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Company"
{ fromToDid: '67BpYFuvYStiAv6SLPQYVX',
  fromToVerKey: '3nS3MaZSnhuyUnuLeJtpXoqSNw1J6CQiGra9XvRGZYPX' }
@Steward -> Send Nym to Ledger for "Steward Company" DID
{ requestResult: 
   { result: 
      { rootHash: '3Fpkua7imVV3SSnzUczXfvidoBvjeG13Jtqhr12n7xqo',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }
@Steward -> Send connection request to Company with "Steward Company" DID and nonce
{ connectionRequest: { did: '67BpYFuvYStiAv6SLPQYVX', nonce: 123456 } }
@Steward -> Sending request ......
@Company -> ...... request received
@Company -> Create DID "Company Steward"
{ toFromDid: 'X6fKJUCUYuynq2LVg4Xcrb',
  toFromVerKey: 'HQSmrWujvSPR5DJv21UfQbd7jwpYMDc485XW5tNEohxN' }
@Company -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: '3nS3MaZSnhuyUnuLeJtpXoqSNw1J6CQiGra9XvRGZYPX' }
@Company -> Anoncrypt connection response for "Steward" with "Company Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"X6fKJUCUYuynq2LVg4Xcrb","verkey":"HQSmrWujvSPR5DJv21UfQbd7jwpYMDc485XW5tNEohxN","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer dd 83 b8 ac 3f 7f b8 cd 62 c7 20 e8 7e 6a 7f 9a e4 da d6 e9 54 d9 b2 b3 33 ca 5b 5e 79 f8 e0 4c 5a 56 37 13 56 c0 97 23 04 89 b0 b8 43 39 f8 3b 59 38 ... > }
@Company -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Company"
{ decryptedConnectionResponse: 
   { did: 'X6fKJUCUYuynq2LVg4Xcrb',
     verkey: 'HQSmrWujvSPR5DJv21UfQbd7jwpYMDc485XW5tNEohxN',
     nonce: 123456 } }
@Steward -> Authenticates "Company" by comparision of none
@Steward -> Send Nym to Ledger for "Company Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: '3AYV7YdRQc7LG1VYmQVi9y3Hq5LLNsLR1uS6NY79KvoQ',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
{ stewardCompanyDid: '67BpYFuvYStiAv6SLPQYVX',
  stewardCompanyVerKey: '3nS3MaZSnhuyUnuLeJtpXoqSNw1J6CQiGra9XvRGZYPX',
  companyStewardDid: 'X6fKJUCUYuynq2LVg4Xcrb',
  companyStewardVerkey: 'HQSmrWujvSPR5DJv21UfQbd7jwpYMDc485XW5tNEohxN' }

*** getVerinym ***

@Company -> Create DID
{ toDid: 'Fy8ftw3mzjeeGBb3XPpBch',
  toVerKey: '9AANa6TdUABsQQGtx6n2M9VTRkkrNgubeSLhEDkMMLNN' }
@Company -> Authcrypt "Company" DID info for "Steward"
{ didInfoJson: '{"did":"Fy8ftw3mzjeeGBb3XPpBch","verkey":"9AANa6TdUABsQQGtx6n2M9VTRkkrNgubeSLhEDkMMLNN"}',
  authcryptedDidInfo: <Buffer 20 65 b2 8c 77 da c4 46 ec 56 82 53 46 5d 28 10 75 b8 14 fa 5b f3 2d 47 99 cc 33 8b d7 f3 4f 55 a6 c2 61 33 18 9f 90 7c 71 7f 5a 23 bf 7d 5a ab 82 b0 ... > }
@Company -> Sending authcrypted "Company" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Company" DID info from "Company"
{ senderVerKey: 'HQSmrWujvSPR5DJv21UfQbd7jwpYMDc485XW5tNEohxN',
  authdecryptedDidInfo: <Buffer 7b 22 64 69 64 22 3a 22 46 79 38 66 74 77 33 6d 7a 6a 65 65 47 42 62 33 58 50 70 42 63 68 22 2c 22 76 65 72 6b 65 79 22 3a 22 39 41 41 4e 61 36 54 64 ... >,
  authdecryptedDidInfoJson: 
   { did: 'Fy8ftw3mzjeeGBb3XPpBch',
     verkey: '9AANa6TdUABsQQGtx6n2M9VTRkkrNgubeSLhEDkMMLNN' } }
@Steward -> Authenticates "Company" by comparison of Verkeys
{ retrievedVerKey: 'HQSmrWujvSPR5DJv21UfQbd7jwpYMDc485XW5tNEohxN' }
@Steward -> Send Nym to Ledger for "Company" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '5Bi27pyvuBvbqmvMJVyCF2x1ZHAQB6yo4VB1rmyqW4Un',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ companyDid: 'Fy8ftw3mzjeeGBb3XPpBch' }

=============================================
=== Credential Schemas Setup ===

@Steward -> Create "Job-Certificate" Schema
{ jobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  jobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'last_name', 'status', 'experience', 'first_name', 'salary' ],
     seqNo: null } }
@Steward -> Send "Job-Certificate" Schema to Ledger
{ requestResult: 
   { reqId: 1541681064463489000,
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Job-Certificate and version 0.1\',)',
     op: 'REJECT' } }
@Steward -> Create "Park-Certificate" Schema
{ parkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  parkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'first_name', 'last_name', 'level' ],
     seqNo: null } }
@Steward -> Send "Park-Certificate" Schema to Ledger
{ requestResult: 
   { reqId: 1541681065433497000,
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Park-Certificate and version 0.1\',)',
     op: 'REJECT' } }

=============================================
=== Company Credential Definition Setup ===

@Company -> Get "Job-Certificate" Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541681066439993000,
        type: '107',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541591103,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        seqNo: 60,
        identifier: 'Fy8ftw3mzjeeGBb3XPpBch' } } }
{ theJobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  theJobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'status', 'experience', 'first_name', 'salary', 'last_name' ],
     seqNo: 60 } }
@Company -> Create and store "Company Job-Certificate" Credential Definition
{ companyJobCertificateCredDefId: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
  companyJobCertificateCredDefJson: 
   { ver: '1.0',
     id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Company -> Send "Company Job-Certificate" Credential Definition to Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: 'GmBfVxew9Bt4239dCy4sFuQrNKov6TXNDWf23DEyi4xp',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }

=============================================
=== Park Credential Definition Setup ===

@Park -> Get "Park-Certificate" Schema from Ledger
{ requestResult: 
   { result: 
      { seqNo: 85,
        type: '107',
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        reqId: 1541681074978647000,
        identifier: '5NaoNukQ5hN9KViig779p9',
        txnTime: 1541592700,
        state_proof: [Object],
        data: [Object] },
     op: 'REPLY' } }
{ theParkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  theParkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'level', 'status', 'last_name', 'first_name' ],
     seqNo: 85 } }
@Park -> Create and store "Park Park-Certificate" Credential Definition
{ parkParkCertificateCredDefId: '5NaoNukQ5hN9KViig779p9:3:CL:85:TAG1',
  parkParkCertificateCredDefJson: 
   { ver: '1.0',
     id: '5NaoNukQ5hN9KViig779p9:3:CL:85:TAG1',
     schemaId: '85',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Park -> Send "Park Park-Certificate" Credential Definition to Ledger
{ requestResult: 
   { result: 
      { rootHash: '9DaBHYw6V1KimWz7yUMhi3CNEAVMmtaNaCaonzfwrRW6',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }

=============================================
=== Company-Daniel Onboarding ===


*** onboarding ***

@Company -> Create DID "Company Daniel"
{ fromToDid: 'FTS3NgWMMogwtS3kQun8sF',
  fromToVerKey: '8syUrKdmfXM9xA2yAeCb3zRw4F1A4N36QYusj2EXet5J' }
@Company -> Send Nym to Ledger for "Company Daniel" DID
{ requestResult: 
   { result: 
      { rootHash: '6eTe8PVh9WJv2Zv9C7zw8a14KvpfDPQNcTa9nFpuDBEW',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }
@Company -> Send connection request to Daniel with "Company Daniel" DID and nonce
{ connectionRequest: { did: 'FTS3NgWMMogwtS3kQun8sF', nonce: 123456 } }
@Company -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Company"
{ toFromDid: '3CFkwJY7jECgCsfzZTLe1z',
  toFromVerKey: '2CMmJ9LSmrmKEWcbPvejbHpRjwPXcdsQr78vzkeFheRX' }
@Daniel -> Get VerKey for Did from "Company"'s connection request
{ fromToVerKey2: '8syUrKdmfXM9xA2yAeCb3zRw4F1A4N36QYusj2EXet5J' }
@Daniel -> Anoncrypt connection response for "Company" with "Daniel Company" DID, verkey and nonce
{ connectionResponse: '{"did":"3CFkwJY7jECgCsfzZTLe1z","verkey":"2CMmJ9LSmrmKEWcbPvejbHpRjwPXcdsQr78vzkeFheRX","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer ff e1 0e 97 4c b8 fb 72 36 08 3b 77 81 2c 2a 24 98 8a bb 38 0b 97 b1 63 ee d9 09 43 49 e2 b3 6b 26 f2 33 df 6e 02 82 4e d0 2b dc 64 9b b4 22 4a 83 28 ... > }
@Daniel -> Sending anoncrypted connection response to "Company" ......
@Company -> ...... response received
@Company -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: '3CFkwJY7jECgCsfzZTLe1z',
     verkey: '2CMmJ9LSmrmKEWcbPvejbHpRjwPXcdsQr78vzkeFheRX',
     nonce: 123456 } }
@Company -> Authenticates "Daniel" by comparision of none
@Company -> Send Nym to Ledger for "Daniel Company" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: 'GVZHjHQdFNKwJJPcwG1XrwD5UBUGjThfVZDGbDULfjBx',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
{ companyDanielDid: 'FTS3NgWMMogwtS3kQun8sF',
  companyDanielVerKey: '8syUrKdmfXM9xA2yAeCb3zRw4F1A4N36QYusj2EXet5J',
  danielCompanyDid: '3CFkwJY7jECgCsfzZTLe1z',
  danielCompanyVerkey: '2CMmJ9LSmrmKEWcbPvejbHpRjwPXcdsQr78vzkeFheRX',
  companyDanielConnectionResponse: 
   { did: '3CFkwJY7jECgCsfzZTLe1z',
     verkey: '2CMmJ9LSmrmKEWcbPvejbHpRjwPXcdsQr78vzkeFheRX',
     nonce: 123456 } }

=============================================
=== Company Sending Job-Certificate Credential Offer ===

@Company -> Create "Job-Certificate" Credential Offer for Daniel
{ jobCertificateCredOfferJson: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '74979506768848432006061530608678824252613168234310822070556752917444170764725',
        xz_cap: '331527590898482536970119056302475744229607333491196106967089587377577428919845849154857791275187497408264816832939962916588780032560515218546138996813786073271033859206745858200586260326021876586032375344614571348718773153508805907114008213197698107652250887843879162556152651387729256328287789171592951788812886098889396847248004309030613603882600179398331909628443459679994704733636806309584622917309976229520585738428325259527801024205905304225733251351501362867102908959050938818211962737249368469117672954565486908759740947875252368341674061664307098977897528079380444290822353079286784815114548988752082901414610846137402586187346458296981190516761726181415892762285346348400364892874777',
        xr_cap: [Array] },
     nonce: '972707613735357168632175' } }
@Company -> Authcrypt "Job-Certificate" Credential Offer for Daniel
{ authcryptedJobCertificateCredOffer: <Buffer d4 56 f1 1a 74 8e 84 90 00 51 01 58 fc c7 46 28 69 3a d9 76 81 2f ac 33 f2 6d 66 f2 56 95 9e 7a 33 20 30 65 d1 43 65 68 a4 03 ac 49 b5 34 ed 0f 24 fd ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential Offer to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential Offer received
@Daniel -> Authdecrypt "Job-Certificate" Credential Offer from Company
{ companyDanielVerKey2: '8syUrKdmfXM9xA2yAeCb3zRw4F1A4N36QYusj2EXet5J',
  authdecryptedJobCertificateCredOfferJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1","key_correctness_proof":{"c":"74979506768848432006061530608678824252613168234310822070556752917444170764725","xz_cap":"331527590898482536970119056302475744229607333491196106967089587377577428919845849154857791275187497408264816832939962916588780032560515218546138996813786073271033859206745858200586260326021876586032375344614571348718773153508805907114008213197698107652250887843879162556152651387729256328287789171592951788812886098889396847248004309030613603882600179398331909628443459679994704733636806309584622917309976229520585738428325259527801024205905304225733251351501362867102908959050938818211962737249368469117672954565486908759740947875252368341674061664307098977897528079380444290822353079286784815114548988752082901414610846137402586187346458296981190516761726181415892762285346348400364892874777","xr_cap":[["first_name","1255634637120325071447747259828716401170543702069015584152271782496982547754535425317084484110375825991004681990438738222063859167333805872585379139369535050678068134072254479014932839868581638177427456661608553901744186409814246266470872738131074718427943527044697633593463795588833172729118662889730391719053908743270683860678474145597988380733634061755537340446885018464501857840775410346388663817118431903370782963550033932955823572198768561332212547786091537939259233458394606618535540194391009744255392914627847367336929939777431035674589619713973164975603765822227764693220736829297507219490365156447935922111124046521166924548036457963069750165406581303762918742399078020406325767276571"],["experience","944593380923706806582128491701016542879175335360530447245815539901531138383596963440482406103864060660326410075456498157334671988869868243117011150974807930589014582664793666086256290647165579423813117384048297040754012289535865283233668271284771128053979767218077040479918576076902021423289747238104506452865590008671437203835665870971919285247860254842127416869984898865734324880379247427165518999760640925094930956513599303428350523788627161292745199502127312674408105546334328582629969089536103876510719732057160404716447271992774205572809020193282343324967191987731847605918633993711719996774350033590821690167831270562527053436337114532162406317194780092748374260818015403870086664891719"],["master_secret","762551613618798321108942839307960774909506534938866057747271412122022651330934553921778428311146751107516164123157576278857825044291999626002806260731983899499415550652557553497100076824870575089236771993148781602172114135539188267959272005762001035325247637494991703611592088467915268364351187474612340516134639036014387195884080868164338794963549185049339214040755500365148710100337190631738326496050758461649559895106269653457889629496133136552247788431634153472398376229274128735451131007145328919684246843074839711421384320073879929480393754505139071042840027946802094542520951850905844447360768001772861429283153315007000202149911621532156966093328337567565229632886121897416006026962803"],["last_name","1073858658051474625214484970754809879969024002921189532909146077477885803704711803243367201932282730911408178100929986530651119287781706458710727464525851780055559526334225738384231681681332575836519573589272229625979293333494173861556651133639585729376955802895841562751690287195122002651056625250329176505504333141447407013768412933778231553622004520212708842417398981671245709229494092115572939279518675199180137508023339898414236660188778745477592691047961309524593710573663301645393715474798235836276255335918339060107606859943035801458724060198923174729530856738780729114408315090643076690903229437328858060068347460441582752375936256734428134621709033992836441107618600793572702490980597"],["salary","636251262404527761161002930453148768677148391964666571170568703273582881443491344209430646849886083565804975283871733021247794499210609366221605356753526052584517069310113765572343865292031497906203748114219843188972823278288870183153082492164957580271768949583995248131926730760803741874062523746105636439123088407303490185594189239299108362690605572306392653868356984052267016650107581168870244492696888975321332932475756719389404286998670227357620405952248865357524972297415970313505462760864050677585880815006773775598934362538353786149890052016159922788534233104996940624430889241271790230156886208925222120595955465155553674589099291187000393601435165741516711026793513226098355542153903"],["status","710630691617357603385953049001255827667285538921361467477206137728986758720606145505294515225886882084825920847721517405599287398225512694241656151659433294466268817107306150796342611258747547339852833520648498730748205423940836680299690429856174739799096644082623807646905718528769792860719662368036902586105669593921281379238186996657816793006322409629251173558191196480564948282738048114397337752193705568215454340152742522627615890883304246179017214265473593095482678363111435020963696798608479213348588413935701864520427506763126916400604982979877750875758753092726705096946269919046100758044166275319577885377377196500512107468171983649951876035460761060064130678796363279163012304143257"]]},"nonce":"972707613735357168632175"}',
  authdecryptedJobCertificateCredOffer: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '74979506768848432006061530608678824252613168234310822070556752917444170764725',
        xz_cap: '331527590898482536970119056302475744229607333491196106967089587377577428919845849154857791275187497408264816832939962916588780032560515218546138996813786073271033859206745858200586260326021876586032375344614571348718773153508805907114008213197698107652250887843879162556152651387729256328287789171592951788812886098889396847248004309030613603882600179398331909628443459679994704733636806309584622917309976229520585738428325259527801024205905304225733251351501362867102908959050938818211962737249368469117672954565486908759740947875252368341674061664307098977897528079380444290822353079286784815114548988752082901414610846137402586187346458296981190516761726181415892762285346348400364892874777',
        xr_cap: [Array] },
     nonce: '972707613735357168632175' } }

=============================================
=== Daniel Getting Job-Certificate Credential ===

@Daniel -> Get "Company Job-Certificate" Credential Definition from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541681082610555000,
        type: '108',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541681074,
        origin: 'Fy8ftw3mzjeeGBb3XPpBch',
        signature_type: 'CL',
        seqNo: 220,
        ref: 60,
        tag: 'TAG1',
        identifier: '3CFkwJY7jECgCsfzZTLe1z' } } }
{ theCompanyJobCertificateCredDefId: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
  theCompanyJobCertificateCredDefJson: 
   { ver: '1.0',
     id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Daniel -> Create "Job-Certificate" Credential Request for Company
{ jobCertificateCredRequestJson: 
   { prover_did: '3CFkwJY7jECgCsfzZTLe1z',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     blinded_ms: 
      { u: '26620871645437546270707006071587571698936310669269379076695053845675912127708116013939255461069698501890458879344608503748274766896911404953116318972714786766431135938229081347283920397251888444635891594300004712058353097306686963431235732365652283849542577102122934546057063224903796736408317200295299843819530348476935660485186295987962366858668980420410722472495176038751704081004945629186101654338682404680609245793061242348526253387390740851140086824633101745520935278209588313963642160413284191134609312128554346450213800052925237787166847054695051507305460475807551220615474703644654956065018207221101677927558',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '31414707386695081275562783367275906337957954608205603209932646386550315180899',
        v_dash_cap: '516182970366054892593542975322320675429357881730570362931767652718060992746565096201744970214123193488506478278748971590136741716048434359779688705101982790474241149896089375953990478677645051589906597866183878728399441076216806926332866221951821773388823682669805506601630836709938726511580552066613996791277268969437521262348425318458140745914769912911747890542737341247963160542346122323427645908592801181741228985495669902168858159969067803833237244387314290076066980625151525518561904537866594464169034261144846036710940942217889353680951498188140464096496437926045283427418222830534050585481803351626990618221684543562093470790457823952606574089662998803200861032785196552135808922741224793764701255455395628371',
        m_caps: [Object],
        r_caps: {} },
     nonce: '432826827281980292933833' },
  jobCertificateCredRequestMetadataJson: 
   { master_secret_blinding_data: 
      { v_prime: '16431251897786937962514747376211478784914971072645780865702840698849975208210182258305972220341791442487210067930335832508233551424813089142510064072896520112041821143867584197830738614638902680167828111552237523195047548563195284163190432156709976546014547432600411060226566443143284386397550555712610405867647253993891341489189273025456289851531555415230998758024715635804132013070780456345185954765110110826689089316111181931291170789963189709967848980248110697927212914418202713845138300985981475557391983514772594835676997632192744765205495402283373000845836477239685505629913615705627164056653415958811544221136935446903981359987996659',
        vr_prime: null },
     nonce: '432826827281980292933833',
     master_secret_name: 'caa5586f-a872-467a-8438-bb1aa9f99f08' } }
@Daniel -> Authcrypt "Job-Certificate" Credential Request for Company
{ authcryptedJobCertificateCredRequest: <Buffer 70 a4 5d 29 1c c1 b0 f1 d9 76 37 a8 4d 27 95 6e a4 02 96 7b 1b 79 54 82 76 86 56 a2 1d 71 9c 50 b5 08 51 95 f7 43 d3 e1 92 9b 6d d8 39 b9 17 d9 87 44 ... > }
@Daniel -> Sending authcrypted "Job-Certificate" Credential Request to Company ......
@Company -> ...... authcrypted "Job-Certificate" Credential Request received
@Company -> Authdecrypt "Job-Certificate" Credential Request from Daniel
{ danielCompanyVerkey2: '2CMmJ9LSmrmKEWcbPvejbHpRjwPXcdsQr78vzkeFheRX',
  authdecryptedJobCertificateCredRequestJson: '{"prover_did":"3CFkwJY7jECgCsfzZTLe1z","cred_def_id":"Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1","blinded_ms":{"u":"26620871645437546270707006071587571698936310669269379076695053845675912127708116013939255461069698501890458879344608503748274766896911404953116318972714786766431135938229081347283920397251888444635891594300004712058353097306686963431235732365652283849542577102122934546057063224903796736408317200295299843819530348476935660485186295987962366858668980420410722472495176038751704081004945629186101654338682404680609245793061242348526253387390740851140086824633101745520935278209588313963642160413284191134609312128554346450213800052925237787166847054695051507305460475807551220615474703644654956065018207221101677927558","ur":null,"hidden_attributes":["master_secret"],"committed_attributes":{}},"blinded_ms_correctness_proof":{"c":"31414707386695081275562783367275906337957954608205603209932646386550315180899","v_dash_cap":"516182970366054892593542975322320675429357881730570362931767652718060992746565096201744970214123193488506478278748971590136741716048434359779688705101982790474241149896089375953990478677645051589906597866183878728399441076216806926332866221951821773388823682669805506601630836709938726511580552066613996791277268969437521262348425318458140745914769912911747890542737341247963160542346122323427645908592801181741228985495669902168858159969067803833237244387314290076066980625151525518561904537866594464169034261144846036710940942217889353680951498188140464096496437926045283427418222830534050585481803351626990618221684543562093470790457823952606574089662998803200861032785196552135808922741224793764701255455395628371","m_caps":{"master_secret":"8767344240344215035784476996937772582753170774620640921731178953514664818859040492288228145861092853759029292414436323998805557601791769702151564896713220401228787741734097269011"},"r_caps":{}},"nonce":"432826827281980292933833"}',
  authdecryptedJobCertificateCredRequest: 
   { prover_did: '3CFkwJY7jECgCsfzZTLe1z',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     blinded_ms: 
      { u: '26620871645437546270707006071587571698936310669269379076695053845675912127708116013939255461069698501890458879344608503748274766896911404953116318972714786766431135938229081347283920397251888444635891594300004712058353097306686963431235732365652283849542577102122934546057063224903796736408317200295299843819530348476935660485186295987962366858668980420410722472495176038751704081004945629186101654338682404680609245793061242348526253387390740851140086824633101745520935278209588313963642160413284191134609312128554346450213800052925237787166847054695051507305460475807551220615474703644654956065018207221101677927558',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '31414707386695081275562783367275906337957954608205603209932646386550315180899',
        v_dash_cap: '516182970366054892593542975322320675429357881730570362931767652718060992746565096201744970214123193488506478278748971590136741716048434359779688705101982790474241149896089375953990478677645051589906597866183878728399441076216806926332866221951821773388823682669805506601630836709938726511580552066613996791277268969437521262348425318458140745914769912911747890542737341247963160542346122323427645908592801181741228985495669902168858159969067803833237244387314290076066980625151525518561904537866594464169034261144846036710940942217889353680951498188140464096496437926045283427418222830534050585481803351626990618221684543562093470790457823952606574089662998803200861032785196552135808922741224793764701255455395628371',
        m_caps: [Object],
        r_caps: {} },
     nonce: '432826827281980292933833' } }
@Company -> Create "Job-Certificate" Credential for Daniel
{ jobCertificateCredValues: 
   { first_name: 
      { raw: 'Alice',
        encoded: '245712572474217942457235975012103335' },
     last_name: 
      { raw: 'Garcia',
        encoded: '312643218496194691632153761283356127' },
     salary: { raw: '2400', encoded: '2400' },
     status: { raw: 'Permanent', encoded: '2143135425425143112321314321' },
     experience: { raw: '10', encoded: '10' } } }
{ jobCertificateCredJson: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { salary: [Object],
        first_name: [Object],
        status: [Object],
        last_name: [Object],
        experience: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '11021441756616711542949572939963804699206706933455062617206456502626101024860784968309546815493450593422487825803944642937113536449371159771487947264256515995222579212038349905718673816449151411982746227534547203247794250524770834216708127589296401690778391303649632578884411479451776833996121907225874671162552518279827056279046556138977458707564971617137336968124635031401436755277049590575454500532649454362894353429661992242425953885720354325995439554060847858538383305591476747403618453228687870343622336168275486061663467491338994917838295568639952109957234659380189226407050657448793588872621395935291971585779',
        c: '83968617012172714428514890428329050956718065528149863625515662984295516537897' },
     rev_reg: null,
     witness: null },
  jobCertificateCredRevocId: null,
  jobCertificateCredRevocRegDeltaJson: null }
@Company -> Authcrypt "Job-Certificate" Credential for Daniel
{ authcryptedJobCertificateCredJson: <Buffer fd ac 2b 7d d6 64 c7 0c 2b 31 e9 36 4f 9f c2 5f 9d 7a 63 6f 60 43 55 e0 33 d3 9f b2 6a 96 02 3f bb 55 5f 7d 60 02 bf a9 03 95 2c 96 4d 6a a5 25 c3 91 ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential received
@Daniel -> Authdecrypt "Job-Certificate" Credential from Company
{ companyDanielVerKey3: '8syUrKdmfXM9xA2yAeCb3zRw4F1A4N36QYusj2EXet5J',
  authdecryptedJobCertificateCredJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1","rev_reg_id":null,"values":{"salary":{"raw":"2400","encoded":"2400"},"first_name":{"raw":"Alice","encoded":"245712572474217942457235975012103335"},"status":{"raw":"Permanent","encoded":"2143135425425143112321314321"},"last_name":{"raw":"Garcia","encoded":"312643218496194691632153761283356127"},"experience":{"raw":"10","encoded":"10"}},"signature":{"p_credential":{"m_2":"76455986845538421906718545633998020625855159162669846623823781770963483164658","a":"74263170346404690784598685234519255189546565645649045282145516089561415312430592584116756758459674772909585723173592170576264863981913693981242316747825876403947878291651589019290709925222093287902911742006860786597898515616366969237827667835768760246035860295116574442223543117300276873894111302010804118987970256882934364983308827345693019969461952824824369152998182679633284205477016172647188372647072488830011109909342845652853757559454682064645094740146130728269190516536809362619203766726959247829254561283952090591220230854264260165149331183259665426620149036979886812959554895301598115237600373545805147926241","e":"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929857893770991536573173049427783091639","v":"7990361947920979111067499632205938925669947867932580429917005022711457477091657225011708686204811402172211032836851092459427344088203226134931614306774025671817904365984762418362452766063373858067253226391317674918582225837774725843696908765331159026261264437396508137609669130600550296443048684177962374699782557489535273560052741050752174368002243790732860764360796108126329133971427861000865399308494159430610574098357732514324551115503662707976514878460421777123277208950853804237865613449153925578657033359756369116053115838583084793069643867286271173916048086208058521847180488268642895075145488182678495023619317923767268648451811654295426898751052212468060094936962079740022211305090753470375442183076223574328118057093832624776930801220815182661088493903052740246123750162953313215570867025493213493806018513738"},"r_credential":null},"signature_correctness_proof":{"se":"11021441756616711542949572939963804699206706933455062617206456502626101024860784968309546815493450593422487825803944642937113536449371159771487947264256515995222579212038349905718673816449151411982746227534547203247794250524770834216708127589296401690778391303649632578884411479451776833996121907225874671162552518279827056279046556138977458707564971617137336968124635031401436755277049590575454500532649454362894353429661992242425953885720354325995439554060847858538383305591476747403618453228687870343622336168275486061663467491338994917838295568639952109957234659380189226407050657448793588872621395935291971585779","c":"83968617012172714428514890428329050956718065528149863625515662984295516537897"},"rev_reg":null,"witness":null}',
  authdecryptedJobCertificateCred: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { salary: [Object],
        first_name: [Object],
        status: [Object],
        last_name: [Object],
        experience: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '11021441756616711542949572939963804699206706933455062617206456502626101024860784968309546815493450593422487825803944642937113536449371159771487947264256515995222579212038349905718673816449151411982746227534547203247794250524770834216708127589296401690778391303649632578884411479451776833996121907225874671162552518279827056279046556138977458707564971617137336968124635031401436755277049590575454500532649454362894353429661992242425953885720354325995439554060847858538383305591476747403618453228687870343622336168275486061663467491338994917838295568639952109957234659380189226407050657448793588872621395935291971585779',
        c: '83968617012172714428514890428329050956718065528149863625515662984295516537897' },
     rev_reg: null,
     witness: null } }
@Daniel -> Store "Job-Certificate" Credential from Company
{ jobCertificateCredId: 'e64c206b-7d04-4412-b49d-f836345dbc32' }

=============================================
=== Park-Daniel Onboarding ===


*** onboarding ***

@Park -> Create DID "Park Daniel"
{ fromToDid: 'XdB6LPkdrXx5pyUjVH4kDt',
  fromToVerKey: 'Hh5MybGkc37uq4H2XcmCPwqcpbucvPnXTk5Hksz5QJZq' }
@Park -> Send Nym to Ledger for "Park Daniel" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '7s1ikWfpcNxi3hHnC1TNEeR3iXzxXTMrGyob75xVeFog',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
@Park -> Send connection request to Daniel with "Park Daniel" DID and nonce
{ connectionRequest: { did: 'XdB6LPkdrXx5pyUjVH4kDt', nonce: 123456 } }
@Park -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Park"
{ toFromDid: 'YZEWQfErrNihdwqMnyiGVm',
  toFromVerKey: 'JCYGdMwiCbCDbmRbWrMUtZqhwCz9rbtFC7txsjJfTiL6' }
@Daniel -> Get VerKey for Did from "Park"'s connection request
{ fromToVerKey2: 'Hh5MybGkc37uq4H2XcmCPwqcpbucvPnXTk5Hksz5QJZq' }
@Daniel -> Anoncrypt connection response for "Park" with "Daniel Park" DID, verkey and nonce
{ connectionResponse: '{"did":"YZEWQfErrNihdwqMnyiGVm","verkey":"JCYGdMwiCbCDbmRbWrMUtZqhwCz9rbtFC7txsjJfTiL6","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 85 90 6e ca d6 9b 9c ab c0 3f 66 a3 15 bd 2e d1 35 8d d6 2f cf a1 8c 79 21 50 18 f4 be 7c 47 0f 5c fc fd ad bf 9b de 06 88 96 d5 42 b7 52 af 01 c2 94 ... > }
@Daniel -> Sending anoncrypted connection response to "Park" ......
@Park -> ...... response received
@Park -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'YZEWQfErrNihdwqMnyiGVm',
     verkey: 'JCYGdMwiCbCDbmRbWrMUtZqhwCz9rbtFC7txsjJfTiL6',
     nonce: 123456 } }
@Park -> Authenticates "Daniel" by comparision of none
@Park -> Send Nym to Ledger for "Daniel Park" DID
{ requestResult: 
   { result: 
      { rootHash: 'F7GH5DWPSLZe9xnYGBwrftZGUmnCMjXGkTXbqqhyMnUb',
        auditPath: [Array],
        ver: '1',
        txn: [Object],
        txnMetadata: [Object],
        reqSignature: [Object] },
     op: 'REPLY' } }
{ parkDanielDid: 'XdB6LPkdrXx5pyUjVH4kDt',
  parkDanielVerKey: 'Hh5MybGkc37uq4H2XcmCPwqcpbucvPnXTk5Hksz5QJZq',
  danielParkDid: 'YZEWQfErrNihdwqMnyiGVm',
  danielParkVerKey: 'JCYGdMwiCbCDbmRbWrMUtZqhwCz9rbtFC7txsjJfTiL6',
  parkDanielConnectionResponse: 
   { did: 'YZEWQfErrNihdwqMnyiGVm',
     verkey: 'JCYGdMwiCbCDbmRbWrMUtZqhwCz9rbtFC7txsjJfTiL6',
     nonce: 123456 } }

=============================================
=== Job-Certificate Proving ===

@Park -> Create "Park-Application" Proof Request
{ parkApplicationProofRequestJson: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Park -> Authcrypt "Park-Application" Proof Request for Daniel
{ authcryptedJobApplicationProofRequestJson: <Buffer 0f 2f 19 f1 88 5c 1e 3c cb 1f 38 96 11 41 5c df 38 a6 60 72 d9 a5 0a d2 98 50 05 21 a9 ce fd 7b 66 46 95 c2 f1 98 1d df 9f ea d5 66 ec 86 90 c3 d2 99 ... > }
@Park -> Sending authcrypted "Job-Application" Proof Request to Daniel ......
@Daniel -> ...... authcrypted "Job-Application" Proof Request received
@Daniel -> Authdecrypt "Job-Application" Proof Request from Park
{ parkDanielVerKey2: 'Hh5MybGkc37uq4H2XcmCPwqcpbucvPnXTk5Hksz5QJZq',
  authdecryptedJobApplicationProofRequestJson: '{"nonce":"1432422343242122312411212","name":"Park-Application","version":"0.1","requested_attributes":{"attr1_referent":{"name":"first_name","restrictions":[{"cred_def_id":"Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1"}]},"attr2_referent":{"name":"last_name","restrictions":[{"cred_def_id":"Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1"}]},"attr3_referent":{"name":"mobile"}},"requested_predicates":{}}',
  authdecryptedJobApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Daniel -> Get Credentials for "Job-Application" Proof Request
{ jobApplicationProofReqSearchHandle: 48 }
{ credentials: [ { cred_info: [Object], interval: null } ] }
{ credForAttr1: 
   { referent: 'e64c206b-7d04-4412-b49d-f836345dbc32',
     attrs: 
      { experience: '10',
        status: 'Permanent',
        last_name: 'Garcia',
        salary: '2400',
        first_name: 'Alice' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr2: 
   { referent: 'e64c206b-7d04-4412-b49d-f836345dbc32',
     attrs: 
      { experience: '10',
        status: 'Permanent',
        last_name: 'Garcia',
        salary: '2400',
        first_name: 'Alice' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr3: 
   { referent: 'e64c206b-7d04-4412-b49d-f836345dbc32',
     attrs: 
      { experience: '10',
        status: 'Permanent',
        last_name: 'Garcia',
        salary: '2400',
        first_name: 'Alice' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
{ 'e64c206b-7d04-4412-b49d-f836345dbc32': 
   { referent: 'e64c206b-7d04-4412-b49d-f836345dbc32',
     attrs: 
      { experience: '10',
        status: 'Permanent',
        last_name: 'Garcia',
        salary: '2400',
        first_name: 'Alice' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'Fy8ftw3mzjeeGBb3XPpBch:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }

=============================================
=== Cleanup ===

@Steward -> Close and Delete Wallet
@Park -> Close and Delete Wallet
@Company -> Close and Delete Wallet
@Daniel -> Close and Delete Wallet
Close and Delete Pool
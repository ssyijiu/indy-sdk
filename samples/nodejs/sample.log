=============================================
=== Steward Setup ===

@Steward -> Create Wallet
@Steward -> Create DID
{ stewardDid: 'Th7MpTaRZVRYnPiabds81Y',
  stewardVerKey: 'FYmoFw55GeQH7SRFa37dkx1d2dZ3zUF8ckg7wmL7ofN4' }

=============================================
=== Daniel Setup ===

@Daniel -> Create Wallet
@Daniel -> Create Master Scecret
{ danielMasterSecretId: '175957b8-0e1d-4018-9f8b-f249b89cd8a5' }

=============================================
=== Steward-Park Onboarding & Park GetVerinym ===

@Park -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Park"
{ fromToDid: '38RZ2ggLfz3nyFR17vm2du',
  fromToVerKey: '2AGewzQRHKY12iYvc2SJ8JKXzJR3YJnFdzFA6ih5TVqc' }
@Steward -> Send Nym to Ledger for "Steward Park" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: '7UFywZ23kmDzxZSDkfbnrqb166mEuVsdxZETikwKD9Ji',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
@Steward -> Send connection request to Park with "Steward Park" DID and nonce
{ connectionRequest: { did: '38RZ2ggLfz3nyFR17vm2du', nonce: 123456 } }
@Steward -> Sending request ......
@Park -> ...... request received
@Park -> Create DID "Park Steward"
{ toFromDid: 'KQ43VgKu7vasNCwYLvkNh4',
  toFromVerKey: 'B2adf69mcVCnbWwKcgg39pTjpd3qRmLaXSq2KZGNT5gu' }
@Park -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: '2AGewzQRHKY12iYvc2SJ8JKXzJR3YJnFdzFA6ih5TVqc' }
@Park -> Anoncrypt connection response for "Steward" with "Park Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"KQ43VgKu7vasNCwYLvkNh4","verkey":"B2adf69mcVCnbWwKcgg39pTjpd3qRmLaXSq2KZGNT5gu","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 2c 3d 4d 6a 31 e3 00 c4 71 1b 07 de ad 9f db 9c 3c 99 de 8e 50 89 1e 1f 44 d6 77 00 21 ea f2 4c 9c 68 9d e7 d7 85 84 6c a3 56 e2 05 3e 29 2b 98 0d 8a ... > }
@Park -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Park"
{ decryptedConnectionResponse: 
   { did: 'KQ43VgKu7vasNCwYLvkNh4',
     verkey: 'B2adf69mcVCnbWwKcgg39pTjpd3qRmLaXSq2KZGNT5gu',
     nonce: 123456 } }
@Steward -> Authenticates "Park" by comparision of none
@Steward -> Send Nym to Ledger for "Park Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '5T9AmvMcQSBPMLfCHJ84eavmBgCpn71KniEK9F13C6QV',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ stewardParkDid: '38RZ2ggLfz3nyFR17vm2du',
  stewardParkVerKey: '2AGewzQRHKY12iYvc2SJ8JKXzJR3YJnFdzFA6ih5TVqc',
  parkStewardDid: 'KQ43VgKu7vasNCwYLvkNh4',
  parkStewardVerKey: 'B2adf69mcVCnbWwKcgg39pTjpd3qRmLaXSq2KZGNT5gu' }

*** getVerinym ***

@Park -> Create DID
{ toDid: 'Ci5dDJh6L71qMcd8sTCwWg',
  toVerKey: '7P83qq7NascWvgCxMaN4uz5yxo2svXghjUFBeakL1qDe' }
@Park -> Authcrypt "Park" DID info for "Steward"
{ didInfo: '{"did":"Ci5dDJh6L71qMcd8sTCwWg","verkey":"7P83qq7NascWvgCxMaN4uz5yxo2svXghjUFBeakL1qDe"}',
  authcryptedDidInfoRaw: <Buffer 03 de 65 ae c3 35 aa d6 4e de d6 6f 2c 2e f9 68 ad 29 83 b0 b7 1a 53 e5 17 b8 55 5e 53 69 4f 2a aa ab 1c 81 44 f0 5a 1a 75 d9 ec f1 14 e2 a6 99 97 42 ... > }
@Park -> Sending authcrypted "Park" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Park" DID info from "Park"
{ senderVerKey: 'B2adf69mcVCnbWwKcgg39pTjpd3qRmLaXSq2KZGNT5gu',
  authdecryptedDidInfoRaw: <Buffer 7b 22 64 69 64 22 3a 22 43 69 35 64 44 4a 68 36 4c 37 31 71 4d 63 64 38 73 54 43 77 57 67 22 2c 22 76 65 72 6b 65 79 22 3a 22 37 50 38 33 71 71 37 4e ... >,
  authdecryptedDidInfo: 
   { did: 'Ci5dDJh6L71qMcd8sTCwWg',
     verkey: '7P83qq7NascWvgCxMaN4uz5yxo2svXghjUFBeakL1qDe' } }
@Steward -> Authenticates "Park" by comparison of Verkeys
{ retrievedVerKey: 'B2adf69mcVCnbWwKcgg39pTjpd3qRmLaXSq2KZGNT5gu' }
@Steward -> Send Nym to Ledger for "Park" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '9H7Zh8aVYB7wPnM6SAMTtejmeSf6TFbEdQUGxdjkyxEQ',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ parkDid: 'Ci5dDJh6L71qMcd8sTCwWg' }

=============================================
=== Steward-Company Onboarding & Company GetVerinym ===

@Company -> Create Wallet

*** onboarding ***

@Steward -> Create DID "Steward Company"
{ fromToDid: 'QrbV7vHRme1jfiht83Gmku',
  fromToVerKey: 'E179ojhsKyuc4PHpBmgCVuZ6pFyq3pgWDFLZhgbULX2F' }
@Steward -> Send Nym to Ledger for "Steward Company" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: '5Y2AecLUXWyXYYvX8LFL3SRHA8jn1KQh9ye2zTSm9hcN',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
@Steward -> Send connection request to Company with "Steward Company" DID and nonce
{ connectionRequest: { did: 'QrbV7vHRme1jfiht83Gmku', nonce: 123456 } }
@Steward -> Sending request ......
@Company -> ...... request received
@Company -> Create DID "Company Steward"
{ toFromDid: 'S74Tsbiq9moPzh47A28gRM',
  toFromVerKey: 'EgbvF2sL6p5je9LCrbYCd9RMz2CLvSYAagsEJp99mXrG' }
@Company -> Get VerKey for Did from "Steward"'s connection request
{ fromToVerKey2: 'E179ojhsKyuc4PHpBmgCVuZ6pFyq3pgWDFLZhgbULX2F' }
@Company -> Anoncrypt connection response for "Steward" with "Company Steward" DID, verkey and nonce
{ connectionResponse: '{"did":"S74Tsbiq9moPzh47A28gRM","verkey":"EgbvF2sL6p5je9LCrbYCd9RMz2CLvSYAagsEJp99mXrG","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer b4 c3 45 2b 66 fa bd 4e d9 18 e8 e0 16 93 48 85 dd 9b 04 77 75 97 e2 3b 48 7a 74 ab 86 93 f9 21 1b ad 9d f6 01 2b e6 29 06 42 ce 23 f3 aa 7b 41 4d fe ... > }
@Company -> Sending anoncrypted connection response to "Steward" ......
@Steward -> ...... response received
@Steward -> Anondecrypt connection response from "Company"
{ decryptedConnectionResponse: 
   { did: 'S74Tsbiq9moPzh47A28gRM',
     verkey: 'EgbvF2sL6p5je9LCrbYCd9RMz2CLvSYAagsEJp99mXrG',
     nonce: 123456 } }
@Steward -> Authenticates "Company" by comparision of none
@Steward -> Send Nym to Ledger for "Company Steward" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: '3FDmxWTFtZm3H72mieDQ5a3p5WehGhdoxWXzFQziPgb3',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ stewardCompanyDid: 'QrbV7vHRme1jfiht83Gmku',
  stewardCompanyVerKey: 'E179ojhsKyuc4PHpBmgCVuZ6pFyq3pgWDFLZhgbULX2F',
  companyStewardDid: 'S74Tsbiq9moPzh47A28gRM',
  companyStewardVerkey: 'EgbvF2sL6p5je9LCrbYCd9RMz2CLvSYAagsEJp99mXrG' }

*** getVerinym ***

@Company -> Create DID
{ toDid: 'W34RBjipxNkgjLfDtbfK37',
  toVerKey: 'GpsRVEujt3ZozVYTJ6LN7okDe4oxehYA4q4hS45i3Ujo' }
@Company -> Authcrypt "Company" DID info for "Steward"
{ didInfo: '{"did":"W34RBjipxNkgjLfDtbfK37","verkey":"GpsRVEujt3ZozVYTJ6LN7okDe4oxehYA4q4hS45i3Ujo"}',
  authcryptedDidInfoRaw: <Buffer 1b 7e ca 41 f0 4d 92 01 13 8b 8b ba 8f 05 57 ea f6 04 e4 e1 1f 0a fe 72 ef 1f b8 d1 72 78 41 26 fe eb 1c 4a 74 49 8c d1 cd c9 0c 3c e5 8c a5 15 85 86 ... > }
@Company -> Sending authcrypted "Company" DID info to "Steward" ......
@Steward -> ...... DID info received
@Steward -> Authdecrypt "Company" DID info from "Company"
{ senderVerKey: 'EgbvF2sL6p5je9LCrbYCd9RMz2CLvSYAagsEJp99mXrG',
  authdecryptedDidInfoRaw: <Buffer 7b 22 64 69 64 22 3a 22 57 33 34 52 42 6a 69 70 78 4e 6b 67 6a 4c 66 44 74 62 66 4b 33 37 22 2c 22 76 65 72 6b 65 79 22 3a 22 47 70 73 52 56 45 75 6a ... >,
  authdecryptedDidInfo: 
   { did: 'W34RBjipxNkgjLfDtbfK37',
     verkey: 'GpsRVEujt3ZozVYTJ6LN7okDe4oxehYA4q4hS45i3Ujo' } }
@Steward -> Authenticates "Company" by comparison of Verkeys
{ retrievedVerKey: 'EgbvF2sL6p5je9LCrbYCd9RMz2CLvSYAagsEJp99mXrG' }
@Steward -> Send Nym to Ledger for "Company" DID with TRUST_ANCHOR Role
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: '9cUEkrDnyfCULNpeVeapigjN5F7bSgCj92ZNjAvqfkLX',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }
{ companyDid: 'W34RBjipxNkgjLfDtbfK37' }

=============================================
=== Credential Schemas Setup ===

@Steward -> Create "Job-Certificate" Schema
{ jobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  jobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'first_name', 'last_name', 'salary', 'status', 'experience' ],
     seqNo: null } }
@Steward -> Send "Job-Certificate" Schema to Ledger
{ requestResult: 
   { reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Job-Certificate and version 0.1\',)',
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reqId: 1541734769990388000,
     op: 'REJECT' } }
@Steward -> Create "Park-Certificate" Schema
{ parkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  parkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'first_name', 'level', 'last_name' ],
     seqNo: null } }
@Steward -> Send "Park-Certificate" Schema to Ledger
{ requestResult: 
   { reason: 'client request invalid: InvalidClientRequest(\'Th7MpTaRZVRYnPiabds81Y can have one and only one SCHEMA with name Park-Certificate and version 0.1\',)',
     identifier: 'Th7MpTaRZVRYnPiabds81Y',
     reqId: 1541734770950578000,
     op: 'REJECT' } }

=============================================
=== Company Credential Definition Setup ===

@Company -> Get "Job-Certificate" Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { seqNo: 60,
        reqId: 1541734771956373000,
        data: [Object],
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        type: '107',
        identifier: 'W34RBjipxNkgjLfDtbfK37',
        txnTime: 1541591103,
        state_proof: [Object] } } }
{ theJobCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
  theJobCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     name: 'Job-Certificate',
     version: '0.1',
     attrNames: [ 'first_name', 'status', 'salary', 'experience', 'last_name' ],
     seqNo: 60 } }
@Company -> Create and store "Company Job-Certificate" Credential Definition
{ companyJobCertificateCredDefId: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
  companyJobCertificateCredDef: 
   { ver: '1.0',
     id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Company -> Send "Company Job-Certificate" Credential Definition to Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'CvBrdfctafSb98Z4KvSwbowDhJvkQ5bE6Jumn5yBcdpW',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }

=============================================
=== Park Credential Definition Setup ===

@Park -> Get "Park-Certificate" Schema from Ledger
{ requestResult: 
   { result: 
      { seqNo: 85,
        type: '107',
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        reqId: 1541734778830633000,
        identifier: 'Ci5dDJh6L71qMcd8sTCwWg',
        txnTime: 1541592700,
        state_proof: [Object],
        data: [Object] },
     op: 'REPLY' } }
{ theParkCertificateSchemaId: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
  theParkCertificateSchema: 
   { ver: '1.0',
     id: 'Th7MpTaRZVRYnPiabds81Y:2:Park-Certificate:0.1',
     name: 'Park-Certificate',
     version: '0.1',
     attrNames: [ 'level', 'last_name', 'first_name', 'status' ],
     seqNo: 85 } }
@Park -> Create and store "Park Park-Certificate" Credential Definition
{ parkParkCertificateCredDefId: 'Ci5dDJh6L71qMcd8sTCwWg:3:CL:85:TAG1',
  parkParkCertificateCredDef: 
   { ver: '1.0',
     id: 'Ci5dDJh6L71qMcd8sTCwWg:3:CL:85:TAG1',
     schemaId: '85',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Park -> Send "Park Park-Certificate" Credential Definition to Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { ver: '1',
        reqSignature: [Object],
        rootHash: '2pfnwqn784FKPi1hgcVcgspiUGfz2Ss9zudyRWNgfgDp',
        txn: [Object],
        txnMetadata: [Object],
        auditPath: [Array] } } }

=============================================
=== Company-Daniel Onboarding ===


*** onboarding ***

@Company -> Create DID "Company Daniel"
{ fromToDid: 'KN7gQrGqPoNpQGE2KNbzoZ',
  fromToVerKey: 'B1XPdEtzKra9PAw1PZAKxSKJHJc26yvWYVcV9LSPiFup' }
@Company -> Send Nym to Ledger for "Company Daniel" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '7KpCpmGH2CMQDWM3ozY378pRPmkvzsL3vgYC2Y4S6yH7',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
@Company -> Send connection request to Daniel with "Company Daniel" DID and nonce
{ connectionRequest: { did: 'KN7gQrGqPoNpQGE2KNbzoZ', nonce: 123456 } }
@Company -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Company"
{ toFromDid: 'BUuuQzxJtt9oxXAquh7YqR',
  toFromVerKey: '6iLJTMjao7dG9i9uSHu2Pj3dHT969eVArcwpRis4jhCx' }
@Daniel -> Get VerKey for Did from "Company"'s connection request
{ fromToVerKey2: 'B1XPdEtzKra9PAw1PZAKxSKJHJc26yvWYVcV9LSPiFup' }
@Daniel -> Anoncrypt connection response for "Company" with "Daniel Company" DID, verkey and nonce
{ connectionResponse: '{"did":"BUuuQzxJtt9oxXAquh7YqR","verkey":"6iLJTMjao7dG9i9uSHu2Pj3dHT969eVArcwpRis4jhCx","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 91 92 85 c9 33 c3 6a e8 be 1d 6e f7 2a af 14 58 b0 14 bd 24 88 07 65 90 52 88 b0 4e 9b 0d 0d 0e 11 84 4d e6 0a 97 83 b1 e9 b9 5f e1 16 b2 31 81 1a 66 ... > }
@Daniel -> Sending anoncrypted connection response to "Company" ......
@Company -> ...... response received
@Company -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'BUuuQzxJtt9oxXAquh7YqR',
     verkey: '6iLJTMjao7dG9i9uSHu2Pj3dHT969eVArcwpRis4jhCx',
     nonce: 123456 } }
@Company -> Authenticates "Daniel" by comparision of none
@Company -> Send Nym to Ledger for "Daniel Company" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: '2YyRBxJp5z6rqM7LH33HxwkfKvU8kcVoXeuU49qhZdWv',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
{ companyDanielDid: 'KN7gQrGqPoNpQGE2KNbzoZ',
  companyDanielVerKey: 'B1XPdEtzKra9PAw1PZAKxSKJHJc26yvWYVcV9LSPiFup',
  danielCompanyDid: 'BUuuQzxJtt9oxXAquh7YqR',
  danielCompanyVerkey: '6iLJTMjao7dG9i9uSHu2Pj3dHT969eVArcwpRis4jhCx',
  companyDanielConnectionResponse: 
   { did: 'BUuuQzxJtt9oxXAquh7YqR',
     verkey: '6iLJTMjao7dG9i9uSHu2Pj3dHT969eVArcwpRis4jhCx',
     nonce: 123456 } }

=============================================
=== Company Sending Job-Certificate Credential Offer ===

@Company -> Create "Job-Certificate" Credential Offer for Daniel
{ jobCertificateCredOffer: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '116689954687702704268549302916676971525156840895757135682559197669667652485',
        xz_cap: '1400097641654834498639531117937480800059867597243778698287032305557381803867470514358370986327140030837800960580137557297641515488268859833225259174134518359429504359199057212782216228957965745702081084972193977243473958178979186581409662531388311921592552304429467896496130185019973762355145957724018713191332647333708908473928653342359099880426375393695001215325536787996890072020783111857300284629760143011094367189855121379983467569093698461242386597752028198352753888598805438086574125663364101452404145981533949724834704495738476627889225817906142813766910541846802315565478140644100460073247645217324745323261593566126403028572869962054112909395038054577733523027664156137235961949107',
        xr_cap: [Array] },
     nonce: '417587308397871226645206' } }
@Company -> Authcrypt "Job-Certificate" Credential Offer for Daniel
{ authcryptedJobCertificateCredOfferRaw: <Buffer 5b f3 f2 cb e4 63 b8 d9 b7 c5 c3 28 ab 9b f9 a9 b2 4b db ed 22 8c e1 05 f8 85 bd ed 5b 13 f2 76 27 d3 79 98 9f 2a 06 01 a4 ae f0 c5 06 85 89 2c 6c 0b ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential Offer to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential Offer received
@Daniel -> Authdecrypt "Job-Certificate" Credential Offer from Company
{ companyDanielVerKey2: 'B1XPdEtzKra9PAw1PZAKxSKJHJc26yvWYVcV9LSPiFup',
  authdecryptedJobCertificateCredOfferJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1","key_correctness_proof":{"c":"116689954687702704268549302916676971525156840895757135682559197669667652485","xz_cap":"1400097641654834498639531117937480800059867597243778698287032305557381803867470514358370986327140030837800960580137557297641515488268859833225259174134518359429504359199057212782216228957965745702081084972193977243473958178979186581409662531388311921592552304429467896496130185019973762355145957724018713191332647333708908473928653342359099880426375393695001215325536787996890072020783111857300284629760143011094367189855121379983467569093698461242386597752028198352753888598805438086574125663364101452404145981533949724834704495738476627889225817906142813766910541846802315565478140644100460073247645217324745323261593566126403028572869962054112909395038054577733523027664156137235961949107","xr_cap":[["last_name","2168839128950368817247083958599312812868268759586777129409370157883008328248379966652079442613716567343419136739521873952881206002259233567932199658767308038597809613152500462715992573687154269644738571660667929411154387623457294566615338719485557619786731191710003693238128570527293422646639844215182381186784105208991753889516893161183775755710391667825130804953887264233636294548194031339922867706343658643838128530535384537818707752261845399756472592816620589298521705782032680059769878212848055861836365069391369724112985980992717312896247330058641094769992448184950184859291282512717672822944337034540999608402254900416308437502500856438540601749667529061267098518803961525306330118333"],["first_name","2188167717296799709737797000885082605627913821518688410844537540283306239142924680790436141973987385341602999186727638381728559744763784976677271053449738102576034428499552895389083477340432747585897854441268033388799236448905669662295068265138565263872309203874957978227406295103586067309785012681292984848924763532931456001177307730351140913326007448950655589197272192872268438866155304514120811877823999866680400502611686432470280913243014101631442023387860899395583899931814351529005157396205247589538912226873386968319142776641697045488667271642780880271125132936893849297122958336197074011055215885765587754355683565377093686286192867930926546920594577483888538272478341310706398847017"],["master_secret","1779710912630111629613425728514938699422536053974087667447047855242688636916021208078631414508944833501425165909923724355391031890836595248698459148832451839163974527695567828396549605863707728968199689323551393458863098566586673933345055788179671540876431501258957121660715944264567815533809638880974389783773730736982454729035383230679521320814655195185504430567140678347144950456231270592883899702606101930128051220778171526402547295119602830794812774611514873486495407948818380102849999075054913392187337011485833133361731965669068125729582202562834207610440056692600245320677498312367103811675334044086192320476986459155464686560685807378853003618427934935221625255292943482885739353363"],["status","2422857704726135628373586411671899439357107205845951071778993381992682741678433855010520463029491929213883124182615746712612875772493644326591413997204494089474878127153606055395017382808942993559072011028568111740875233949370716422904509543266462401781092179735381677503644762032655068418415998479349283636417619142511185205382991386884249090214989548766158928329968607786641553158714268261075889086791600965623699830203153074440716780406402097709494179604368425436011173900338488202038926401379129310992176166430941709514412867684766486830801614201772293708948431267734335340924496672400865523029423205061366284084889926345849946050558369543576144907302037557826160891855452129395135725241"],["experience","2361471076949454845603909741802377433050376471374523453718127532257636903490251000938907825955186673305718891535994166464590353900326674171288900768188651133149901030979259084402392563334551850106412766742926499021637307460125843727784969253224883521349176623632789634539833723938020603183382162435469853444010898033421063632605695663472797453876204114124376615664112124883561504982635226870051746061912324821520459014514339782907329765775624571554792704975716599946046246188243401168943658058918595555996924861717624359496677172049487815478987115038161523816840040745742576893074617488181452339117955191163781038234936633938235053617652007256949595856405112457225359503685663517916142357946"],["salary","1365722855768248287438249952760440389062767910851923022673633437799796329888026615448551781869309389448996074580576212644689085867248606720688685105645754999092456360899072177306878571125978013208380201733655232996505565013133166003906835179132411937662039681066302418665985115485861927258810089432911795607177691463625496167840404594975249830387514407321169524204792076954847540187694761474071469094544912169583829181272453109975373951607188036535491968677934035049553435251769609864572593491837506985918827876069843976244969843008659963622722027253514554472705138801787098916436863192537378938042476157513361321608435215454765766372328141912261158065129445244108289244062255099128499485000"]]},"nonce":"417587308397871226645206"}',
  authdecryptedJobCertificateCredOffer: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     key_correctness_proof: 
      { c: '116689954687702704268549302916676971525156840895757135682559197669667652485',
        xz_cap: '1400097641654834498639531117937480800059867597243778698287032305557381803867470514358370986327140030837800960580137557297641515488268859833225259174134518359429504359199057212782216228957965745702081084972193977243473958178979186581409662531388311921592552304429467896496130185019973762355145957724018713191332647333708908473928653342359099880426375393695001215325536787996890072020783111857300284629760143011094367189855121379983467569093698461242386597752028198352753888598805438086574125663364101452404145981533949724834704495738476627889225817906142813766910541846802315565478140644100460073247645217324745323261593566126403028572869962054112909395038054577733523027664156137235961949107',
        xr_cap: [Array] },
     nonce: '417587308397871226645206' } }

=============================================
=== Daniel Getting Job-Certificate Credential ===

@Daniel -> Get "Company Job-Certificate" Credential Definition from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { data: [Object],
        identifier: 'BUuuQzxJtt9oxXAquh7YqR',
        ref: 60,
        reqId: 1541734783744758000,
        txnTime: 1541734778,
        type: '108',
        tag: 'TAG1',
        seqNo: 256,
        signature_type: 'CL',
        origin: 'W34RBjipxNkgjLfDtbfK37',
        state_proof: [Object] } } }
{ theCompanyJobCertificateCredDefId: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
  theCompanyJobCertificateCredDef: 
   { ver: '1.0',
     id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     schemaId: '60',
     type: 'CL',
     tag: 'TAG1',
     value: { primary: [Object] } } }
@Daniel -> Create "Job-Certificate" Credential Request for Company
{ jobCertificateCredRequest: 
   { prover_did: 'BUuuQzxJtt9oxXAquh7YqR',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     blinded_ms: 
      { u: '58631000755231182075500286339721499052995676139924592529433794144423149014454967324955487845836467912321534441087234197773601159924315505423532214805765595769509945982512134014024226510652581311366517471730521677283176027098807680016266469403830880291391713294693746629808485124239161823621920102928654327110579997036649384910796164095941869510446449501832505740126822525296141757105613481971681811289325270224873305084927536458940751064461160792034888259481100995511338826857268173561703995293285802707259676842987430655501496669361584978545686949818675941772737761630854378947386119085066816475886412846915315075176',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '99300402899930074749472510688119921109642180055501031740272306038982545252540',
        v_dash_cap: '3709189374197607730178984292318523678913143314995734574016525628777631238666765836993644133021146379327503134198373347509944785050494625337302114487403288450053841124511370913504207988252301883148466862251317558924636579882880692120152897656645505473433404619864150073699464493705823874410433521032334663177737910778633448661170016598494756023116969093050784138676767395458392025333759896498197002932013623712665340455985666865131170440051667397402375402656383766893672100424668982296879924084915748376416036595696052615578764785522907610908075252023144165237741048570906533286821320281224179058684518761312094847679400531096433361862363223472619578978239286638875508358887154433637585663004555866914525785615748101048',
        m_caps: [Object],
        r_caps: {} },
     nonce: '60068347408764039306394' },
  jobCertificateCredRequestMetadata: 
   { master_secret_blinding_data: 
      { v_prime: '37353215756189239622397777663218022369008172646069461246300294657898713494990508069124485562810049837552016123363600396182346792381344835092438693212121842315794210891740985728147837843610164374974952143049930700962576790263566694105465467422749354208718734092995657406328472267490704700953642641082661286547477910228729354306073111379099596241395915098679380789150412346340372941846618556809014320040482551749739604536066030559728819022137927309493744951247112162605040371360547067864828365533536445481191807300317890356943600701941452388638025333429350104483896503329826696579333941706119220851422130407835245952201674064075745988381542055',
        vr_prime: null },
     nonce: '60068347408764039306394',
     master_secret_name: '175957b8-0e1d-4018-9f8b-f249b89cd8a5' } }
@Daniel -> Authcrypt "Job-Certificate" Credential Request for Company
{ authcryptedJobCertificateCredRequestRaw: <Buffer 01 e7 4b c2 e2 c3 82 aa cf fd c2 73 72 65 48 ea d4 17 9d a2 c3 32 10 57 b7 e8 24 ac 51 3a 6f 5e 3c 74 5b 90 12 d7 34 20 8c 53 d3 f2 57 75 ad 50 78 5d ... > }
@Daniel -> Sending authcrypted "Job-Certificate" Credential Request to Company ......
@Company -> ...... authcrypted "Job-Certificate" Credential Request received
@Company -> Authdecrypt "Job-Certificate" Credential Request from Daniel
{ danielCompanyVerkey2: '6iLJTMjao7dG9i9uSHu2Pj3dHT969eVArcwpRis4jhCx',
  authdecryptedJobCertificateCredRequestJson: '{"prover_did":"BUuuQzxJtt9oxXAquh7YqR","cred_def_id":"W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1","blinded_ms":{"u":"58631000755231182075500286339721499052995676139924592529433794144423149014454967324955487845836467912321534441087234197773601159924315505423532214805765595769509945982512134014024226510652581311366517471730521677283176027098807680016266469403830880291391713294693746629808485124239161823621920102928654327110579997036649384910796164095941869510446449501832505740126822525296141757105613481971681811289325270224873305084927536458940751064461160792034888259481100995511338826857268173561703995293285802707259676842987430655501496669361584978545686949818675941772737761630854378947386119085066816475886412846915315075176","ur":null,"hidden_attributes":["master_secret"],"committed_attributes":{}},"blinded_ms_correctness_proof":{"c":"99300402899930074749472510688119921109642180055501031740272306038982545252540","v_dash_cap":"3709189374197607730178984292318523678913143314995734574016525628777631238666765836993644133021146379327503134198373347509944785050494625337302114487403288450053841124511370913504207988252301883148466862251317558924636579882880692120152897656645505473433404619864150073699464493705823874410433521032334663177737910778633448661170016598494756023116969093050784138676767395458392025333759896498197002932013623712665340455985666865131170440051667397402375402656383766893672100424668982296879924084915748376416036595696052615578764785522907610908075252023144165237741048570906533286821320281224179058684518761312094847679400531096433361862363223472619578978239286638875508358887154433637585663004555866914525785615748101048","m_caps":{"master_secret":"22953302353609552314624379577003427506863608709338931454003634615485861651609170596971541313549157239452462146537316154801149542855561708289218702237484777206098037724531656108540"},"r_caps":{}},"nonce":"60068347408764039306394"}',
  authdecryptedJobCertificateCredRequest: 
   { prover_did: 'BUuuQzxJtt9oxXAquh7YqR',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     blinded_ms: 
      { u: '58631000755231182075500286339721499052995676139924592529433794144423149014454967324955487845836467912321534441087234197773601159924315505423532214805765595769509945982512134014024226510652581311366517471730521677283176027098807680016266469403830880291391713294693746629808485124239161823621920102928654327110579997036649384910796164095941869510446449501832505740126822525296141757105613481971681811289325270224873305084927536458940751064461160792034888259481100995511338826857268173561703995293285802707259676842987430655501496669361584978545686949818675941772737761630854378947386119085066816475886412846915315075176',
        ur: null,
        hidden_attributes: [Array],
        committed_attributes: {} },
     blinded_ms_correctness_proof: 
      { c: '99300402899930074749472510688119921109642180055501031740272306038982545252540',
        v_dash_cap: '3709189374197607730178984292318523678913143314995734574016525628777631238666765836993644133021146379327503134198373347509944785050494625337302114487403288450053841124511370913504207988252301883148466862251317558924636579882880692120152897656645505473433404619864150073699464493705823874410433521032334663177737910778633448661170016598494756023116969093050784138676767395458392025333759896498197002932013623712665340455985666865131170440051667397402375402656383766893672100424668982296879924084915748376416036595696052615578764785522907610908075252023144165237741048570906533286821320281224179058684518761312094847679400531096433361862363223472619578978239286638875508358887154433637585663004555866914525785615748101048',
        m_caps: [Object],
        r_caps: {} },
     nonce: '60068347408764039306394' } }
@Company -> Create "Job-Certificate" Credential for Daniel
{ jobCertificateCredValues: 
   { first_name: 
      { raw: 'Alice',
        encoded: '245712572474217942457235975012103335' },
     last_name: 
      { raw: 'Garcia',
        encoded: '312643218496194691632153761283356127' },
     salary: { raw: '2400', encoded: '2400' },
     status: { raw: 'Permanent', encoded: '2143135425425143112321314321' },
     experience: { raw: '10', encoded: '10' } } }
{ jobCertificateCred: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { salary: [Object],
        experience: [Object],
        first_name: [Object],
        status: [Object],
        last_name: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '2800530720357794535056107749652366864954503988693991158949828174911472799263549929763494131217350031331191031753531980195622219984514132557876089134118309770449180582765299819173864791900397456627084114280607384163659445126644751661759141194280618644648192302806228229393104894114927945013276670438318468773419529924611475730895993946667334814347342016706477590702453796803789808131218874225220748421119981315225579448405421281663381145217273447054308734628490744640899268489629261506201104701061352315107393384581070220627043435349670009842349265438416555072200529967204773532007720522375247331464502212374980380912',
        c: '15546262071708419708817415419457226407061728556355300759372999852648337999792' },
     rev_reg: null,
     witness: null },
  jobCertificateCredRevocId: null,
  jobCertificateCredRevocRegDelta: null }
@Company -> Authcrypt "Job-Certificate" Credential for Daniel
{ authcryptedJobCertificateCredRaw: <Buffer f6 b7 17 e9 f0 c0 f8 54 4a 5b fb 9b e1 0e 87 68 34 05 bf d8 33 c4 4a ba 4a ba 6a 63 b6 06 0d 4a 8c ab 30 a3 6a 97 59 e6 b5 29 ec 16 79 9d 90 0a 0a a2 ... > }
@Company -> Sending authcrypted "Job-Certificate" Credential to Daniel ......
@Daniel -> ...... authcrypted "Job-Certificate" Credential received
@Daniel -> Authdecrypt "Job-Certificate" Credential from Company
{ companyDanielVerKey3: 'B1XPdEtzKra9PAw1PZAKxSKJHJc26yvWYVcV9LSPiFup',
  authdecryptedJobCertificateCredJson: '{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1","rev_reg_id":null,"values":{"salary":{"raw":"2400","encoded":"2400"},"experience":{"raw":"10","encoded":"10"},"first_name":{"raw":"Alice","encoded":"245712572474217942457235975012103335"},"status":{"raw":"Permanent","encoded":"2143135425425143112321314321"},"last_name":{"raw":"Garcia","encoded":"312643218496194691632153761283356127"}},"signature":{"p_credential":{"m_2":"73735988204781979992457310056640855879983879859844783111761659326479236117856","a":"19339144171626983925274238552738738844446847450996676267418890719774292614279454475319320242407489314420408109486579402157740106078866213742449203355470264599791180302684234975332008664830849373610456786517531457151478623430870721860210245377972271568155490364787972317591676844784193186891679784090422110271943977230766703874692641418789887562228091560910106672128881456616561105962894594328607972407095968823067967290808451490643194985903529978761603387752617017791777556836825258948914937710154271124436554677494180474067329284233942906510798243577815779517250475536120131769761036305003319617578121125353020600510","e":"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929837133005973620510611450308091976521","v":"5642303677851421585709042157421912003830054167597509525402531417897961789368639719530812978677766031725903400212781129631237275810489289714722513526870986388118626979102440845908365523954726128561755333771180567977648375794893880651871511760312570190063851699813294941416673361030939287423467494602115321770620419535786637173119535714874641661406520114440451575773209119796800633939344686852885582489661407556955193286052137326401565906561412348149795025627796080694158893924398598966079309115164044024693532281567754876634692354560021874904916524023286335670325643132779491762953880763203475654432971898157390855963368988204782511141725475086468742584388902776309421467763509699127507766240948960035110911968777298098828914703081143113335094045403732682321030507964216811491954020126329398153439944758170003061454237294"},"r_credential":null},"signature_correctness_proof":{"se":"2800530720357794535056107749652366864954503988693991158949828174911472799263549929763494131217350031331191031753531980195622219984514132557876089134118309770449180582765299819173864791900397456627084114280607384163659445126644751661759141194280618644648192302806228229393104894114927945013276670438318468773419529924611475730895993946667334814347342016706477590702453796803789808131218874225220748421119981315225579448405421281663381145217273447054308734628490744640899268489629261506201104701061352315107393384581070220627043435349670009842349265438416555072200529967204773532007720522375247331464502212374980380912","c":"15546262071708419708817415419457226407061728556355300759372999852648337999792"},"rev_reg":null,"witness":null}',
  authdecryptedJobCertificateCred: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     rev_reg_id: null,
     values: 
      { salary: [Object],
        experience: [Object],
        first_name: [Object],
        status: [Object],
        last_name: [Object] },
     signature: { p_credential: [Object], r_credential: null },
     signature_correctness_proof: 
      { se: '2800530720357794535056107749652366864954503988693991158949828174911472799263549929763494131217350031331191031753531980195622219984514132557876089134118309770449180582765299819173864791900397456627084114280607384163659445126644751661759141194280618644648192302806228229393104894114927945013276670438318468773419529924611475730895993946667334814347342016706477590702453796803789808131218874225220748421119981315225579448405421281663381145217273447054308734628490744640899268489629261506201104701061352315107393384581070220627043435349670009842349265438416555072200529967204773532007720522375247331464502212374980380912',
        c: '15546262071708419708817415419457226407061728556355300759372999852648337999792' },
     rev_reg: null,
     witness: null } }
@Daniel -> Store "Job-Certificate" Credential from Company
{ jobCertificateCredId: '074272de-64a0-44d5-9d10-ab465fb3301f' }

=============================================
=== Park-Daniel Onboarding ===


*** onboarding ***

@Park -> Create DID "Park Daniel"
{ fromToDid: 'G7LGQMvf5Lx4dkCXqcAnPR',
  fromToVerKey: '9Edb4kenRDUEBoCqTFygeyRpDma7voR4rvLXCq5yJxz8' }
@Park -> Send Nym to Ledger for "Park Daniel" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        auditPath: [Array],
        rootHash: 'GQTsd2ph58BtSckonmMXf7VCY7fsUhToeveiuQT5XGMK',
        ver: '1',
        txnMetadata: [Object],
        txn: [Object] } } }
@Park -> Send connection request to Daniel with "Park Daniel" DID and nonce
{ connectionRequest: { did: 'G7LGQMvf5Lx4dkCXqcAnPR', nonce: 123456 } }
@Park -> Sending request ......
@Daniel -> ...... request received
@Daniel -> Create DID "Daniel Park"
{ toFromDid: 'akeBNcuraWfsXWW1d4QcL',
  toFromVerKey: 'KPytioFVSUYHN67TQRoPhssG8XRQfVRroHyL8TpEmy8' }
@Daniel -> Get VerKey for Did from "Park"'s connection request
{ fromToVerKey2: '9Edb4kenRDUEBoCqTFygeyRpDma7voR4rvLXCq5yJxz8' }
@Daniel -> Anoncrypt connection response for "Park" with "Daniel Park" DID, verkey and nonce
{ connectionResponse: '{"did":"akeBNcuraWfsXWW1d4QcL","verkey":"KPytioFVSUYHN67TQRoPhssG8XRQfVRroHyL8TpEmy8","nonce":123456}',
  anoncryptedConnectionResponse: <Buffer 8f 44 c9 ad 3f 3a c9 4c 34 ad 43 cb 22 6e c7 50 9d 8e 8f 58 e4 4a 4b bc 7b 14 39 d4 7a de b7 71 3b 3d df e4 aa 98 51 37 a7 10 54 74 e6 48 c0 40 02 94 ... > }
@Daniel -> Sending anoncrypted connection response to "Park" ......
@Park -> ...... response received
@Park -> Anondecrypt connection response from "Daniel"
{ decryptedConnectionResponse: 
   { did: 'akeBNcuraWfsXWW1d4QcL',
     verkey: 'KPytioFVSUYHN67TQRoPhssG8XRQfVRroHyL8TpEmy8',
     nonce: 123456 } }
@Park -> Authenticates "Daniel" by comparision of none
@Park -> Send Nym to Ledger for "Daniel Park" DID
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqSignature: [Object],
        rootHash: 'CPoKk7skuVmhCaxmYtDFuPxJkZ8weEvnErMuyDNB2irT',
        auditPath: [Array],
        txnMetadata: [Object],
        ver: '1',
        txn: [Object] } } }
{ parkDanielDid: 'G7LGQMvf5Lx4dkCXqcAnPR',
  parkDanielVerKey: '9Edb4kenRDUEBoCqTFygeyRpDma7voR4rvLXCq5yJxz8',
  danielParkDid: 'akeBNcuraWfsXWW1d4QcL',
  danielParkVerKey: 'KPytioFVSUYHN67TQRoPhssG8XRQfVRroHyL8TpEmy8',
  parkDanielConnectionResponse: 
   { did: 'akeBNcuraWfsXWW1d4QcL',
     verkey: 'KPytioFVSUYHN67TQRoPhssG8XRQfVRroHyL8TpEmy8',
     nonce: 123456 } }

=============================================
=== Job-Certificate Proving ===

@Park -> Create "Park-Application" Proof Request
{ parkApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Park -> Authcrypt "Park-Application" Proof Request for Daniel
{ authcryptedJobApplicationProofRequestRaw: <Buffer 38 01 1f 79 ed 6b 14 55 e9 f3 a0 0b 4d 97 39 b1 d5 b8 52 79 ba 76 e3 bf 16 33 6b 85 7e e2 05 4b df 9b 81 ec f0 ea ec ff 55 42 7b 17 7b 8d 95 30 df dc ... > }
@Park -> Sending authcrypted "Job-Application" Proof Request to Daniel ......
@Daniel -> ...... authcrypted "Job-Application" Proof Request received
@Daniel -> Authdecrypt "Job-Application" Proof Request from Park
{ parkDanielVerKey2: '9Edb4kenRDUEBoCqTFygeyRpDma7voR4rvLXCq5yJxz8',
  authdecryptedJobApplicationProofRequestJson: '{"nonce":"1432422343242122312411212","name":"Park-Application","version":"0.1","requested_attributes":{"attr1_referent":{"name":"first_name","restrictions":[{"cred_def_id":"W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1"}]},"attr2_referent":{"name":"last_name","restrictions":[{"cred_def_id":"W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1"}]},"attr3_referent":{"name":"mobile"}},"requested_predicates":{}}',
  authdecryptedJobApplicationProofRequest: 
   { nonce: '1432422343242122312411212',
     name: 'Park-Application',
     version: '0.1',
     requested_attributes: 
      { attr1_referent: [Object],
        attr2_referent: [Object],
        attr3_referent: [Object] },
     requested_predicates: {} } }
@Daniel -> Get Credentials for "Job-Application" Proof Request
{ jobApplicationProofReqSearchHandle: 47 }
{ credentials: [ { cred_info: [Object], interval: null } ] }
{ credForAttr1: 
   { referent: '074272de-64a0-44d5-9d10-ab465fb3301f',
     attrs: 
      { status: 'Permanent',
        first_name: 'Alice',
        experience: '10',
        salary: '2400',
        last_name: 'Garcia' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr2: 
   { referent: '074272de-64a0-44d5-9d10-ab465fb3301f',
     attrs: 
      { status: 'Permanent',
        first_name: 'Alice',
        experience: '10',
        salary: '2400',
        last_name: 'Garcia' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null },
  credForAttr3: 
   { referent: '074272de-64a0-44d5-9d10-ab465fb3301f',
     attrs: 
      { status: 'Permanent',
        first_name: 'Alice',
        experience: '10',
        salary: '2400',
        last_name: 'Garcia' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
{ credsForJobApplicationProof: 
   { '074272de-64a0-44d5-9d10-ab465fb3301f': 
      { referent: '074272de-64a0-44d5-9d10-ab465fb3301f',
        attrs: [Object],
        schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
        rev_reg_id: null,
        cred_rev_id: null } } }
@Daniel -> Prover Get Entities (Schemas and Credential Definitions) from Ledger

*** proverGetEntitiesFromLedger ***

{ credential: 
   { referent: '074272de-64a0-44d5-9d10-ab465fb3301f',
     attrs: 
      { status: 'Permanent',
        first_name: 'Alice',
        experience: '10',
        salary: '2400',
        last_name: 'Garcia' },
     schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     rev_reg_id: null,
     cred_rev_id: null } }
@Daniel -> Get Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541734785735353000,
        type: '107',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541591103,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        seqNo: 60,
        identifier: 'akeBNcuraWfsXWW1d4QcL' } } }
@Daniel -> Get Credential Definition from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541734786239446000,
        type: '108',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541734778,
        origin: 'W34RBjipxNkgjLfDtbfK37',
        signature_type: 'CL',
        seqNo: 256,
        ref: 60,
        tag: 'TAG1',
        identifier: 'akeBNcuraWfsXWW1d4QcL' } } }
{ proverSchemas: 
   { 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1': 
      { ver: '1.0',
        id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        name: 'Job-Certificate',
        version: '0.1',
        attrNames: [Array],
        seqNo: 60 } },
  proverCredDefs: 
   { 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1': 
      { ver: '1.0',
        id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
        schemaId: '60',
        type: 'CL',
        tag: 'TAG1',
        value: [Object] } },
  proverRevStates: {} }
@Daniel -> Create "Park-Application" Proof
{ parkApplicationRequestedCreds: 
   { self_attested_attributes: { attr3_referent: '18618386178' },
     requested_attributes: { attr1_referent: [Object], attr2_referent: [Object] },
     requested_predicates: {} } }
{ parkApplicationProof: 
   { proof: { proofs: [Array], aggregated_proof: [Object] },
     requested_proof: 
      { revealed_attrs: [Object],
        self_attested_attrs: [Object],
        unrevealed_attrs: {},
        predicates: {} },
     identifiers: [ [Object] ] } }
@Daniel -> Authcrypt "Park-Application" Proof for Park
{ authcryptedParkApplicationProofRaw: <Buffer 3a 2f 44 04 ee f7 04 61 a6 d5 b7 1b 13 e8 f1 ce cb 67 86 aa 24 e8 21 d9 cd d8 9d e0 47 5f b8 26 ba 2a 49 80 21 af df 2a 53 c2 63 13 77 b7 c7 dd 98 15 ... > }
@Daniel -> Sending authcrypted "Park-Application" Proof for Park ......
@Park -> ...... authcrypted "Park-Application" Proof received
@Park -> Authdecrypt "Park-Application" Proof from Daniel
{ danielParkVerKey2: 'KPytioFVSUYHN67TQRoPhssG8XRQfVRroHyL8TpEmy8',
  authdecryptedParkApplicationProofJson: '{"proof":{"proofs":[{"primary_proof":{"eq_proof":{"revealed_attrs":{"first_name":"245712572474217942457235975012103335","last_name":"312643218496194691632153761283356127"},"a_prime":"17988666118546160751225365427510781859840283334927239825689399107861018486781843393138781026915763784670771391057712995456621964317667783279670939689717037751342054850881133464715289984644184496785812625555165678775670110799123944777047470530850852178756806041701510739009291228885274147010969020038851156753940262394260699757788188727676687758887308031375448955539117021182061385145438544762987925007094865683484353288182232837067872173364971504545920892900798847828507297087163189984938498238464222842150467082876471289980371302243871229348804931197289455637972816575888296207743559510276656773487065540009390139817","e":"184089852140434926837997641050136979735495014349168384565016167576601138655425794064163994805882827891269728229029288793948187776887884992","v":"852837280079040762433606664183052670040219486021273797547020507639543467996883855427276423361991386914858053828828633514406199166982860840142882690203069425153572655967843355239372316905292152843652483388071362228707754176715237000561569615104754662537222494127038162742412256061836262128687359527546198206962556279245975138703950865009174530109502196976686137703289492390917609618668270238438835542910840689517961964411007002494790011557620189563083578248767357952782944501004428857668516775957324290912157338999879041156011342912966508501044051754545115463499605740259481737517053352991325147674351058783090499440441543279905584138984424636809445934709601840527456040227553470857044327056117552451544127680339528011455753753690027903022953492869654531421943786515365157094620446759031226817134014829113083038277686809483632602255371944695627227094187653831804099295700728284213347200051818987694193142562874855822574914","m":{"master_secret":"13263816507192213416163363548346981320484837598414017388064039007889503064091541984940917536888354031025541989396033439238602842820640859692412347090605729020253037400817269471113","status":"14673289508247908336854764986771213049363826204542048814494936982317530959143604627928646312303375118785960382112680110751908754402524195691945348812419905631176966580743848671404","experience":"7506164254106820890365843599003420571036780904090879199496175101583764037013906696709208795433838197875237135764601426578958211876045291646856016663581983898698124485464765992210","salary":"14007858184530523345522342670212119572741517227325317583261614161706526679326745042967517704799241067862534443879635366206914536251234553370471853691234091999024338566449030474836"},"m2":"14231102244907431863073346305081746352220864860080019160121938194019517229617524868384120402636687319544022139806312825759849215425166247594491600472414951444993618840161378235010"},"ge_proofs":[]},"non_revoc_proof":null}],"aggregated_proof":{"c_hash":"76413035019036701574079926273719985943023861285219125823878450210324920717110","c_list":[[142,127,104,59,203,127,104,167,238,230,146,97,200,113,160,44,54,47,26,129,74,64,80,207,104,160,239,54,201,238,246,134,25,240,255,154,144,206,57,230,243,143,205,3,129,145,50,113,101,149,123,200,65,241,49,5,15,60,89,201,31,168,161,156,73,160,18,17,165,7,126,66,100,120,11,47,195,232,179,153,189,248,29,150,68,232,211,59,22,152,244,62,162,90,125,96,111,25,63,226,199,166,69,188,139,35,179,227,61,251,141,155,124,33,215,115,90,119,96,55,72,203,109,53,245,187,233,119,157,222,110,243,237,210,11,227,80,133,12,209,74,48,113,173,214,24,233,39,234,2,40,245,77,93,103,202,122,162,25,117,167,174,134,212,165,81,132,82,24,234,53,228,245,151,131,238,167,162,23,69,91,94,81,175,50,207,246,196,150,123,16,17,191,66,179,0,196,149,152,51,231,135,84,91,127,254,218,110,144,62,171,96,82,41,41,251,9,46,85,172,156,152,63,217,204,173,43,199,209,67,170,72,194,113,87,106,226,121,103,118,106,92,193,92,218,106,102,177,70,50,125,143,106,162,105,169]]}},"requested_proof":{"revealed_attrs":{"attr1_referent":{"sub_proof_index":0,"raw":"Alice","encoded":"245712572474217942457235975012103335"},"attr2_referent":{"sub_proof_index":0,"raw":"Garcia","encoded":"312643218496194691632153761283356127"}},"self_attested_attrs":{"attr3_referent":"18618386178"},"unrevealed_attrs":{},"predicates":{}},"identifiers":[{"schema_id":"Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1","cred_def_id":"W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1","rev_reg_id":null,"timestamp":null}]}',
  authdecryptedParkApplicationProof: 
   { proof: { proofs: [Array], aggregated_proof: [Object] },
     requested_proof: 
      { revealed_attrs: [Object],
        self_attested_attrs: [Object],
        unrevealed_attrs: {},
        predicates: {} },
     identifiers: [ [Object] ] },
  'authdecryptedParkApplicationProof.requested_proof': 
   { revealed_attrs: { attr1_referent: [Object], attr2_referent: [Object] },
     self_attested_attrs: { attr3_referent: '18618386178' },
     unrevealed_attrs: {},
     predicates: {} } }
@Park -> Verifier Get Entities (Schemas and Credential Definitions) from Ledger

*** verifierGetEntitiesFromLedger ***

{ credential: 
   { schema_id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
     cred_def_id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
     rev_reg_id: null,
     timestamp: null } }
@Park -> Get Schema from Ledger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541734786740618000,
        type: '107',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541591103,
        dest: 'Th7MpTaRZVRYnPiabds81Y',
        seqNo: 60,
        identifier: 'G7LGQMvf5Lx4dkCXqcAnPR' } } }
@Park -> Get Credential Definition from Ldger
{ requestResult: 
   { op: 'REPLY',
     result: 
      { reqId: 1541734787197446000,
        type: '108',
        data: [Object],
        state_proof: [Object],
        txnTime: 1541734778,
        origin: 'W34RBjipxNkgjLfDtbfK37',
        signature_type: 'CL',
        seqNo: 256,
        ref: 60,
        tag: 'TAG1',
        identifier: 'G7LGQMvf5Lx4dkCXqcAnPR' } } }
{ verifierSchemas: 
   { 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1': 
      { ver: '1.0',
        id: 'Th7MpTaRZVRYnPiabds81Y:2:Job-Certificate:0.1',
        name: 'Job-Certificate',
        version: '0.1',
        attrNames: [Array],
        seqNo: 60 } },
  verifierCredDefs: 
   { 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1': 
      { ver: '1.0',
        id: 'W34RBjipxNkgjLfDtbfK37:3:CL:60:TAG1',
        schemaId: '60',
        type: 'CL',
        tag: 'TAG1',
        value: [Object] } },
  verifierRevRegs: {},
  verifierRevRegDefs: {} }
@Park -> Verify "Park-Application" Proof from Daniel

=============================================
=== Cleanup ===

@Steward -> Close and Delete Wallet
@Park -> Close and Delete Wallet
@Company -> Close and Delete Wallet
@Daniel -> Close and Delete Wallet
Close and Delete Pool